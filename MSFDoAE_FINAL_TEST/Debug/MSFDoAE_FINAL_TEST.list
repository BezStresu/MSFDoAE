
MSFDoAE_FINAL_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b90  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000468  08009d40  08009d40  00019d40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a1a8  0800a1a8  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a1a8  0800a1a8  0001a1a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a1b0  0800a1b0  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a1b0  0800a1b0  0001a1b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a1b4  0800a1b4  0001a1b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800a1b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d4  2**0
                  CONTENTS
 10 .bss          0000074c  200001d4  200001d4  000201d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000920  20000920  000201d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000f7c3  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002ac9  00000000  00000000  0002fa0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000d48  00000000  00000000  000324d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000a27  00000000  00000000  00033220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00025d3d  00000000  00000000  00033c47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00012fd3  00000000  00000000  00059984  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000dad53  00000000  00000000  0006c957  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004b24  00000000  00000000  001476ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000088  00000000  00000000  0014c1d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001d4 	.word	0x200001d4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009d28 	.word	0x08009d28

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	08009d28 	.word	0x08009d28

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a6 	b.w	800100c <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9e08      	ldr	r6, [sp, #32]
 8000d4a:	460d      	mov	r5, r1
 8000d4c:	4604      	mov	r4, r0
 8000d4e:	460f      	mov	r7, r1
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d14a      	bne.n	8000dea <__udivmoddi4+0xa6>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4694      	mov	ip, r2
 8000d58:	d965      	bls.n	8000e26 <__udivmoddi4+0xe2>
 8000d5a:	fab2 f382 	clz	r3, r2
 8000d5e:	b143      	cbz	r3, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d64:	f1c3 0220 	rsb	r2, r3, #32
 8000d68:	409f      	lsls	r7, r3
 8000d6a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d6e:	4317      	orrs	r7, r2
 8000d70:	409c      	lsls	r4, r3
 8000d72:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d76:	fa1f f58c 	uxth.w	r5, ip
 8000d7a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d7e:	0c22      	lsrs	r2, r4, #16
 8000d80:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d84:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d88:	fb01 f005 	mul.w	r0, r1, r5
 8000d8c:	4290      	cmp	r0, r2
 8000d8e:	d90a      	bls.n	8000da6 <__udivmoddi4+0x62>
 8000d90:	eb1c 0202 	adds.w	r2, ip, r2
 8000d94:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d98:	f080 811c 	bcs.w	8000fd4 <__udivmoddi4+0x290>
 8000d9c:	4290      	cmp	r0, r2
 8000d9e:	f240 8119 	bls.w	8000fd4 <__udivmoddi4+0x290>
 8000da2:	3902      	subs	r1, #2
 8000da4:	4462      	add	r2, ip
 8000da6:	1a12      	subs	r2, r2, r0
 8000da8:	b2a4      	uxth	r4, r4
 8000daa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dae:	fb0e 2210 	mls	r2, lr, r0, r2
 8000db2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000db6:	fb00 f505 	mul.w	r5, r0, r5
 8000dba:	42a5      	cmp	r5, r4
 8000dbc:	d90a      	bls.n	8000dd4 <__udivmoddi4+0x90>
 8000dbe:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dc6:	f080 8107 	bcs.w	8000fd8 <__udivmoddi4+0x294>
 8000dca:	42a5      	cmp	r5, r4
 8000dcc:	f240 8104 	bls.w	8000fd8 <__udivmoddi4+0x294>
 8000dd0:	4464      	add	r4, ip
 8000dd2:	3802      	subs	r0, #2
 8000dd4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	2100      	movs	r1, #0
 8000ddc:	b11e      	cbz	r6, 8000de6 <__udivmoddi4+0xa2>
 8000dde:	40dc      	lsrs	r4, r3
 8000de0:	2300      	movs	r3, #0
 8000de2:	e9c6 4300 	strd	r4, r3, [r6]
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0xbc>
 8000dee:	2e00      	cmp	r6, #0
 8000df0:	f000 80ed 	beq.w	8000fce <__udivmoddi4+0x28a>
 8000df4:	2100      	movs	r1, #0
 8000df6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e00:	fab3 f183 	clz	r1, r3
 8000e04:	2900      	cmp	r1, #0
 8000e06:	d149      	bne.n	8000e9c <__udivmoddi4+0x158>
 8000e08:	42ab      	cmp	r3, r5
 8000e0a:	d302      	bcc.n	8000e12 <__udivmoddi4+0xce>
 8000e0c:	4282      	cmp	r2, r0
 8000e0e:	f200 80f8 	bhi.w	8001002 <__udivmoddi4+0x2be>
 8000e12:	1a84      	subs	r4, r0, r2
 8000e14:	eb65 0203 	sbc.w	r2, r5, r3
 8000e18:	2001      	movs	r0, #1
 8000e1a:	4617      	mov	r7, r2
 8000e1c:	2e00      	cmp	r6, #0
 8000e1e:	d0e2      	beq.n	8000de6 <__udivmoddi4+0xa2>
 8000e20:	e9c6 4700 	strd	r4, r7, [r6]
 8000e24:	e7df      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000e26:	b902      	cbnz	r2, 8000e2a <__udivmoddi4+0xe6>
 8000e28:	deff      	udf	#255	; 0xff
 8000e2a:	fab2 f382 	clz	r3, r2
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	f040 8090 	bne.w	8000f54 <__udivmoddi4+0x210>
 8000e34:	1a8a      	subs	r2, r1, r2
 8000e36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e3a:	fa1f fe8c 	uxth.w	lr, ip
 8000e3e:	2101      	movs	r1, #1
 8000e40:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e44:	fb07 2015 	mls	r0, r7, r5, r2
 8000e48:	0c22      	lsrs	r2, r4, #16
 8000e4a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e4e:	fb0e f005 	mul.w	r0, lr, r5
 8000e52:	4290      	cmp	r0, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x124>
 8000e56:	eb1c 0202 	adds.w	r2, ip, r2
 8000e5a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x122>
 8000e60:	4290      	cmp	r0, r2
 8000e62:	f200 80cb 	bhi.w	8000ffc <__udivmoddi4+0x2b8>
 8000e66:	4645      	mov	r5, r8
 8000e68:	1a12      	subs	r2, r2, r0
 8000e6a:	b2a4      	uxth	r4, r4
 8000e6c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e70:	fb07 2210 	mls	r2, r7, r0, r2
 8000e74:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e78:	fb0e fe00 	mul.w	lr, lr, r0
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x14e>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e88:	d202      	bcs.n	8000e90 <__udivmoddi4+0x14c>
 8000e8a:	45a6      	cmp	lr, r4
 8000e8c:	f200 80bb 	bhi.w	8001006 <__udivmoddi4+0x2c2>
 8000e90:	4610      	mov	r0, r2
 8000e92:	eba4 040e 	sub.w	r4, r4, lr
 8000e96:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e9a:	e79f      	b.n	8000ddc <__udivmoddi4+0x98>
 8000e9c:	f1c1 0720 	rsb	r7, r1, #32
 8000ea0:	408b      	lsls	r3, r1
 8000ea2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ea6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eaa:	fa05 f401 	lsl.w	r4, r5, r1
 8000eae:	fa20 f307 	lsr.w	r3, r0, r7
 8000eb2:	40fd      	lsrs	r5, r7
 8000eb4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb8:	4323      	orrs	r3, r4
 8000eba:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ebe:	fa1f fe8c 	uxth.w	lr, ip
 8000ec2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ec6:	0c1c      	lsrs	r4, r3, #16
 8000ec8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ecc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ed0:	42a5      	cmp	r5, r4
 8000ed2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ed6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eda:	d90b      	bls.n	8000ef4 <__udivmoddi4+0x1b0>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ee4:	f080 8088 	bcs.w	8000ff8 <__udivmoddi4+0x2b4>
 8000ee8:	42a5      	cmp	r5, r4
 8000eea:	f240 8085 	bls.w	8000ff8 <__udivmoddi4+0x2b4>
 8000eee:	f1a8 0802 	sub.w	r8, r8, #2
 8000ef2:	4464      	add	r4, ip
 8000ef4:	1b64      	subs	r4, r4, r5
 8000ef6:	b29d      	uxth	r5, r3
 8000ef8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000efc:	fb09 4413 	mls	r4, r9, r3, r4
 8000f00:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f04:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f08:	45a6      	cmp	lr, r4
 8000f0a:	d908      	bls.n	8000f1e <__udivmoddi4+0x1da>
 8000f0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f10:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f14:	d26c      	bcs.n	8000ff0 <__udivmoddi4+0x2ac>
 8000f16:	45a6      	cmp	lr, r4
 8000f18:	d96a      	bls.n	8000ff0 <__udivmoddi4+0x2ac>
 8000f1a:	3b02      	subs	r3, #2
 8000f1c:	4464      	add	r4, ip
 8000f1e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f22:	fba3 9502 	umull	r9, r5, r3, r2
 8000f26:	eba4 040e 	sub.w	r4, r4, lr
 8000f2a:	42ac      	cmp	r4, r5
 8000f2c:	46c8      	mov	r8, r9
 8000f2e:	46ae      	mov	lr, r5
 8000f30:	d356      	bcc.n	8000fe0 <__udivmoddi4+0x29c>
 8000f32:	d053      	beq.n	8000fdc <__udivmoddi4+0x298>
 8000f34:	b156      	cbz	r6, 8000f4c <__udivmoddi4+0x208>
 8000f36:	ebb0 0208 	subs.w	r2, r0, r8
 8000f3a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f3e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f42:	40ca      	lsrs	r2, r1
 8000f44:	40cc      	lsrs	r4, r1
 8000f46:	4317      	orrs	r7, r2
 8000f48:	e9c6 7400 	strd	r7, r4, [r6]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	2100      	movs	r1, #0
 8000f50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f54:	f1c3 0120 	rsb	r1, r3, #32
 8000f58:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f5c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f60:	fa25 f101 	lsr.w	r1, r5, r1
 8000f64:	409d      	lsls	r5, r3
 8000f66:	432a      	orrs	r2, r5
 8000f68:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f6c:	fa1f fe8c 	uxth.w	lr, ip
 8000f70:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f74:	fb07 1510 	mls	r5, r7, r0, r1
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f7e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f82:	428d      	cmp	r5, r1
 8000f84:	fa04 f403 	lsl.w	r4, r4, r3
 8000f88:	d908      	bls.n	8000f9c <__udivmoddi4+0x258>
 8000f8a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f8e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f92:	d22f      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000f94:	428d      	cmp	r5, r1
 8000f96:	d92d      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000f98:	3802      	subs	r0, #2
 8000f9a:	4461      	add	r1, ip
 8000f9c:	1b49      	subs	r1, r1, r5
 8000f9e:	b292      	uxth	r2, r2
 8000fa0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fa4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fa8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fac:	fb05 f10e 	mul.w	r1, r5, lr
 8000fb0:	4291      	cmp	r1, r2
 8000fb2:	d908      	bls.n	8000fc6 <__udivmoddi4+0x282>
 8000fb4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fb8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fbc:	d216      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000fbe:	4291      	cmp	r1, r2
 8000fc0:	d914      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000fc2:	3d02      	subs	r5, #2
 8000fc4:	4462      	add	r2, ip
 8000fc6:	1a52      	subs	r2, r2, r1
 8000fc8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fcc:	e738      	b.n	8000e40 <__udivmoddi4+0xfc>
 8000fce:	4631      	mov	r1, r6
 8000fd0:	4630      	mov	r0, r6
 8000fd2:	e708      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000fd4:	4639      	mov	r1, r7
 8000fd6:	e6e6      	b.n	8000da6 <__udivmoddi4+0x62>
 8000fd8:	4610      	mov	r0, r2
 8000fda:	e6fb      	b.n	8000dd4 <__udivmoddi4+0x90>
 8000fdc:	4548      	cmp	r0, r9
 8000fde:	d2a9      	bcs.n	8000f34 <__udivmoddi4+0x1f0>
 8000fe0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fe4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fe8:	3b01      	subs	r3, #1
 8000fea:	e7a3      	b.n	8000f34 <__udivmoddi4+0x1f0>
 8000fec:	4645      	mov	r5, r8
 8000fee:	e7ea      	b.n	8000fc6 <__udivmoddi4+0x282>
 8000ff0:	462b      	mov	r3, r5
 8000ff2:	e794      	b.n	8000f1e <__udivmoddi4+0x1da>
 8000ff4:	4640      	mov	r0, r8
 8000ff6:	e7d1      	b.n	8000f9c <__udivmoddi4+0x258>
 8000ff8:	46d0      	mov	r8, sl
 8000ffa:	e77b      	b.n	8000ef4 <__udivmoddi4+0x1b0>
 8000ffc:	3d02      	subs	r5, #2
 8000ffe:	4462      	add	r2, ip
 8001000:	e732      	b.n	8000e68 <__udivmoddi4+0x124>
 8001002:	4608      	mov	r0, r1
 8001004:	e70a      	b.n	8000e1c <__udivmoddi4+0xd8>
 8001006:	4464      	add	r4, ip
 8001008:	3802      	subs	r0, #2
 800100a:	e742      	b.n	8000e92 <__udivmoddi4+0x14e>

0800100c <__aeabi_idiv0>:
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop

08001010 <AD7606_Init>:
#include "ad7606_stm32_JL.h"

static SPI_HandleTypeDef *ad7606_hspi;

void AD7606_Init(SPI_HandleTypeDef *hspi) {
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
    ad7606_hspi = hspi;
 8001018:	4a0d      	ldr	r2, [pc, #52]	; (8001050 <AD7606_Init+0x40>)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6013      	str	r3, [r2, #0]

    HAL_GPIO_WritePin(AD7606_RESET_Port, AD7606_RESET_Pin, GPIO_PIN_RESET);
 800101e:	2200      	movs	r2, #0
 8001020:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001024:	480b      	ldr	r0, [pc, #44]	; (8001054 <AD7606_Init+0x44>)
 8001026:	f001 fd39 	bl	8002a9c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(AD7606_CONVST_Port, AD7606_CONVST_Pin, GPIO_PIN_RESET);
 800102a:	2200      	movs	r2, #0
 800102c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001030:	4808      	ldr	r0, [pc, #32]	; (8001054 <AD7606_Init+0x44>)
 8001032:	f001 fd33 	bl	8002a9c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(AD7606_CS_Port, AD7606_CS_Pin, GPIO_PIN_SET);
 8001036:	2201      	movs	r2, #1
 8001038:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800103c:	4806      	ldr	r0, [pc, #24]	; (8001058 <AD7606_Init+0x48>)
 800103e:	f001 fd2d 	bl	8002a9c <HAL_GPIO_WritePin>

    AD7606_Reset();
 8001042:	f000 f80b 	bl	800105c <AD7606_Reset>
    return;
 8001046:	bf00      	nop
}
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	200001f0 	.word	0x200001f0
 8001054:	40021400 	.word	0x40021400
 8001058:	40020c00 	.word	0x40020c00

0800105c <AD7606_Reset>:

void AD7606_Reset() {
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_SET);
 8001060:	2201      	movs	r2, #1
 8001062:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001066:	4808      	ldr	r0, [pc, #32]	; (8001088 <AD7606_Reset+0x2c>)
 8001068:	f001 fd18 	bl	8002a9c <HAL_GPIO_WritePin>
    HAL_Delay(1);
 800106c:	2001      	movs	r0, #1
 800106e:	f001 f989 	bl	8002384 <HAL_Delay>
    HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_RESET);
 8001072:	2200      	movs	r2, #0
 8001074:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001078:	4803      	ldr	r0, [pc, #12]	; (8001088 <AD7606_Reset+0x2c>)
 800107a:	f001 fd0f 	bl	8002a9c <HAL_GPIO_WritePin>
    HAL_Delay(1);
 800107e:	2001      	movs	r0, #1
 8001080:	f001 f980 	bl	8002384 <HAL_Delay>
    return;
 8001084:	bf00      	nop
}
 8001086:	bd80      	pop	{r7, pc}
 8001088:	40021400 	.word	0x40021400

0800108c <AD7606_StartConversion>:

void AD7606_StartConversion(void) {
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(AD7606_CONVST_Port, AD7606_CONVST_Pin, GPIO_PIN_SET);
 8001090:	2201      	movs	r2, #1
 8001092:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001096:	4807      	ldr	r0, [pc, #28]	; (80010b4 <AD7606_StartConversion+0x28>)
 8001098:	f001 fd00 	bl	8002a9c <HAL_GPIO_WritePin>
    HAL_Delay(1);
 800109c:	2001      	movs	r0, #1
 800109e:	f001 f971 	bl	8002384 <HAL_Delay>
    HAL_GPIO_WritePin(AD7606_CONVST_Port, AD7606_CONVST_Pin, GPIO_PIN_RESET);
 80010a2:	2200      	movs	r2, #0
 80010a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010a8:	4802      	ldr	r0, [pc, #8]	; (80010b4 <AD7606_StartConversion+0x28>)
 80010aa:	f001 fcf7 	bl	8002a9c <HAL_GPIO_WritePin>
    return;
 80010ae:	bf00      	nop
}
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40021400 	.word	0x40021400

080010b8 <AD7606_ReadData>:
        }
    }
    return true;
}

bool AD7606_ReadData(uint16_t *data, uint8_t num_channels) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	460b      	mov	r3, r1
 80010c2:	70fb      	strb	r3, [r7, #3]
    if (num_channels > 4) { //
 80010c4:	78fb      	ldrb	r3, [r7, #3]
 80010c6:	2b04      	cmp	r3, #4
 80010c8:	d901      	bls.n	80010ce <AD7606_ReadData+0x16>
        return false;
 80010ca:	2300      	movs	r3, #0
 80010cc:	e032      	b.n	8001134 <AD7606_ReadData+0x7c>
    }

    HAL_GPIO_WritePin(AD7606_CS_Port, AD7606_CS_Pin, GPIO_PIN_RESET);
 80010ce:	2200      	movs	r2, #0
 80010d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010d4:	4819      	ldr	r0, [pc, #100]	; (800113c <AD7606_ReadData+0x84>)
 80010d6:	f001 fce1 	bl	8002a9c <HAL_GPIO_WritePin>

    uint16_t tmp_data = 0;
 80010da:	2300      	movs	r3, #0
 80010dc:	81bb      	strh	r3, [r7, #12]

    for (uint8_t i = 0; i < num_channels; i++) {
 80010de:	2300      	movs	r3, #0
 80010e0:	73fb      	strb	r3, [r7, #15]
 80010e2:	e01c      	b.n	800111e <AD7606_ReadData+0x66>
        if (HAL_SPI_Receive(ad7606_hspi, (uint8_t *)&tmp_data, 1, HAL_MAX_DELAY) != HAL_OK) {
 80010e4:	4b16      	ldr	r3, [pc, #88]	; (8001140 <AD7606_ReadData+0x88>)
 80010e6:	6818      	ldr	r0, [r3, #0]
 80010e8:	f107 010c 	add.w	r1, r7, #12
 80010ec:	f04f 33ff 	mov.w	r3, #4294967295
 80010f0:	2201      	movs	r2, #1
 80010f2:	f002 fb2a 	bl	800374a <HAL_SPI_Receive>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d007      	beq.n	800110c <AD7606_ReadData+0x54>
            HAL_GPIO_WritePin(AD7606_CS_Port, AD7606_CS_Pin, GPIO_PIN_SET);
 80010fc:	2201      	movs	r2, #1
 80010fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001102:	480e      	ldr	r0, [pc, #56]	; (800113c <AD7606_ReadData+0x84>)
 8001104:	f001 fcca 	bl	8002a9c <HAL_GPIO_WritePin>
            return false;
 8001108:	2300      	movs	r3, #0
 800110a:	e013      	b.n	8001134 <AD7606_ReadData+0x7c>
        }
        data[i] = tmp_data;
 800110c:	7bfb      	ldrb	r3, [r7, #15]
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	687a      	ldr	r2, [r7, #4]
 8001112:	4413      	add	r3, r2
 8001114:	89ba      	ldrh	r2, [r7, #12]
 8001116:	801a      	strh	r2, [r3, #0]
    for (uint8_t i = 0; i < num_channels; i++) {
 8001118:	7bfb      	ldrb	r3, [r7, #15]
 800111a:	3301      	adds	r3, #1
 800111c:	73fb      	strb	r3, [r7, #15]
 800111e:	7bfa      	ldrb	r2, [r7, #15]
 8001120:	78fb      	ldrb	r3, [r7, #3]
 8001122:	429a      	cmp	r2, r3
 8001124:	d3de      	bcc.n	80010e4 <AD7606_ReadData+0x2c>
    }

    HAL_GPIO_WritePin(AD7606_CS_Port, AD7606_CS_Pin, GPIO_PIN_SET);
 8001126:	2201      	movs	r2, #1
 8001128:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800112c:	4803      	ldr	r0, [pc, #12]	; (800113c <AD7606_ReadData+0x84>)
 800112e:	f001 fcb5 	bl	8002a9c <HAL_GPIO_WritePin>
    return true;
 8001132:	2301      	movs	r3, #1
}
 8001134:	4618      	mov	r0, r3
 8001136:	3710      	adds	r7, #16
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	40020c00 	.word	0x40020c00
 8001140:	200001f0 	.word	0x200001f0

08001144 <Delay_ns>:
 *  Created on: Dec 16, 2024
 *      Author: User
 */
#include "attenuators.h"

void Delay_ns(uint32_t ns) {
 8001144:	b480      	push	{r7}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
    uint32_t cycles = (ns + 62) / 62;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	333e      	adds	r3, #62	; 0x3e
 8001150:	085b      	lsrs	r3, r3, #1
 8001152:	4a09      	ldr	r2, [pc, #36]	; (8001178 <Delay_ns+0x34>)
 8001154:	fba2 2303 	umull	r2, r3, r2, r3
 8001158:	091b      	lsrs	r3, r3, #4
 800115a:	60fb      	str	r3, [r7, #12]
    while (cycles--) {
 800115c:	e000      	b.n	8001160 <Delay_ns+0x1c>
        __NOP();
 800115e:	bf00      	nop
    while (cycles--) {
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	1e5a      	subs	r2, r3, #1
 8001164:	60fa      	str	r2, [r7, #12]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d1f9      	bne.n	800115e <Delay_ns+0x1a>
    }
}
 800116a:	bf00      	nop
 800116c:	bf00      	nop
 800116e:	3714      	adds	r7, #20
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	84210843 	.word	0x84210843

0800117c <SPI_Init_Att>:

void SPI_Init_Att() {
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
    LE1_HIGH();
 8001180:	2201      	movs	r2, #1
 8001182:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001186:	481f      	ldr	r0, [pc, #124]	; (8001204 <SPI_Init_Att+0x88>)
 8001188:	f001 fc88 	bl	8002a9c <HAL_GPIO_WritePin>
    LE2_HIGH();
 800118c:	2201      	movs	r2, #1
 800118e:	2102      	movs	r1, #2
 8001190:	481c      	ldr	r0, [pc, #112]	; (8001204 <SPI_Init_Att+0x88>)
 8001192:	f001 fc83 	bl	8002a9c <HAL_GPIO_WritePin>
    LE3_HIGH();
 8001196:	2201      	movs	r2, #1
 8001198:	2140      	movs	r1, #64	; 0x40
 800119a:	481b      	ldr	r0, [pc, #108]	; (8001208 <SPI_Init_Att+0x8c>)
 800119c:	f001 fc7e 	bl	8002a9c <HAL_GPIO_WritePin>
    LE4_HIGH();
 80011a0:	2201      	movs	r2, #1
 80011a2:	2108      	movs	r1, #8
 80011a4:	4817      	ldr	r0, [pc, #92]	; (8001204 <SPI_Init_Att+0x88>)
 80011a6:	f001 fc79 	bl	8002a9c <HAL_GPIO_WritePin>

    SIN1_LOW();
 80011aa:	2200      	movs	r2, #0
 80011ac:	2180      	movs	r1, #128	; 0x80
 80011ae:	4816      	ldr	r0, [pc, #88]	; (8001208 <SPI_Init_Att+0x8c>)
 80011b0:	f001 fc74 	bl	8002a9c <HAL_GPIO_WritePin>
    SIN2_LOW();
 80011b4:	2200      	movs	r2, #0
 80011b6:	2104      	movs	r1, #4
 80011b8:	4813      	ldr	r0, [pc, #76]	; (8001208 <SPI_Init_Att+0x8c>)
 80011ba:	f001 fc6f 	bl	8002a9c <HAL_GPIO_WritePin>
    SIN3_LOW();
 80011be:	2200      	movs	r2, #0
 80011c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011c4:	480f      	ldr	r0, [pc, #60]	; (8001204 <SPI_Init_Att+0x88>)
 80011c6:	f001 fc69 	bl	8002a9c <HAL_GPIO_WritePin>
    SIN4_LOW();
 80011ca:	2200      	movs	r2, #0
 80011cc:	2110      	movs	r1, #16
 80011ce:	480f      	ldr	r0, [pc, #60]	; (800120c <SPI_Init_Att+0x90>)
 80011d0:	f001 fc64 	bl	8002a9c <HAL_GPIO_WritePin>

    CLK1_LOW();
 80011d4:	2200      	movs	r2, #0
 80011d6:	2120      	movs	r1, #32
 80011d8:	480a      	ldr	r0, [pc, #40]	; (8001204 <SPI_Init_Att+0x88>)
 80011da:	f001 fc5f 	bl	8002a9c <HAL_GPIO_WritePin>
    CLK2_LOW();
 80011de:	2200      	movs	r2, #0
 80011e0:	2110      	movs	r1, #16
 80011e2:	480b      	ldr	r0, [pc, #44]	; (8001210 <SPI_Init_Att+0x94>)
 80011e4:	f001 fc5a 	bl	8002a9c <HAL_GPIO_WritePin>
    CLK3_LOW();
 80011e8:	2200      	movs	r2, #0
 80011ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011ee:	4805      	ldr	r0, [pc, #20]	; (8001204 <SPI_Init_Att+0x88>)
 80011f0:	f001 fc54 	bl	8002a9c <HAL_GPIO_WritePin>
    CLK4_LOW();
 80011f4:	2200      	movs	r2, #0
 80011f6:	2110      	movs	r1, #16
 80011f8:	4802      	ldr	r0, [pc, #8]	; (8001204 <SPI_Init_Att+0x88>)
 80011fa:	f001 fc4f 	bl	8002a9c <HAL_GPIO_WritePin>

}
 80011fe:	bf00      	nop
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40020400 	.word	0x40020400
 8001208:	40020800 	.word	0x40020800
 800120c:	40020000 	.word	0x40020000
 8001210:	40021400 	.word	0x40021400

08001214 <SPI_Write_Att>:

void SPI_Write_Att(uint8_t data, uint8_t stage) {
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	460a      	mov	r2, r1
 800121e:	71fb      	strb	r3, [r7, #7]
 8001220:	4613      	mov	r3, r2
 8001222:	71bb      	strb	r3, [r7, #6]
    if (stage != 1 && stage != 2) return;
 8001224:	79bb      	ldrb	r3, [r7, #6]
 8001226:	2b01      	cmp	r3, #1
 8001228:	d003      	beq.n	8001232 <SPI_Write_Att+0x1e>
 800122a:	79bb      	ldrb	r3, [r7, #6]
 800122c:	2b02      	cmp	r3, #2
 800122e:	f040 80ca 	bne.w	80013c6 <SPI_Write_Att+0x1b2>

    if (stage == 1) {
 8001232:	79bb      	ldrb	r3, [r7, #6]
 8001234:	2b01      	cmp	r3, #1
 8001236:	d164      	bne.n	8001302 <SPI_Write_Att+0xee>
        LE1_LOW();
 8001238:	2200      	movs	r2, #0
 800123a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800123e:	4864      	ldr	r0, [pc, #400]	; (80013d0 <SPI_Write_Att+0x1bc>)
 8001240:	f001 fc2c 	bl	8002a9c <HAL_GPIO_WritePin>
        LE3_LOW();
 8001244:	2200      	movs	r2, #0
 8001246:	2140      	movs	r1, #64	; 0x40
 8001248:	4862      	ldr	r0, [pc, #392]	; (80013d4 <SPI_Write_Att+0x1c0>)
 800124a:	f001 fc27 	bl	8002a9c <HAL_GPIO_WritePin>
        Delay_ns(62);
 800124e:	203e      	movs	r0, #62	; 0x3e
 8001250:	f7ff ff78 	bl	8001144 <Delay_ns>
        for (int i = 5; i >= 0; i--) {
 8001254:	2305      	movs	r3, #5
 8001256:	60fb      	str	r3, [r7, #12]
 8001258:	e03d      	b.n	80012d6 <SPI_Write_Att+0xc2>
            if (data & (1 << i)) {
 800125a:	79fa      	ldrb	r2, [r7, #7]
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	fa42 f303 	asr.w	r3, r2, r3
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	2b00      	cmp	r3, #0
 8001268:	d00b      	beq.n	8001282 <SPI_Write_Att+0x6e>
                SIN1_HIGH();
 800126a:	2201      	movs	r2, #1
 800126c:	2180      	movs	r1, #128	; 0x80
 800126e:	4859      	ldr	r0, [pc, #356]	; (80013d4 <SPI_Write_Att+0x1c0>)
 8001270:	f001 fc14 	bl	8002a9c <HAL_GPIO_WritePin>
                SIN3_HIGH();
 8001274:	2201      	movs	r2, #1
 8001276:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800127a:	4855      	ldr	r0, [pc, #340]	; (80013d0 <SPI_Write_Att+0x1bc>)
 800127c:	f001 fc0e 	bl	8002a9c <HAL_GPIO_WritePin>
 8001280:	e00a      	b.n	8001298 <SPI_Write_Att+0x84>
            } else {
                SIN1_LOW();
 8001282:	2200      	movs	r2, #0
 8001284:	2180      	movs	r1, #128	; 0x80
 8001286:	4853      	ldr	r0, [pc, #332]	; (80013d4 <SPI_Write_Att+0x1c0>)
 8001288:	f001 fc08 	bl	8002a9c <HAL_GPIO_WritePin>
                SIN3_LOW();
 800128c:	2200      	movs	r2, #0
 800128e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001292:	484f      	ldr	r0, [pc, #316]	; (80013d0 <SPI_Write_Att+0x1bc>)
 8001294:	f001 fc02 	bl	8002a9c <HAL_GPIO_WritePin>
            }
            CLK1_HIGH();
 8001298:	2201      	movs	r2, #1
 800129a:	2120      	movs	r1, #32
 800129c:	484c      	ldr	r0, [pc, #304]	; (80013d0 <SPI_Write_Att+0x1bc>)
 800129e:	f001 fbfd 	bl	8002a9c <HAL_GPIO_WritePin>
            CLK3_HIGH();
 80012a2:	2201      	movs	r2, #1
 80012a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012a8:	4849      	ldr	r0, [pc, #292]	; (80013d0 <SPI_Write_Att+0x1bc>)
 80012aa:	f001 fbf7 	bl	8002a9c <HAL_GPIO_WritePin>
            Delay_ns(62);
 80012ae:	203e      	movs	r0, #62	; 0x3e
 80012b0:	f7ff ff48 	bl	8001144 <Delay_ns>
            CLK1_LOW();
 80012b4:	2200      	movs	r2, #0
 80012b6:	2120      	movs	r1, #32
 80012b8:	4845      	ldr	r0, [pc, #276]	; (80013d0 <SPI_Write_Att+0x1bc>)
 80012ba:	f001 fbef 	bl	8002a9c <HAL_GPIO_WritePin>
            CLK3_LOW();
 80012be:	2200      	movs	r2, #0
 80012c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012c4:	4842      	ldr	r0, [pc, #264]	; (80013d0 <SPI_Write_Att+0x1bc>)
 80012c6:	f001 fbe9 	bl	8002a9c <HAL_GPIO_WritePin>
            Delay_ns(62);
 80012ca:	203e      	movs	r0, #62	; 0x3e
 80012cc:	f7ff ff3a 	bl	8001144 <Delay_ns>
        for (int i = 5; i >= 0; i--) {
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	3b01      	subs	r3, #1
 80012d4:	60fb      	str	r3, [r7, #12]
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	dabe      	bge.n	800125a <SPI_Write_Att+0x46>
        }
        LE1_HIGH();
 80012dc:	2201      	movs	r2, #1
 80012de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012e2:	483b      	ldr	r0, [pc, #236]	; (80013d0 <SPI_Write_Att+0x1bc>)
 80012e4:	f001 fbda 	bl	8002a9c <HAL_GPIO_WritePin>
        LE3_HIGH();
 80012e8:	2201      	movs	r2, #1
 80012ea:	2140      	movs	r1, #64	; 0x40
 80012ec:	4839      	ldr	r0, [pc, #228]	; (80013d4 <SPI_Write_Att+0x1c0>)
 80012ee:	f001 fbd5 	bl	8002a9c <HAL_GPIO_WritePin>
        Delay_ns(62);
 80012f2:	203e      	movs	r0, #62	; 0x3e
 80012f4:	f7ff ff26 	bl	8001144 <Delay_ns>
        Delay_ns(630);
 80012f8:	f240 2076 	movw	r0, #630	; 0x276
 80012fc:	f7ff ff22 	bl	8001144 <Delay_ns>
 8001300:	e062      	b.n	80013c8 <SPI_Write_Att+0x1b4>
    } else if (stage == 2) {
 8001302:	79bb      	ldrb	r3, [r7, #6]
 8001304:	2b02      	cmp	r3, #2
 8001306:	d15f      	bne.n	80013c8 <SPI_Write_Att+0x1b4>
        LE2_LOW();
 8001308:	2200      	movs	r2, #0
 800130a:	2102      	movs	r1, #2
 800130c:	4830      	ldr	r0, [pc, #192]	; (80013d0 <SPI_Write_Att+0x1bc>)
 800130e:	f001 fbc5 	bl	8002a9c <HAL_GPIO_WritePin>
        LE4_LOW();
 8001312:	2200      	movs	r2, #0
 8001314:	2108      	movs	r1, #8
 8001316:	482e      	ldr	r0, [pc, #184]	; (80013d0 <SPI_Write_Att+0x1bc>)
 8001318:	f001 fbc0 	bl	8002a9c <HAL_GPIO_WritePin>
        Delay_ns(62);
 800131c:	203e      	movs	r0, #62	; 0x3e
 800131e:	f7ff ff11 	bl	8001144 <Delay_ns>
        for (int i = 5; i >= 0; i--) {
 8001322:	2305      	movs	r3, #5
 8001324:	60bb      	str	r3, [r7, #8]
 8001326:	e039      	b.n	800139c <SPI_Write_Att+0x188>
            if (data & (1 << i)) {
 8001328:	79fa      	ldrb	r2, [r7, #7]
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	fa42 f303 	asr.w	r3, r2, r3
 8001330:	f003 0301 	and.w	r3, r3, #1
 8001334:	2b00      	cmp	r3, #0
 8001336:	d00a      	beq.n	800134e <SPI_Write_Att+0x13a>
                SIN2_HIGH();
 8001338:	2201      	movs	r2, #1
 800133a:	2104      	movs	r1, #4
 800133c:	4825      	ldr	r0, [pc, #148]	; (80013d4 <SPI_Write_Att+0x1c0>)
 800133e:	f001 fbad 	bl	8002a9c <HAL_GPIO_WritePin>
                SIN4_HIGH();
 8001342:	2201      	movs	r2, #1
 8001344:	2110      	movs	r1, #16
 8001346:	4824      	ldr	r0, [pc, #144]	; (80013d8 <SPI_Write_Att+0x1c4>)
 8001348:	f001 fba8 	bl	8002a9c <HAL_GPIO_WritePin>
 800134c:	e009      	b.n	8001362 <SPI_Write_Att+0x14e>
            } else {
                SIN2_LOW();
 800134e:	2200      	movs	r2, #0
 8001350:	2104      	movs	r1, #4
 8001352:	4820      	ldr	r0, [pc, #128]	; (80013d4 <SPI_Write_Att+0x1c0>)
 8001354:	f001 fba2 	bl	8002a9c <HAL_GPIO_WritePin>
                SIN4_LOW();
 8001358:	2200      	movs	r2, #0
 800135a:	2110      	movs	r1, #16
 800135c:	481e      	ldr	r0, [pc, #120]	; (80013d8 <SPI_Write_Att+0x1c4>)
 800135e:	f001 fb9d 	bl	8002a9c <HAL_GPIO_WritePin>
            }
            CLK2_HIGH();
 8001362:	2201      	movs	r2, #1
 8001364:	2110      	movs	r1, #16
 8001366:	481d      	ldr	r0, [pc, #116]	; (80013dc <SPI_Write_Att+0x1c8>)
 8001368:	f001 fb98 	bl	8002a9c <HAL_GPIO_WritePin>
            CLK4_HIGH();
 800136c:	2201      	movs	r2, #1
 800136e:	2110      	movs	r1, #16
 8001370:	4817      	ldr	r0, [pc, #92]	; (80013d0 <SPI_Write_Att+0x1bc>)
 8001372:	f001 fb93 	bl	8002a9c <HAL_GPIO_WritePin>
            Delay_ns(62);
 8001376:	203e      	movs	r0, #62	; 0x3e
 8001378:	f7ff fee4 	bl	8001144 <Delay_ns>
            CLK2_LOW();
 800137c:	2200      	movs	r2, #0
 800137e:	2110      	movs	r1, #16
 8001380:	4816      	ldr	r0, [pc, #88]	; (80013dc <SPI_Write_Att+0x1c8>)
 8001382:	f001 fb8b 	bl	8002a9c <HAL_GPIO_WritePin>
            CLK4_LOW();
 8001386:	2200      	movs	r2, #0
 8001388:	2110      	movs	r1, #16
 800138a:	4811      	ldr	r0, [pc, #68]	; (80013d0 <SPI_Write_Att+0x1bc>)
 800138c:	f001 fb86 	bl	8002a9c <HAL_GPIO_WritePin>
            Delay_ns(62);
 8001390:	203e      	movs	r0, #62	; 0x3e
 8001392:	f7ff fed7 	bl	8001144 <Delay_ns>
        for (int i = 5; i >= 0; i--) {
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	3b01      	subs	r3, #1
 800139a:	60bb      	str	r3, [r7, #8]
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	dac2      	bge.n	8001328 <SPI_Write_Att+0x114>
        }
        LE2_HIGH();
 80013a2:	2201      	movs	r2, #1
 80013a4:	2102      	movs	r1, #2
 80013a6:	480a      	ldr	r0, [pc, #40]	; (80013d0 <SPI_Write_Att+0x1bc>)
 80013a8:	f001 fb78 	bl	8002a9c <HAL_GPIO_WritePin>
        LE4_HIGH();
 80013ac:	2201      	movs	r2, #1
 80013ae:	2108      	movs	r1, #8
 80013b0:	4807      	ldr	r0, [pc, #28]	; (80013d0 <SPI_Write_Att+0x1bc>)
 80013b2:	f001 fb73 	bl	8002a9c <HAL_GPIO_WritePin>
        Delay_ns(62);
 80013b6:	203e      	movs	r0, #62	; 0x3e
 80013b8:	f7ff fec4 	bl	8001144 <Delay_ns>
        Delay_ns(630);
 80013bc:	f240 2076 	movw	r0, #630	; 0x276
 80013c0:	f7ff fec0 	bl	8001144 <Delay_ns>
 80013c4:	e000      	b.n	80013c8 <SPI_Write_Att+0x1b4>
    if (stage != 1 && stage != 2) return;
 80013c6:	bf00      	nop
    }
}
 80013c8:	3710      	adds	r7, #16
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40020400 	.word	0x40020400
 80013d4:	40020800 	.word	0x40020800
 80013d8:	40020000 	.word	0x40020000
 80013dc:	40021400 	.word	0x40021400

080013e0 <SetAttenuation>:

void SetAttenuation(float attenuation, uint8_t stage) {
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b086      	sub	sp, #24
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	ed87 0a03 	vstr	s0, [r7, #12]
 80013ea:	4603      	mov	r3, r0
 80013ec:	72fb      	strb	r3, [r7, #11]
    if (attenuation < 0.f || attenuation > 31.5f) {
 80013ee:	edd7 7a03 	vldr	s15, [r7, #12]
 80013f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013fa:	d422      	bmi.n	8001442 <SetAttenuation+0x62>
 80013fc:	edd7 7a03 	vldr	s15, [r7, #12]
 8001400:	ed9f 7a12 	vldr	s14, [pc, #72]	; 800144c <SetAttenuation+0x6c>
 8001404:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800140c:	dc19      	bgt.n	8001442 <SetAttenuation+0x62>
        return;
    }
    uint8_t data = (uint8_t)((attenuation / 0.5f) + 0.5f);
 800140e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001412:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8001416:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800141a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800141e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001422:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001426:	edc7 7a01 	vstr	s15, [r7, #4]
 800142a:	793b      	ldrb	r3, [r7, #4]
 800142c:	75fb      	strb	r3, [r7, #23]
    data = ~data;
 800142e:	7dfb      	ldrb	r3, [r7, #23]
 8001430:	43db      	mvns	r3, r3
 8001432:	75fb      	strb	r3, [r7, #23]
    SPI_Write_Att(data, stage);
 8001434:	7afa      	ldrb	r2, [r7, #11]
 8001436:	7dfb      	ldrb	r3, [r7, #23]
 8001438:	4611      	mov	r1, r2
 800143a:	4618      	mov	r0, r3
 800143c:	f7ff feea 	bl	8001214 <SPI_Write_Att>
 8001440:	e000      	b.n	8001444 <SetAttenuation+0x64>
        return;
 8001442:	bf00      	nop
}
 8001444:	3718      	adds	r7, #24
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	41fc0000 	.word	0x41fc0000

08001450 <MX_GPIO_Init>:
     PC5   ------> ETH_RXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b08c      	sub	sp, #48	; 0x30
 8001454:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001456:	f107 031c 	add.w	r3, r7, #28
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	605a      	str	r2, [r3, #4]
 8001460:	609a      	str	r2, [r3, #8]
 8001462:	60da      	str	r2, [r3, #12]
 8001464:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	61bb      	str	r3, [r7, #24]
 800146a:	4ba8      	ldr	r3, [pc, #672]	; (800170c <MX_GPIO_Init+0x2bc>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	4aa7      	ldr	r2, [pc, #668]	; (800170c <MX_GPIO_Init+0x2bc>)
 8001470:	f043 0304 	orr.w	r3, r3, #4
 8001474:	6313      	str	r3, [r2, #48]	; 0x30
 8001476:	4ba5      	ldr	r3, [pc, #660]	; (800170c <MX_GPIO_Init+0x2bc>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	f003 0304 	and.w	r3, r3, #4
 800147e:	61bb      	str	r3, [r7, #24]
 8001480:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	617b      	str	r3, [r7, #20]
 8001486:	4ba1      	ldr	r3, [pc, #644]	; (800170c <MX_GPIO_Init+0x2bc>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	4aa0      	ldr	r2, [pc, #640]	; (800170c <MX_GPIO_Init+0x2bc>)
 800148c:	f043 0320 	orr.w	r3, r3, #32
 8001490:	6313      	str	r3, [r2, #48]	; 0x30
 8001492:	4b9e      	ldr	r3, [pc, #632]	; (800170c <MX_GPIO_Init+0x2bc>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	f003 0320 	and.w	r3, r3, #32
 800149a:	617b      	str	r3, [r7, #20]
 800149c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	613b      	str	r3, [r7, #16]
 80014a2:	4b9a      	ldr	r3, [pc, #616]	; (800170c <MX_GPIO_Init+0x2bc>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	4a99      	ldr	r2, [pc, #612]	; (800170c <MX_GPIO_Init+0x2bc>)
 80014a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014ac:	6313      	str	r3, [r2, #48]	; 0x30
 80014ae:	4b97      	ldr	r3, [pc, #604]	; (800170c <MX_GPIO_Init+0x2bc>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014b6:	613b      	str	r3, [r7, #16]
 80014b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	60fb      	str	r3, [r7, #12]
 80014be:	4b93      	ldr	r3, [pc, #588]	; (800170c <MX_GPIO_Init+0x2bc>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	4a92      	ldr	r2, [pc, #584]	; (800170c <MX_GPIO_Init+0x2bc>)
 80014c4:	f043 0301 	orr.w	r3, r3, #1
 80014c8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ca:	4b90      	ldr	r3, [pc, #576]	; (800170c <MX_GPIO_Init+0x2bc>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	60bb      	str	r3, [r7, #8]
 80014da:	4b8c      	ldr	r3, [pc, #560]	; (800170c <MX_GPIO_Init+0x2bc>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	4a8b      	ldr	r2, [pc, #556]	; (800170c <MX_GPIO_Init+0x2bc>)
 80014e0:	f043 0302 	orr.w	r3, r3, #2
 80014e4:	6313      	str	r3, [r2, #48]	; 0x30
 80014e6:	4b89      	ldr	r3, [pc, #548]	; (800170c <MX_GPIO_Init+0x2bc>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	f003 0302 	and.w	r3, r3, #2
 80014ee:	60bb      	str	r3, [r7, #8]
 80014f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	607b      	str	r3, [r7, #4]
 80014f6:	4b85      	ldr	r3, [pc, #532]	; (800170c <MX_GPIO_Init+0x2bc>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fa:	4a84      	ldr	r2, [pc, #528]	; (800170c <MX_GPIO_Init+0x2bc>)
 80014fc:	f043 0308 	orr.w	r3, r3, #8
 8001500:	6313      	str	r3, [r2, #48]	; 0x30
 8001502:	4b82      	ldr	r3, [pc, #520]	; (800170c <MX_GPIO_Init+0x2bc>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	f003 0308 	and.w	r3, r3, #8
 800150a:	607b      	str	r3, [r7, #4]
 800150c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	603b      	str	r3, [r7, #0]
 8001512:	4b7e      	ldr	r3, [pc, #504]	; (800170c <MX_GPIO_Init+0x2bc>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001516:	4a7d      	ldr	r2, [pc, #500]	; (800170c <MX_GPIO_Init+0x2bc>)
 8001518:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800151c:	6313      	str	r3, [r2, #48]	; 0x30
 800151e:	4b7b      	ldr	r3, [pc, #492]	; (800170c <MX_GPIO_Init+0x2bc>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001526:	603b      	str	r3, [r7, #0]
 8001528:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, CLK2_Pin|RESET_Pin|CONV_Pin, GPIO_PIN_RESET);
 800152a:	2200      	movs	r2, #0
 800152c:	f243 0110 	movw	r1, #12304	; 0x3010
 8001530:	4877      	ldr	r0, [pc, #476]	; (8001710 <MX_GPIO_Init+0x2c0>)
 8001532:	f001 fab3 	bl	8002a9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SIN2_Pin|LE3_Pin|SIN1_Pin, GPIO_PIN_RESET);
 8001536:	2200      	movs	r2, #0
 8001538:	21c4      	movs	r1, #196	; 0xc4
 800153a:	4876      	ldr	r0, [pc, #472]	; (8001714 <MX_GPIO_Init+0x2c4>)
 800153c:	f001 faae 	bl	8002a9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SIN4_GPIO_Port, SIN4_Pin, GPIO_PIN_RESET);
 8001540:	2200      	movs	r2, #0
 8001542:	2110      	movs	r1, #16
 8001544:	4874      	ldr	r0, [pc, #464]	; (8001718 <MX_GPIO_Init+0x2c8>)
 8001546:	f001 faa9 	bl	8002a9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LE2_Pin|LE1_Pin|CLK3_Pin
 800154a:	2200      	movs	r2, #0
 800154c:	f24f 01bb 	movw	r1, #61627	; 0xf0bb
 8001550:	4872      	ldr	r0, [pc, #456]	; (800171c <MX_GPIO_Init+0x2cc>)
 8001552:	f001 faa3 	bl	8002a9c <HAL_GPIO_WritePin>
                          |LD3_Pin|SIN3_Pin|LE4_Pin|CLK4_Pin
                          |CLK1_Pin|LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8001556:	2201      	movs	r2, #1
 8001558:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800155c:	4870      	ldr	r0, [pc, #448]	; (8001720 <MX_GPIO_Init+0x2d0>)
 800155e:	f001 fa9d 	bl	8002a9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001562:	2200      	movs	r2, #0
 8001564:	2140      	movs	r1, #64	; 0x40
 8001566:	486f      	ldr	r0, [pc, #444]	; (8001724 <MX_GPIO_Init+0x2d4>)
 8001568:	f001 fa98 	bl	8002a9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800156c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001570:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001572:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001576:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001578:	2300      	movs	r3, #0
 800157a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800157c:	f107 031c 	add.w	r3, r7, #28
 8001580:	4619      	mov	r1, r3
 8001582:	4864      	ldr	r0, [pc, #400]	; (8001714 <MX_GPIO_Init+0x2c4>)
 8001584:	f001 f8c6 	bl	8002714 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = CLK2_Pin|CONV_Pin;
 8001588:	f242 0310 	movw	r3, #8208	; 0x2010
 800158c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800158e:	2301      	movs	r3, #1
 8001590:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001592:	2300      	movs	r3, #0
 8001594:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001596:	2300      	movs	r3, #0
 8001598:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800159a:	f107 031c 	add.w	r3, r7, #28
 800159e:	4619      	mov	r1, r3
 80015a0:	485b      	ldr	r0, [pc, #364]	; (8001710 <MX_GPIO_Init+0x2c0>)
 80015a2:	f001 f8b7 	bl	8002714 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80015a6:	2332      	movs	r3, #50	; 0x32
 80015a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015aa:	2302      	movs	r3, #2
 80015ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ae:	2300      	movs	r3, #0
 80015b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b2:	2303      	movs	r3, #3
 80015b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015b6:	230b      	movs	r3, #11
 80015b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015ba:	f107 031c 	add.w	r3, r7, #28
 80015be:	4619      	mov	r1, r3
 80015c0:	4854      	ldr	r0, [pc, #336]	; (8001714 <MX_GPIO_Init+0x2c4>)
 80015c2:	f001 f8a7 	bl	8002714 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = SIN2_Pin|LE3_Pin|SIN1_Pin;
 80015c6:	23c4      	movs	r3, #196	; 0xc4
 80015c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ca:	2301      	movs	r3, #1
 80015cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d2:	2300      	movs	r3, #0
 80015d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015d6:	f107 031c 	add.w	r3, r7, #28
 80015da:	4619      	mov	r1, r3
 80015dc:	484d      	ldr	r0, [pc, #308]	; (8001714 <MX_GPIO_Init+0x2c4>)
 80015de:	f001 f899 	bl	8002714 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin;
 80015e2:	2306      	movs	r3, #6
 80015e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e6:	2302      	movs	r3, #2
 80015e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ee:	2303      	movs	r3, #3
 80015f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015f2:	230b      	movs	r3, #11
 80015f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f6:	f107 031c 	add.w	r3, r7, #28
 80015fa:	4619      	mov	r1, r3
 80015fc:	4846      	ldr	r0, [pc, #280]	; (8001718 <MX_GPIO_Init+0x2c8>)
 80015fe:	f001 f889 	bl	8002714 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SIN4_Pin;
 8001602:	2310      	movs	r3, #16
 8001604:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001606:	2301      	movs	r3, #1
 8001608:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160a:	2300      	movs	r3, #0
 800160c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160e:	2300      	movs	r3, #0
 8001610:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SIN4_GPIO_Port, &GPIO_InitStruct);
 8001612:	f107 031c 	add.w	r3, r7, #28
 8001616:	4619      	mov	r1, r3
 8001618:	483f      	ldr	r0, [pc, #252]	; (8001718 <MX_GPIO_Init+0x2c8>)
 800161a:	f001 f87b 	bl	8002714 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LE2_Pin|LE1_Pin|CLK3_Pin
 800161e:	f24f 03bb 	movw	r3, #61627	; 0xf0bb
 8001622:	61fb      	str	r3, [r7, #28]
                          |LD3_Pin|SIN3_Pin|LE4_Pin|CLK4_Pin
                          |CLK1_Pin|LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001624:	2301      	movs	r3, #1
 8001626:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001628:	2300      	movs	r3, #0
 800162a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162c:	2300      	movs	r3, #0
 800162e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001630:	f107 031c 	add.w	r3, r7, #28
 8001634:	4619      	mov	r1, r3
 8001636:	4839      	ldr	r0, [pc, #228]	; (800171c <MX_GPIO_Init+0x2cc>)
 8001638:	f001 f86c 	bl	8002714 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RESET_Pin;
 800163c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001640:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001642:	2301      	movs	r3, #1
 8001644:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001646:	2300      	movs	r3, #0
 8001648:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800164a:	2303      	movs	r3, #3
 800164c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(RESET_GPIO_Port, &GPIO_InitStruct);
 800164e:	f107 031c 	add.w	r3, r7, #28
 8001652:	4619      	mov	r1, r3
 8001654:	482e      	ldr	r0, [pc, #184]	; (8001710 <MX_GPIO_Init+0x2c0>)
 8001656:	f001 f85d 	bl	8002714 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FDATA_Pin;
 800165a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800165e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001660:	2300      	movs	r3, #0
 8001662:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001664:	2300      	movs	r3, #0
 8001666:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(FDATA_GPIO_Port, &GPIO_InitStruct);
 8001668:	f107 031c 	add.w	r3, r7, #28
 800166c:	4619      	mov	r1, r3
 800166e:	4828      	ldr	r0, [pc, #160]	; (8001710 <MX_GPIO_Init+0x2c0>)
 8001670:	f001 f850 	bl	8002714 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUSY_Pin;
 8001674:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001678:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800167a:	2300      	movs	r3, #0
 800167c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167e:	2300      	movs	r3, #0
 8001680:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUSY_GPIO_Port, &GPIO_InitStruct);
 8001682:	f107 031c 	add.w	r3, r7, #28
 8001686:	4619      	mov	r1, r3
 8001688:	4825      	ldr	r0, [pc, #148]	; (8001720 <MX_GPIO_Init+0x2d0>)
 800168a:	f001 f843 	bl	8002714 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_Pin;
 800168e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001692:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001694:	2301      	movs	r3, #1
 8001696:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001698:	2300      	movs	r3, #0
 800169a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800169c:	2303      	movs	r3, #3
 800169e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 80016a0:	f107 031c 	add.w	r3, r7, #28
 80016a4:	4619      	mov	r1, r3
 80016a6:	481e      	ldr	r0, [pc, #120]	; (8001720 <MX_GPIO_Init+0x2d0>)
 80016a8:	f001 f834 	bl	8002714 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80016ac:	2340      	movs	r3, #64	; 0x40
 80016ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016b0:	2301      	movs	r3, #1
 80016b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b4:	2300      	movs	r3, #0
 80016b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b8:	2300      	movs	r3, #0
 80016ba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80016bc:	f107 031c 	add.w	r3, r7, #28
 80016c0:	4619      	mov	r1, r3
 80016c2:	4818      	ldr	r0, [pc, #96]	; (8001724 <MX_GPIO_Init+0x2d4>)
 80016c4:	f001 f826 	bl	8002714 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80016c8:	2380      	movs	r3, #128	; 0x80
 80016ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016cc:	2300      	movs	r3, #0
 80016ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d0:	2300      	movs	r3, #0
 80016d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80016d4:	f107 031c 	add.w	r3, r7, #28
 80016d8:	4619      	mov	r1, r3
 80016da:	4812      	ldr	r0, [pc, #72]	; (8001724 <MX_GPIO_Init+0x2d4>)
 80016dc:	f001 f81a 	bl	8002714 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80016e0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80016e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e6:	2302      	movs	r3, #2
 80016e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ea:	2300      	movs	r3, #0
 80016ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ee:	2303      	movs	r3, #3
 80016f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80016f2:	230b      	movs	r3, #11
 80016f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016f6:	f107 031c 	add.w	r3, r7, #28
 80016fa:	4619      	mov	r1, r3
 80016fc:	4809      	ldr	r0, [pc, #36]	; (8001724 <MX_GPIO_Init+0x2d4>)
 80016fe:	f001 f809 	bl	8002714 <HAL_GPIO_Init>

}
 8001702:	bf00      	nop
 8001704:	3730      	adds	r7, #48	; 0x30
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	40023800 	.word	0x40023800
 8001710:	40021400 	.word	0x40021400
 8001714:	40020800 	.word	0x40020800
 8001718:	40020000 	.word	0x40020000
 800171c:	40020400 	.word	0x40020400
 8001720:	40020c00 	.word	0x40020c00
 8001724:	40021800 	.word	0x40021800

08001728 <average_results>:
uint16_t avg_data[NUM_CHANNELS];
uint8_t uart_received_char;

void SystemClock_Config(void);

void average_results() {
 8001728:	b5b0      	push	{r4, r5, r7, lr}
 800172a:	b08a      	sub	sp, #40	; 0x28
 800172c:	af00      	add	r7, sp, #0
    memset(sum_data, 0, sizeof(sum_data));
 800172e:	2210      	movs	r2, #16
 8001730:	2100      	movs	r1, #0
 8001732:	483f      	ldr	r0, [pc, #252]	; (8001830 <average_results+0x108>)
 8001734:	f004 fed3 	bl	80064de <memset>

    for (int measurement = 0; measurement < NUM_MEASUREMENTS; measurement++) {
 8001738:	2300      	movs	r3, #0
 800173a:	627b      	str	r3, [r7, #36]	; 0x24
 800173c:	e046      	b.n	80017cc <average_results+0xa4>
        AD7606_Reset();
 800173e:	f7ff fc8d 	bl	800105c <AD7606_Reset>
        AD7606_StartConversion();
 8001742:	f7ff fca3 	bl	800108c <AD7606_StartConversion>

        while (HAL_GPIO_ReadPin(BUSY_GPIO_Port, BUSY_Pin) == GPIO_PIN_SET) {}
 8001746:	bf00      	nop
 8001748:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800174c:	4839      	ldr	r0, [pc, #228]	; (8001834 <average_results+0x10c>)
 800174e:	f001 f98d 	bl	8002a6c <HAL_GPIO_ReadPin>
 8001752:	4603      	mov	r3, r0
 8001754:	2b01      	cmp	r3, #1
 8001756:	d0f7      	beq.n	8001748 <average_results+0x20>

        if (AD7606_ReadData(adc_data, NUM_CHANNELS)) {
 8001758:	2104      	movs	r1, #4
 800175a:	4837      	ldr	r0, [pc, #220]	; (8001838 <average_results+0x110>)
 800175c:	f7ff fcac 	bl	80010b8 <AD7606_ReadData>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d016      	beq.n	8001794 <average_results+0x6c>
            for (int i = 0; i < NUM_CHANNELS; i++) {
 8001766:	2300      	movs	r3, #0
 8001768:	623b      	str	r3, [r7, #32]
 800176a:	e00f      	b.n	800178c <average_results+0x64>
                sum_data[i] += adc_data[i];
 800176c:	4a30      	ldr	r2, [pc, #192]	; (8001830 <average_results+0x108>)
 800176e:	6a3b      	ldr	r3, [r7, #32]
 8001770:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001774:	4930      	ldr	r1, [pc, #192]	; (8001838 <average_results+0x110>)
 8001776:	6a3a      	ldr	r2, [r7, #32]
 8001778:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800177c:	441a      	add	r2, r3
 800177e:	492c      	ldr	r1, [pc, #176]	; (8001830 <average_results+0x108>)
 8001780:	6a3b      	ldr	r3, [r7, #32]
 8001782:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            for (int i = 0; i < NUM_CHANNELS; i++) {
 8001786:	6a3b      	ldr	r3, [r7, #32]
 8001788:	3301      	adds	r3, #1
 800178a:	623b      	str	r3, [r7, #32]
 800178c:	6a3b      	ldr	r3, [r7, #32]
 800178e:	2b03      	cmp	r3, #3
 8001790:	ddec      	ble.n	800176c <average_results+0x44>
 8001792:	e015      	b.n	80017c0 <average_results+0x98>
            }
        } else {
            uint8_t error_msg[] = "Data reading error\r\n";
 8001794:	4b29      	ldr	r3, [pc, #164]	; (800183c <average_results+0x114>)
 8001796:	1d3c      	adds	r4, r7, #4
 8001798:	461d      	mov	r5, r3
 800179a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800179c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800179e:	e895 0003 	ldmia.w	r5, {r0, r1}
 80017a2:	6020      	str	r0, [r4, #0]
 80017a4:	3404      	adds	r4, #4
 80017a6:	7021      	strb	r1, [r4, #0]
            HAL_UART_Transmit_IT(&huart3, error_msg, strlen((char*)error_msg));
 80017a8:	1d3b      	adds	r3, r7, #4
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7fe fd70 	bl	8000290 <strlen>
 80017b0:	4603      	mov	r3, r0
 80017b2:	b29a      	uxth	r2, r3
 80017b4:	1d3b      	adds	r3, r7, #4
 80017b6:	4619      	mov	r1, r3
 80017b8:	4821      	ldr	r0, [pc, #132]	; (8001840 <average_results+0x118>)
 80017ba:	f002 fbf6 	bl	8003faa <HAL_UART_Transmit_IT>
 80017be:	e033      	b.n	8001828 <average_results+0x100>
            return;
        }

        HAL_Delay(5);
 80017c0:	2005      	movs	r0, #5
 80017c2:	f000 fddf 	bl	8002384 <HAL_Delay>
    for (int measurement = 0; measurement < NUM_MEASUREMENTS; measurement++) {
 80017c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c8:	3301      	adds	r3, #1
 80017ca:	627b      	str	r3, [r7, #36]	; 0x24
 80017cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ce:	2b31      	cmp	r3, #49	; 0x31
 80017d0:	ddb5      	ble.n	800173e <average_results+0x16>
    }

    for (int i = 0; i < NUM_CHANNELS; i++) {
 80017d2:	2300      	movs	r3, #0
 80017d4:	61fb      	str	r3, [r7, #28]
 80017d6:	e024      	b.n	8001822 <average_results+0xfa>
        avg_data[i] = (uint16_t)round((float)sum_data[i] / NUM_MEASUREMENTS);
 80017d8:	4a15      	ldr	r2, [pc, #84]	; (8001830 <average_results+0x108>)
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017e0:	ee07 3a90 	vmov	s15, r3
 80017e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017e8:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001844 <average_results+0x11c>
 80017ec:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80017f0:	ee16 0a90 	vmov	r0, s13
 80017f4:	f7fe feb8 	bl	8000568 <__aeabi_f2d>
 80017f8:	4602      	mov	r2, r0
 80017fa:	460b      	mov	r3, r1
 80017fc:	ec43 2b10 	vmov	d0, r2, r3
 8001800:	f008 fa26 	bl	8009c50 <round>
 8001804:	ec53 2b10 	vmov	r2, r3, d0
 8001808:	4610      	mov	r0, r2
 800180a:	4619      	mov	r1, r3
 800180c:	f7ff f9dc 	bl	8000bc8 <__aeabi_d2uiz>
 8001810:	4603      	mov	r3, r0
 8001812:	b299      	uxth	r1, r3
 8001814:	4a0c      	ldr	r2, [pc, #48]	; (8001848 <average_results+0x120>)
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = 0; i < NUM_CHANNELS; i++) {
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	3301      	adds	r3, #1
 8001820:	61fb      	str	r3, [r7, #28]
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	2b03      	cmp	r3, #3
 8001826:	ddd7      	ble.n	80017d8 <average_results+0xb0>
    }
}
 8001828:	3728      	adds	r7, #40	; 0x28
 800182a:	46bd      	mov	sp, r7
 800182c:	bdb0      	pop	{r4, r5, r7, pc}
 800182e:	bf00      	nop
 8001830:	200001fc 	.word	0x200001fc
 8001834:	40020c00 	.word	0x40020c00
 8001838:	200001f4 	.word	0x200001f4
 800183c:	08009d40 	.word	0x08009d40
 8001840:	20000280 	.word	0x20000280
 8001844:	42480000 	.word	0x42480000
 8001848:	2000020c 	.word	0x2000020c

0800184c <HAL_UART_RxCpltCallback>:

float value;
float part1, part2;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800184c:	b580      	push	{r7, lr}
 800184e:	b096      	sub	sp, #88	; 0x58
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
    static char received_str[10];
    static uint8_t index = 0;

    if (huart->Instance == USART3) {
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4abf      	ldr	r2, [pc, #764]	; (8001b58 <HAL_UART_RxCpltCallback+0x30c>)
 800185a:	4293      	cmp	r3, r2
 800185c:	f040 8193 	bne.w	8001b86 <HAL_UART_RxCpltCallback+0x33a>
        if (uart_received_char == 'm') {
 8001860:	4bbe      	ldr	r3, [pc, #760]	; (8001b5c <HAL_UART_RxCpltCallback+0x310>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	2b6d      	cmp	r3, #109	; 0x6d
 8001866:	d157      	bne.n	8001918 <HAL_UART_RxCpltCallback+0xcc>
            uint8_t komunikat[50];
            uint8_t dl_kom = 0;
 8001868:	2300      	movs	r3, #0
 800186a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

            for (int i = 0; i < NUM_CHANNELS; i++) {
 800186e:	2300      	movs	r3, #0
 8001870:	653b      	str	r3, [r7, #80]	; 0x50
 8001872:	e029      	b.n	80018c8 <HAL_UART_RxCpltCallback+0x7c>
                dl_kom += sprintf((char*)(komunikat + dl_kom), "%u", avg_data[i]);
 8001874:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001878:	f107 020c 	add.w	r2, r7, #12
 800187c:	18d0      	adds	r0, r2, r3
 800187e:	4ab8      	ldr	r2, [pc, #736]	; (8001b60 <HAL_UART_RxCpltCallback+0x314>)
 8001880:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001882:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001886:	461a      	mov	r2, r3
 8001888:	49b6      	ldr	r1, [pc, #728]	; (8001b64 <HAL_UART_RxCpltCallback+0x318>)
 800188a:	f004 fdc5 	bl	8006418 <siprintf>
 800188e:	4603      	mov	r3, r0
 8001890:	b2da      	uxtb	r2, r3
 8001892:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001896:	4413      	add	r3, r2
 8001898:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                if (i != NUM_CHANNELS - 1) {
 800189c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800189e:	2b03      	cmp	r3, #3
 80018a0:	d00f      	beq.n	80018c2 <HAL_UART_RxCpltCallback+0x76>
                    dl_kom += sprintf((char*)(komunikat + dl_kom), " ");
 80018a2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80018a6:	f107 020c 	add.w	r2, r7, #12
 80018aa:	4413      	add	r3, r2
 80018ac:	49ae      	ldr	r1, [pc, #696]	; (8001b68 <HAL_UART_RxCpltCallback+0x31c>)
 80018ae:	4618      	mov	r0, r3
 80018b0:	f004 fdb2 	bl	8006418 <siprintf>
 80018b4:	4603      	mov	r3, r0
 80018b6:	b2da      	uxtb	r2, r3
 80018b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80018bc:	4413      	add	r3, r2
 80018be:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
            for (int i = 0; i < NUM_CHANNELS; i++) {
 80018c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80018c4:	3301      	adds	r3, #1
 80018c6:	653b      	str	r3, [r7, #80]	; 0x50
 80018c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80018ca:	2b03      	cmp	r3, #3
 80018cc:	ddd2      	ble.n	8001874 <HAL_UART_RxCpltCallback+0x28>
                }
            }

            dl_kom += sprintf((char*)(komunikat + dl_kom), "\r\n");
 80018ce:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80018d2:	f107 020c 	add.w	r2, r7, #12
 80018d6:	4413      	add	r3, r2
 80018d8:	49a4      	ldr	r1, [pc, #656]	; (8001b6c <HAL_UART_RxCpltCallback+0x320>)
 80018da:	4618      	mov	r0, r3
 80018dc:	f004 fd9c 	bl	8006418 <siprintf>
 80018e0:	4603      	mov	r3, r0
 80018e2:	b2da      	uxtb	r2, r3
 80018e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80018e8:	4413      	add	r3, r2
 80018ea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

            HAL_UART_Transmit_IT(&huart3, komunikat, dl_kom);
 80018ee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80018f2:	b29a      	uxth	r2, r3
 80018f4:	f107 030c 	add.w	r3, r7, #12
 80018f8:	4619      	mov	r1, r3
 80018fa:	489d      	ldr	r0, [pc, #628]	; (8001b70 <HAL_UART_RxCpltCallback+0x324>)
 80018fc:	f002 fb55 	bl	8003faa <HAL_UART_Transmit_IT>
            HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_SET);
 8001900:	2201      	movs	r2, #1
 8001902:	2180      	movs	r1, #128	; 0x80
 8001904:	489b      	ldr	r0, [pc, #620]	; (8001b74 <HAL_UART_RxCpltCallback+0x328>)
 8001906:	f001 f8c9 	bl	8002a9c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 800190a:	2201      	movs	r2, #1
 800190c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001910:	4898      	ldr	r0, [pc, #608]	; (8001b74 <HAL_UART_RxCpltCallback+0x328>)
 8001912:	f001 f8c3 	bl	8002a9c <HAL_GPIO_WritePin>
 8001916:	e119      	b.n	8001b4c <HAL_UART_RxCpltCallback+0x300>
        }
        else if (uart_received_char == 'a') {
 8001918:	4b90      	ldr	r3, [pc, #576]	; (8001b5c <HAL_UART_RxCpltCallback+0x310>)
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	2b61      	cmp	r3, #97	; 0x61
 800191e:	d10a      	bne.n	8001936 <HAL_UART_RxCpltCallback+0xea>
			   SetAttenuation(0.f, 1);
 8001920:	2001      	movs	r0, #1
 8001922:	ed9f 0a95 	vldr	s0, [pc, #596]	; 8001b78 <HAL_UART_RxCpltCallback+0x32c>
 8001926:	f7ff fd5b 	bl	80013e0 <SetAttenuation>
			   SetAttenuation(0.f, 2);
 800192a:	2002      	movs	r0, #2
 800192c:	ed9f 0a92 	vldr	s0, [pc, #584]	; 8001b78 <HAL_UART_RxCpltCallback+0x32c>
 8001930:	f7ff fd56 	bl	80013e0 <SetAttenuation>
 8001934:	e10a      	b.n	8001b4c <HAL_UART_RxCpltCallback+0x300>
		}
	    else if (uart_received_char == 'b') {
 8001936:	4b89      	ldr	r3, [pc, #548]	; (8001b5c <HAL_UART_RxCpltCallback+0x310>)
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	2b62      	cmp	r3, #98	; 0x62
 800193c:	d10a      	bne.n	8001954 <HAL_UART_RxCpltCallback+0x108>
			   SetAttenuation(0.5f, 1);
 800193e:	2001      	movs	r0, #1
 8001940:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8001944:	f7ff fd4c 	bl	80013e0 <SetAttenuation>
			   SetAttenuation(0.5f, 2);
 8001948:	2002      	movs	r0, #2
 800194a:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800194e:	f7ff fd47 	bl	80013e0 <SetAttenuation>
 8001952:	e0fb      	b.n	8001b4c <HAL_UART_RxCpltCallback+0x300>
		}
	    else if (uart_received_char == 'c') {
 8001954:	4b81      	ldr	r3, [pc, #516]	; (8001b5c <HAL_UART_RxCpltCallback+0x310>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	2b63      	cmp	r3, #99	; 0x63
 800195a:	d10a      	bne.n	8001972 <HAL_UART_RxCpltCallback+0x126>
			   SetAttenuation(1.f, 1);
 800195c:	2001      	movs	r0, #1
 800195e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001962:	f7ff fd3d 	bl	80013e0 <SetAttenuation>
			   SetAttenuation(1.f, 2);
 8001966:	2002      	movs	r0, #2
 8001968:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800196c:	f7ff fd38 	bl	80013e0 <SetAttenuation>
 8001970:	e0ec      	b.n	8001b4c <HAL_UART_RxCpltCallback+0x300>
		}
        else if (uart_received_char == 'd') {
 8001972:	4b7a      	ldr	r3, [pc, #488]	; (8001b5c <HAL_UART_RxCpltCallback+0x310>)
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	2b64      	cmp	r3, #100	; 0x64
 8001978:	d10a      	bne.n	8001990 <HAL_UART_RxCpltCallback+0x144>
			   SetAttenuation(1.5f, 1);
 800197a:	2001      	movs	r0, #1
 800197c:	eeb7 0a08 	vmov.f32	s0, #120	; 0x3fc00000  1.5
 8001980:	f7ff fd2e 	bl	80013e0 <SetAttenuation>
			   SetAttenuation(1.5f, 2);
 8001984:	2002      	movs	r0, #2
 8001986:	eeb7 0a08 	vmov.f32	s0, #120	; 0x3fc00000  1.5
 800198a:	f7ff fd29 	bl	80013e0 <SetAttenuation>
 800198e:	e0dd      	b.n	8001b4c <HAL_UART_RxCpltCallback+0x300>
		}
	    else if (uart_received_char == 'e') {
 8001990:	4b72      	ldr	r3, [pc, #456]	; (8001b5c <HAL_UART_RxCpltCallback+0x310>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	2b65      	cmp	r3, #101	; 0x65
 8001996:	d10a      	bne.n	80019ae <HAL_UART_RxCpltCallback+0x162>
			   SetAttenuation(2.f, 1);
 8001998:	2001      	movs	r0, #1
 800199a:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800199e:	f7ff fd1f 	bl	80013e0 <SetAttenuation>
			   SetAttenuation(2.f, 2);
 80019a2:	2002      	movs	r0, #2
 80019a4:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80019a8:	f7ff fd1a 	bl	80013e0 <SetAttenuation>
 80019ac:	e0ce      	b.n	8001b4c <HAL_UART_RxCpltCallback+0x300>
		}
	    else if (uart_received_char == 'f') {
 80019ae:	4b6b      	ldr	r3, [pc, #428]	; (8001b5c <HAL_UART_RxCpltCallback+0x310>)
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	2b66      	cmp	r3, #102	; 0x66
 80019b4:	d10a      	bne.n	80019cc <HAL_UART_RxCpltCallback+0x180>
			   SetAttenuation(2.5f, 1);
 80019b6:	2001      	movs	r0, #1
 80019b8:	eeb0 0a04 	vmov.f32	s0, #4	; 0x40200000  2.5
 80019bc:	f7ff fd10 	bl	80013e0 <SetAttenuation>
			   SetAttenuation(2.5f, 2);
 80019c0:	2002      	movs	r0, #2
 80019c2:	eeb0 0a04 	vmov.f32	s0, #4	; 0x40200000  2.5
 80019c6:	f7ff fd0b 	bl	80013e0 <SetAttenuation>
 80019ca:	e0bf      	b.n	8001b4c <HAL_UART_RxCpltCallback+0x300>
		}
        else if (uart_received_char == 'g') {
 80019cc:	4b63      	ldr	r3, [pc, #396]	; (8001b5c <HAL_UART_RxCpltCallback+0x310>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	2b67      	cmp	r3, #103	; 0x67
 80019d2:	d10a      	bne.n	80019ea <HAL_UART_RxCpltCallback+0x19e>
			   SetAttenuation(3.f, 1);
 80019d4:	2001      	movs	r0, #1
 80019d6:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 80019da:	f7ff fd01 	bl	80013e0 <SetAttenuation>
			   SetAttenuation(3.f, 2);
 80019de:	2002      	movs	r0, #2
 80019e0:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 80019e4:	f7ff fcfc 	bl	80013e0 <SetAttenuation>
 80019e8:	e0b0      	b.n	8001b4c <HAL_UART_RxCpltCallback+0x300>
		}
	    else if (uart_received_char == 'h') {
 80019ea:	4b5c      	ldr	r3, [pc, #368]	; (8001b5c <HAL_UART_RxCpltCallback+0x310>)
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	2b68      	cmp	r3, #104	; 0x68
 80019f0:	d10a      	bne.n	8001a08 <HAL_UART_RxCpltCallback+0x1bc>
			   SetAttenuation(3.5f, 1);
 80019f2:	2001      	movs	r0, #1
 80019f4:	eeb0 0a0c 	vmov.f32	s0, #12	; 0x40600000  3.5
 80019f8:	f7ff fcf2 	bl	80013e0 <SetAttenuation>
			   SetAttenuation(3.5f, 2);
 80019fc:	2002      	movs	r0, #2
 80019fe:	eeb0 0a0c 	vmov.f32	s0, #12	; 0x40600000  3.5
 8001a02:	f7ff fced 	bl	80013e0 <SetAttenuation>
 8001a06:	e0a1      	b.n	8001b4c <HAL_UART_RxCpltCallback+0x300>
		}
	    else if (uart_received_char == 'i') {
 8001a08:	4b54      	ldr	r3, [pc, #336]	; (8001b5c <HAL_UART_RxCpltCallback+0x310>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	2b69      	cmp	r3, #105	; 0x69
 8001a0e:	d10a      	bne.n	8001a26 <HAL_UART_RxCpltCallback+0x1da>
			   SetAttenuation(4.f, 1);
 8001a10:	2001      	movs	r0, #1
 8001a12:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 8001a16:	f7ff fce3 	bl	80013e0 <SetAttenuation>
			   SetAttenuation(4.f, 2);
 8001a1a:	2002      	movs	r0, #2
 8001a1c:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 8001a20:	f7ff fcde 	bl	80013e0 <SetAttenuation>
 8001a24:	e092      	b.n	8001b4c <HAL_UART_RxCpltCallback+0x300>
		}
	    else if (uart_received_char == 'j') {
 8001a26:	4b4d      	ldr	r3, [pc, #308]	; (8001b5c <HAL_UART_RxCpltCallback+0x310>)
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	2b6a      	cmp	r3, #106	; 0x6a
 8001a2c:	d10a      	bne.n	8001a44 <HAL_UART_RxCpltCallback+0x1f8>
			   SetAttenuation(4.5f, 1);
 8001a2e:	2001      	movs	r0, #1
 8001a30:	eeb1 0a02 	vmov.f32	s0, #18	; 0x40900000  4.5
 8001a34:	f7ff fcd4 	bl	80013e0 <SetAttenuation>
			   SetAttenuation(4.5f, 2);
 8001a38:	2002      	movs	r0, #2
 8001a3a:	eeb1 0a02 	vmov.f32	s0, #18	; 0x40900000  4.5
 8001a3e:	f7ff fccf 	bl	80013e0 <SetAttenuation>
 8001a42:	e083      	b.n	8001b4c <HAL_UART_RxCpltCallback+0x300>
		}
        else if (uart_received_char >= '0' && uart_received_char <= '9') {
 8001a44:	4b45      	ldr	r3, [pc, #276]	; (8001b5c <HAL_UART_RxCpltCallback+0x310>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	2b2f      	cmp	r3, #47	; 0x2f
 8001a4a:	d96f      	bls.n	8001b2c <HAL_UART_RxCpltCallback+0x2e0>
 8001a4c:	4b43      	ldr	r3, [pc, #268]	; (8001b5c <HAL_UART_RxCpltCallback+0x310>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	2b39      	cmp	r3, #57	; 0x39
 8001a52:	d86b      	bhi.n	8001b2c <HAL_UART_RxCpltCallback+0x2e0>
            received_str[index++] = uart_received_char;
 8001a54:	4b49      	ldr	r3, [pc, #292]	; (8001b7c <HAL_UART_RxCpltCallback+0x330>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	1c5a      	adds	r2, r3, #1
 8001a5a:	b2d1      	uxtb	r1, r2
 8001a5c:	4a47      	ldr	r2, [pc, #284]	; (8001b7c <HAL_UART_RxCpltCallback+0x330>)
 8001a5e:	7011      	strb	r1, [r2, #0]
 8001a60:	461a      	mov	r2, r3
 8001a62:	4b3e      	ldr	r3, [pc, #248]	; (8001b5c <HAL_UART_RxCpltCallback+0x310>)
 8001a64:	7819      	ldrb	r1, [r3, #0]
 8001a66:	4b46      	ldr	r3, [pc, #280]	; (8001b80 <HAL_UART_RxCpltCallback+0x334>)
 8001a68:	5499      	strb	r1, [r3, r2]

            if (index >= 2) {
 8001a6a:	4b44      	ldr	r3, [pc, #272]	; (8001b7c <HAL_UART_RxCpltCallback+0x330>)
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d96c      	bls.n	8001b4c <HAL_UART_RxCpltCallback+0x300>
                received_str[index] = '\0';
 8001a72:	4b42      	ldr	r3, [pc, #264]	; (8001b7c <HAL_UART_RxCpltCallback+0x330>)
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	461a      	mov	r2, r3
 8001a78:	4b41      	ldr	r3, [pc, #260]	; (8001b80 <HAL_UART_RxCpltCallback+0x334>)
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	5499      	strb	r1, [r3, r2]

                char *endptr;
                long uart_value = strtol(received_str, &endptr, 10);
 8001a7e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a82:	220a      	movs	r2, #10
 8001a84:	4619      	mov	r1, r3
 8001a86:	483e      	ldr	r0, [pc, #248]	; (8001b80 <HAL_UART_RxCpltCallback+0x334>)
 8001a88:	f003 fd84 	bl	8005594 <strtol>
 8001a8c:	64f8      	str	r0, [r7, #76]	; 0x4c

                if (*endptr == '\0' && uart_value >= 0 && uart_value <= 63) {
 8001a8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d176      	bne.n	8001b84 <HAL_UART_RxCpltCallback+0x338>
 8001a96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	db73      	blt.n	8001b84 <HAL_UART_RxCpltCallback+0x338>
 8001a9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a9e:	2b3f      	cmp	r3, #63	; 0x3f
 8001aa0:	dc70      	bgt.n	8001b84 <HAL_UART_RxCpltCallback+0x338>
                    float part1 = uart_value / 2.0f;
 8001aa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001aa4:	ee07 3a90 	vmov	s15, r3
 8001aa8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001aac:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001ab0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ab4:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
                    float part2 = uart_value / 2.0f;
 8001ab8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001aba:	ee07 3a90 	vmov	s15, r3
 8001abe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ac2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001ac6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001aca:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44

                    part1 = roundf(part1 * 2) / 2.0f;
 8001ace:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001ad2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001ad6:	eeb0 0a67 	vmov.f32	s0, s15
 8001ada:	f008 f901 	bl	8009ce0 <roundf>
 8001ade:	eeb0 7a40 	vmov.f32	s14, s0
 8001ae2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001ae6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001aea:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
                    part2 = roundf(part2 * 2) / 2.0f;
 8001aee:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001af2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001af6:	eeb0 0a67 	vmov.f32	s0, s15
 8001afa:	f008 f8f1 	bl	8009ce0 <roundf>
 8001afe:	eeb0 7a40 	vmov.f32	s14, s0
 8001b02:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001b06:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b0a:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44

                    SetAttenuation(part1, 1);
 8001b0e:	2001      	movs	r0, #1
 8001b10:	ed97 0a12 	vldr	s0, [r7, #72]	; 0x48
 8001b14:	f7ff fc64 	bl	80013e0 <SetAttenuation>
                    SetAttenuation(part2, 2);
 8001b18:	2002      	movs	r0, #2
 8001b1a:	ed97 0a11 	vldr	s0, [r7, #68]	; 0x44
 8001b1e:	f7ff fc5f 	bl	80013e0 <SetAttenuation>
                if (*endptr == '\0' && uart_value >= 0 && uart_value <= 63) {
 8001b22:	bf00      	nop
                } else {
                	return;
                }

                index = 0;
 8001b24:	4b15      	ldr	r3, [pc, #84]	; (8001b7c <HAL_UART_RxCpltCallback+0x330>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	701a      	strb	r2, [r3, #0]
            if (index >= 2) {
 8001b2a:	e00f      	b.n	8001b4c <HAL_UART_RxCpltCallback+0x300>
            }
        }
        else {
            HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	2101      	movs	r1, #1
 8001b30:	4810      	ldr	r0, [pc, #64]	; (8001b74 <HAL_UART_RxCpltCallback+0x328>)
 8001b32:	f000 ffb3 	bl	8002a9c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_RESET);
 8001b36:	2200      	movs	r2, #0
 8001b38:	2180      	movs	r1, #128	; 0x80
 8001b3a:	480e      	ldr	r0, [pc, #56]	; (8001b74 <HAL_UART_RxCpltCallback+0x328>)
 8001b3c:	f000 ffae 	bl	8002a9c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 8001b40:	2200      	movs	r2, #0
 8001b42:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b46:	480b      	ldr	r0, [pc, #44]	; (8001b74 <HAL_UART_RxCpltCallback+0x328>)
 8001b48:	f000 ffa8 	bl	8002a9c <HAL_GPIO_WritePin>
        }

        HAL_UART_Receive_IT(&huart3, &uart_received_char, 1);
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	4903      	ldr	r1, [pc, #12]	; (8001b5c <HAL_UART_RxCpltCallback+0x310>)
 8001b50:	4807      	ldr	r0, [pc, #28]	; (8001b70 <HAL_UART_RxCpltCallback+0x324>)
 8001b52:	f002 fa6f 	bl	8004034 <HAL_UART_Receive_IT>
 8001b56:	e016      	b.n	8001b86 <HAL_UART_RxCpltCallback+0x33a>
 8001b58:	40004800 	.word	0x40004800
 8001b5c:	20000214 	.word	0x20000214
 8001b60:	2000020c 	.word	0x2000020c
 8001b64:	08009d58 	.word	0x08009d58
 8001b68:	08009d5c 	.word	0x08009d5c
 8001b6c:	08009d60 	.word	0x08009d60
 8001b70:	20000280 	.word	0x20000280
 8001b74:	40020400 	.word	0x40020400
 8001b78:	00000000 	.word	0x00000000
 8001b7c:	20000215 	.word	0x20000215
 8001b80:	20000218 	.word	0x20000218
                	return;
 8001b84:	bf00      	nop
    }
}
 8001b86:	3758      	adds	r7, #88	; 0x58
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <main>:


int main(void) {
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
    HAL_Init();
 8001b92:	f000 fb85 	bl	80022a0 <HAL_Init>
    SystemClock_Config();
 8001b96:	f000 f833 	bl	8001c00 <SystemClock_Config>
    MX_GPIO_Init();
 8001b9a:	f7ff fc59 	bl	8001450 <MX_GPIO_Init>
    MX_USART3_UART_Init();
 8001b9e:	f000 fa53 	bl	8002048 <MX_USART3_UART_Init>
    MX_USB_OTG_FS_PCD_Init();
 8001ba2:	f000 facb 	bl	800213c <MX_USB_OTG_FS_PCD_Init>
    MX_SPI1_Init();
 8001ba6:	f000 f89b 	bl	8001ce0 <MX_SPI1_Init>

    AD7606_Init(&hspi1);
 8001baa:	4810      	ldr	r0, [pc, #64]	; (8001bec <main+0x60>)
 8001bac:	f7ff fa30 	bl	8001010 <AD7606_Init>

    SPI_Init_Att();
 8001bb0:	f7ff fae4 	bl	800117c <SPI_Init_Att>

    float stage1 = 31.5f;
 8001bb4:	4b0e      	ldr	r3, [pc, #56]	; (8001bf0 <main+0x64>)
 8001bb6:	607b      	str	r3, [r7, #4]
    float stage2 = 31.5f;
 8001bb8:	4b0d      	ldr	r3, [pc, #52]	; (8001bf0 <main+0x64>)
 8001bba:	603b      	str	r3, [r7, #0]

    SetAttenuation(stage1, 1);
 8001bbc:	2001      	movs	r0, #1
 8001bbe:	ed97 0a01 	vldr	s0, [r7, #4]
 8001bc2:	f7ff fc0d 	bl	80013e0 <SetAttenuation>
    SetAttenuation(stage2, 2);
 8001bc6:	2002      	movs	r0, #2
 8001bc8:	ed97 0a00 	vldr	s0, [r7]
 8001bcc:	f7ff fc08 	bl	80013e0 <SetAttenuation>


    HAL_UART_Receive_IT(&huart3, &uart_received_char, 1);
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	4908      	ldr	r1, [pc, #32]	; (8001bf4 <main+0x68>)
 8001bd4:	4808      	ldr	r0, [pc, #32]	; (8001bf8 <main+0x6c>)
 8001bd6:	f002 fa2d 	bl	8004034 <HAL_UART_Receive_IT>
    HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 8001bda:	2201      	movs	r2, #1
 8001bdc:	2101      	movs	r1, #1
 8001bde:	4807      	ldr	r0, [pc, #28]	; (8001bfc <main+0x70>)
 8001be0:	f000 ff5c 	bl	8002a9c <HAL_GPIO_WritePin>

    while (1) {
        average_results();
 8001be4:	f7ff fda0 	bl	8001728 <average_results>
 8001be8:	e7fc      	b.n	8001be4 <main+0x58>
 8001bea:	bf00      	nop
 8001bec:	20000224 	.word	0x20000224
 8001bf0:	41fc0000 	.word	0x41fc0000
 8001bf4:	20000214 	.word	0x20000214
 8001bf8:	20000280 	.word	0x20000280
 8001bfc:	40020400 	.word	0x40020400

08001c00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b094      	sub	sp, #80	; 0x50
 8001c04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c06:	f107 0320 	add.w	r3, r7, #32
 8001c0a:	2230      	movs	r2, #48	; 0x30
 8001c0c:	2100      	movs	r1, #0
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f004 fc65 	bl	80064de <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c14:	f107 030c 	add.w	r3, r7, #12
 8001c18:	2200      	movs	r2, #0
 8001c1a:	601a      	str	r2, [r3, #0]
 8001c1c:	605a      	str	r2, [r3, #4]
 8001c1e:	609a      	str	r2, [r3, #8]
 8001c20:	60da      	str	r2, [r3, #12]
 8001c22:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c24:	2300      	movs	r3, #0
 8001c26:	60bb      	str	r3, [r7, #8]
 8001c28:	4b28      	ldr	r3, [pc, #160]	; (8001ccc <SystemClock_Config+0xcc>)
 8001c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2c:	4a27      	ldr	r2, [pc, #156]	; (8001ccc <SystemClock_Config+0xcc>)
 8001c2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c32:	6413      	str	r3, [r2, #64]	; 0x40
 8001c34:	4b25      	ldr	r3, [pc, #148]	; (8001ccc <SystemClock_Config+0xcc>)
 8001c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c3c:	60bb      	str	r3, [r7, #8]
 8001c3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c40:	2300      	movs	r3, #0
 8001c42:	607b      	str	r3, [r7, #4]
 8001c44:	4b22      	ldr	r3, [pc, #136]	; (8001cd0 <SystemClock_Config+0xd0>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a21      	ldr	r2, [pc, #132]	; (8001cd0 <SystemClock_Config+0xd0>)
 8001c4a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c4e:	6013      	str	r3, [r2, #0]
 8001c50:	4b1f      	ldr	r3, [pc, #124]	; (8001cd0 <SystemClock_Config+0xd0>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c58:	607b      	str	r3, [r7, #4]
 8001c5a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001c60:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001c64:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c66:	2302      	movs	r3, #2
 8001c68:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c6a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001c70:	2304      	movs	r3, #4
 8001c72:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001c74:	23a8      	movs	r3, #168	; 0xa8
 8001c76:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c78:	2302      	movs	r3, #2
 8001c7a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001c7c:	2307      	movs	r3, #7
 8001c7e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c80:	f107 0320 	add.w	r3, r7, #32
 8001c84:	4618      	mov	r0, r3
 8001c86:	f001 f83f 	bl	8002d08 <HAL_RCC_OscConfig>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001c90:	f000 f820 	bl	8001cd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c94:	230f      	movs	r3, #15
 8001c96:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c98:	2302      	movs	r3, #2
 8001c9a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001ca0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001ca4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001ca6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001caa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001cac:	f107 030c 	add.w	r3, r7, #12
 8001cb0:	2105      	movs	r1, #5
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f001 faa0 	bl	80031f8 <HAL_RCC_ClockConfig>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001cbe:	f000 f809 	bl	8001cd4 <Error_Handler>
  }
}
 8001cc2:	bf00      	nop
 8001cc4:	3750      	adds	r7, #80	; 0x50
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	40023800 	.word	0x40023800
 8001cd0:	40007000 	.word	0x40007000

08001cd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cd8:	b672      	cpsid	i
}
 8001cda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cdc:	e7fe      	b.n	8001cdc <Error_Handler+0x8>
	...

08001ce0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001ce4:	4b18      	ldr	r3, [pc, #96]	; (8001d48 <MX_SPI1_Init+0x68>)
 8001ce6:	4a19      	ldr	r2, [pc, #100]	; (8001d4c <MX_SPI1_Init+0x6c>)
 8001ce8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001cea:	4b17      	ldr	r3, [pc, #92]	; (8001d48 <MX_SPI1_Init+0x68>)
 8001cec:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001cf0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001cf2:	4b15      	ldr	r3, [pc, #84]	; (8001d48 <MX_SPI1_Init+0x68>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001cf8:	4b13      	ldr	r3, [pc, #76]	; (8001d48 <MX_SPI1_Init+0x68>)
 8001cfa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001cfe:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d00:	4b11      	ldr	r3, [pc, #68]	; (8001d48 <MX_SPI1_Init+0x68>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001d06:	4b10      	ldr	r3, [pc, #64]	; (8001d48 <MX_SPI1_Init+0x68>)
 8001d08:	2201      	movs	r2, #1
 8001d0a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d0c:	4b0e      	ldr	r3, [pc, #56]	; (8001d48 <MX_SPI1_Init+0x68>)
 8001d0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d12:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001d14:	4b0c      	ldr	r3, [pc, #48]	; (8001d48 <MX_SPI1_Init+0x68>)
 8001d16:	2210      	movs	r2, #16
 8001d18:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d1a:	4b0b      	ldr	r3, [pc, #44]	; (8001d48 <MX_SPI1_Init+0x68>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d20:	4b09      	ldr	r3, [pc, #36]	; (8001d48 <MX_SPI1_Init+0x68>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d26:	4b08      	ldr	r3, [pc, #32]	; (8001d48 <MX_SPI1_Init+0x68>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001d2c:	4b06      	ldr	r3, [pc, #24]	; (8001d48 <MX_SPI1_Init+0x68>)
 8001d2e:	220a      	movs	r2, #10
 8001d30:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d32:	4805      	ldr	r0, [pc, #20]	; (8001d48 <MX_SPI1_Init+0x68>)
 8001d34:	f001 fc80 	bl	8003638 <HAL_SPI_Init>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8001d3e:	f7ff ffc9 	bl	8001cd4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d42:	bf00      	nop
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	20000224 	.word	0x20000224
 8001d4c:	40013000 	.word	0x40013000

08001d50 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b08a      	sub	sp, #40	; 0x28
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d58:	f107 0314 	add.w	r3, r7, #20
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	605a      	str	r2, [r3, #4]
 8001d62:	609a      	str	r2, [r3, #8]
 8001d64:	60da      	str	r2, [r3, #12]
 8001d66:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a19      	ldr	r2, [pc, #100]	; (8001dd4 <HAL_SPI_MspInit+0x84>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d12b      	bne.n	8001dca <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	613b      	str	r3, [r7, #16]
 8001d76:	4b18      	ldr	r3, [pc, #96]	; (8001dd8 <HAL_SPI_MspInit+0x88>)
 8001d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d7a:	4a17      	ldr	r2, [pc, #92]	; (8001dd8 <HAL_SPI_MspInit+0x88>)
 8001d7c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d80:	6453      	str	r3, [r2, #68]	; 0x44
 8001d82:	4b15      	ldr	r3, [pc, #84]	; (8001dd8 <HAL_SPI_MspInit+0x88>)
 8001d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d8a:	613b      	str	r3, [r7, #16]
 8001d8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d8e:	2300      	movs	r3, #0
 8001d90:	60fb      	str	r3, [r7, #12]
 8001d92:	4b11      	ldr	r3, [pc, #68]	; (8001dd8 <HAL_SPI_MspInit+0x88>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d96:	4a10      	ldr	r2, [pc, #64]	; (8001dd8 <HAL_SPI_MspInit+0x88>)
 8001d98:	f043 0301 	orr.w	r3, r3, #1
 8001d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d9e:	4b0e      	ldr	r3, [pc, #56]	; (8001dd8 <HAL_SPI_MspInit+0x88>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	60fb      	str	r3, [r7, #12]
 8001da8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001daa:	23e0      	movs	r3, #224	; 0xe0
 8001dac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dae:	2302      	movs	r3, #2
 8001db0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db2:	2300      	movs	r3, #0
 8001db4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001db6:	2303      	movs	r3, #3
 8001db8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001dba:	2305      	movs	r3, #5
 8001dbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dbe:	f107 0314 	add.w	r3, r7, #20
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	4805      	ldr	r0, [pc, #20]	; (8001ddc <HAL_SPI_MspInit+0x8c>)
 8001dc6:	f000 fca5 	bl	8002714 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001dca:	bf00      	nop
 8001dcc:	3728      	adds	r7, #40	; 0x28
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	40013000 	.word	0x40013000
 8001dd8:	40023800 	.word	0x40023800
 8001ddc:	40020000 	.word	0x40020000

08001de0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001de6:	2300      	movs	r3, #0
 8001de8:	607b      	str	r3, [r7, #4]
 8001dea:	4b10      	ldr	r3, [pc, #64]	; (8001e2c <HAL_MspInit+0x4c>)
 8001dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dee:	4a0f      	ldr	r2, [pc, #60]	; (8001e2c <HAL_MspInit+0x4c>)
 8001df0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001df4:	6453      	str	r3, [r2, #68]	; 0x44
 8001df6:	4b0d      	ldr	r3, [pc, #52]	; (8001e2c <HAL_MspInit+0x4c>)
 8001df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dfe:	607b      	str	r3, [r7, #4]
 8001e00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e02:	2300      	movs	r3, #0
 8001e04:	603b      	str	r3, [r7, #0]
 8001e06:	4b09      	ldr	r3, [pc, #36]	; (8001e2c <HAL_MspInit+0x4c>)
 8001e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0a:	4a08      	ldr	r2, [pc, #32]	; (8001e2c <HAL_MspInit+0x4c>)
 8001e0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e10:	6413      	str	r3, [r2, #64]	; 0x40
 8001e12:	4b06      	ldr	r3, [pc, #24]	; (8001e2c <HAL_MspInit+0x4c>)
 8001e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e1a:	603b      	str	r3, [r7, #0]
 8001e1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e1e:	bf00      	nop
 8001e20:	370c      	adds	r7, #12
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	40023800 	.word	0x40023800

08001e30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e34:	e7fe      	b.n	8001e34 <NMI_Handler+0x4>

08001e36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e36:	b480      	push	{r7}
 8001e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e3a:	e7fe      	b.n	8001e3a <HardFault_Handler+0x4>

08001e3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e40:	e7fe      	b.n	8001e40 <MemManage_Handler+0x4>

08001e42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e42:	b480      	push	{r7}
 8001e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e46:	e7fe      	b.n	8001e46 <BusFault_Handler+0x4>

08001e48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e4c:	e7fe      	b.n	8001e4c <UsageFault_Handler+0x4>

08001e4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e4e:	b480      	push	{r7}
 8001e50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e52:	bf00      	nop
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e60:	bf00      	nop
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr

08001e6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e6e:	bf00      	nop
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e7c:	f000 fa62 	bl	8002344 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e80:	bf00      	nop
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001e88:	4802      	ldr	r0, [pc, #8]	; (8001e94 <USART3_IRQHandler+0x10>)
 8001e8a:	f002 f903 	bl	8004094 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001e8e:	bf00      	nop
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	20000280 	.word	0x20000280

08001e98 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  return 1;
 8001e9c:	2301      	movs	r3, #1
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <_kill>:

int _kill(int pid, int sig)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001eb2:	f004 fb67 	bl	8006584 <__errno>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2216      	movs	r2, #22
 8001eba:	601a      	str	r2, [r3, #0]
  return -1;
 8001ebc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3708      	adds	r7, #8
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <_exit>:

void _exit (int status)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ed0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f7ff ffe7 	bl	8001ea8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001eda:	e7fe      	b.n	8001eda <_exit+0x12>

08001edc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b086      	sub	sp, #24
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	60b9      	str	r1, [r7, #8]
 8001ee6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ee8:	2300      	movs	r3, #0
 8001eea:	617b      	str	r3, [r7, #20]
 8001eec:	e00a      	b.n	8001f04 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001eee:	f3af 8000 	nop.w
 8001ef2:	4601      	mov	r1, r0
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	1c5a      	adds	r2, r3, #1
 8001ef8:	60ba      	str	r2, [r7, #8]
 8001efa:	b2ca      	uxtb	r2, r1
 8001efc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	3301      	adds	r3, #1
 8001f02:	617b      	str	r3, [r7, #20]
 8001f04:	697a      	ldr	r2, [r7, #20]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	dbf0      	blt.n	8001eee <_read+0x12>
  }

  return len;
 8001f0c:	687b      	ldr	r3, [r7, #4]
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3718      	adds	r7, #24
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b086      	sub	sp, #24
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	60f8      	str	r0, [r7, #12]
 8001f1e:	60b9      	str	r1, [r7, #8]
 8001f20:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f22:	2300      	movs	r3, #0
 8001f24:	617b      	str	r3, [r7, #20]
 8001f26:	e009      	b.n	8001f3c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	1c5a      	adds	r2, r3, #1
 8001f2c:	60ba      	str	r2, [r7, #8]
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	4618      	mov	r0, r3
 8001f32:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	3301      	adds	r3, #1
 8001f3a:	617b      	str	r3, [r7, #20]
 8001f3c:	697a      	ldr	r2, [r7, #20]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	dbf1      	blt.n	8001f28 <_write+0x12>
  }
  return len;
 8001f44:	687b      	ldr	r3, [r7, #4]
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3718      	adds	r7, #24
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <_close>:

int _close(int file)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	b083      	sub	sp, #12
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr

08001f66 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f66:	b480      	push	{r7}
 8001f68:	b083      	sub	sp, #12
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
 8001f6e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f76:	605a      	str	r2, [r3, #4]
  return 0;
 8001f78:	2300      	movs	r3, #0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr

08001f86 <_isatty>:

int _isatty(int file)
{
 8001f86:	b480      	push	{r7}
 8001f88:	b083      	sub	sp, #12
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f8e:	2301      	movs	r3, #1
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b085      	sub	sp, #20
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	60f8      	str	r0, [r7, #12]
 8001fa4:	60b9      	str	r1, [r7, #8]
 8001fa6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3714      	adds	r7, #20
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
	...

08001fb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b086      	sub	sp, #24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fc0:	4a14      	ldr	r2, [pc, #80]	; (8002014 <_sbrk+0x5c>)
 8001fc2:	4b15      	ldr	r3, [pc, #84]	; (8002018 <_sbrk+0x60>)
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fcc:	4b13      	ldr	r3, [pc, #76]	; (800201c <_sbrk+0x64>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d102      	bne.n	8001fda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fd4:	4b11      	ldr	r3, [pc, #68]	; (800201c <_sbrk+0x64>)
 8001fd6:	4a12      	ldr	r2, [pc, #72]	; (8002020 <_sbrk+0x68>)
 8001fd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fda:	4b10      	ldr	r3, [pc, #64]	; (800201c <_sbrk+0x64>)
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4413      	add	r3, r2
 8001fe2:	693a      	ldr	r2, [r7, #16]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d207      	bcs.n	8001ff8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fe8:	f004 facc 	bl	8006584 <__errno>
 8001fec:	4603      	mov	r3, r0
 8001fee:	220c      	movs	r2, #12
 8001ff0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ff6:	e009      	b.n	800200c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ff8:	4b08      	ldr	r3, [pc, #32]	; (800201c <_sbrk+0x64>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ffe:	4b07      	ldr	r3, [pc, #28]	; (800201c <_sbrk+0x64>)
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4413      	add	r3, r2
 8002006:	4a05      	ldr	r2, [pc, #20]	; (800201c <_sbrk+0x64>)
 8002008:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800200a:	68fb      	ldr	r3, [r7, #12]
}
 800200c:	4618      	mov	r0, r3
 800200e:	3718      	adds	r7, #24
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	20030000 	.word	0x20030000
 8002018:	00000400 	.word	0x00000400
 800201c:	2000027c 	.word	0x2000027c
 8002020:	20000920 	.word	0x20000920

08002024 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002028:	4b06      	ldr	r3, [pc, #24]	; (8002044 <SystemInit+0x20>)
 800202a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800202e:	4a05      	ldr	r2, [pc, #20]	; (8002044 <SystemInit+0x20>)
 8002030:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002034:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002038:	bf00      	nop
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	e000ed00 	.word	0xe000ed00

08002048 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800204c:	4b11      	ldr	r3, [pc, #68]	; (8002094 <MX_USART3_UART_Init+0x4c>)
 800204e:	4a12      	ldr	r2, [pc, #72]	; (8002098 <MX_USART3_UART_Init+0x50>)
 8002050:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002052:	4b10      	ldr	r3, [pc, #64]	; (8002094 <MX_USART3_UART_Init+0x4c>)
 8002054:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002058:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800205a:	4b0e      	ldr	r3, [pc, #56]	; (8002094 <MX_USART3_UART_Init+0x4c>)
 800205c:	2200      	movs	r2, #0
 800205e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002060:	4b0c      	ldr	r3, [pc, #48]	; (8002094 <MX_USART3_UART_Init+0x4c>)
 8002062:	2200      	movs	r2, #0
 8002064:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002066:	4b0b      	ldr	r3, [pc, #44]	; (8002094 <MX_USART3_UART_Init+0x4c>)
 8002068:	2200      	movs	r2, #0
 800206a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800206c:	4b09      	ldr	r3, [pc, #36]	; (8002094 <MX_USART3_UART_Init+0x4c>)
 800206e:	220c      	movs	r2, #12
 8002070:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002072:	4b08      	ldr	r3, [pc, #32]	; (8002094 <MX_USART3_UART_Init+0x4c>)
 8002074:	2200      	movs	r2, #0
 8002076:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002078:	4b06      	ldr	r3, [pc, #24]	; (8002094 <MX_USART3_UART_Init+0x4c>)
 800207a:	2200      	movs	r2, #0
 800207c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800207e:	4805      	ldr	r0, [pc, #20]	; (8002094 <MX_USART3_UART_Init+0x4c>)
 8002080:	f001 ff46 	bl	8003f10 <HAL_UART_Init>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800208a:	f7ff fe23 	bl	8001cd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800208e:	bf00      	nop
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	20000280 	.word	0x20000280
 8002098:	40004800 	.word	0x40004800

0800209c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b08a      	sub	sp, #40	; 0x28
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a4:	f107 0314 	add.w	r3, r7, #20
 80020a8:	2200      	movs	r2, #0
 80020aa:	601a      	str	r2, [r3, #0]
 80020ac:	605a      	str	r2, [r3, #4]
 80020ae:	609a      	str	r2, [r3, #8]
 80020b0:	60da      	str	r2, [r3, #12]
 80020b2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a1d      	ldr	r2, [pc, #116]	; (8002130 <HAL_UART_MspInit+0x94>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d134      	bne.n	8002128 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80020be:	2300      	movs	r3, #0
 80020c0:	613b      	str	r3, [r7, #16]
 80020c2:	4b1c      	ldr	r3, [pc, #112]	; (8002134 <HAL_UART_MspInit+0x98>)
 80020c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c6:	4a1b      	ldr	r2, [pc, #108]	; (8002134 <HAL_UART_MspInit+0x98>)
 80020c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020cc:	6413      	str	r3, [r2, #64]	; 0x40
 80020ce:	4b19      	ldr	r3, [pc, #100]	; (8002134 <HAL_UART_MspInit+0x98>)
 80020d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020d6:	613b      	str	r3, [r7, #16]
 80020d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020da:	2300      	movs	r3, #0
 80020dc:	60fb      	str	r3, [r7, #12]
 80020de:	4b15      	ldr	r3, [pc, #84]	; (8002134 <HAL_UART_MspInit+0x98>)
 80020e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e2:	4a14      	ldr	r2, [pc, #80]	; (8002134 <HAL_UART_MspInit+0x98>)
 80020e4:	f043 0308 	orr.w	r3, r3, #8
 80020e8:	6313      	str	r3, [r2, #48]	; 0x30
 80020ea:	4b12      	ldr	r3, [pc, #72]	; (8002134 <HAL_UART_MspInit+0x98>)
 80020ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ee:	f003 0308 	and.w	r3, r3, #8
 80020f2:	60fb      	str	r3, [r7, #12]
 80020f4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80020f6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80020fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020fc:	2302      	movs	r3, #2
 80020fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002100:	2300      	movs	r3, #0
 8002102:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002104:	2303      	movs	r3, #3
 8002106:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002108:	2307      	movs	r3, #7
 800210a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800210c:	f107 0314 	add.w	r3, r7, #20
 8002110:	4619      	mov	r1, r3
 8002112:	4809      	ldr	r0, [pc, #36]	; (8002138 <HAL_UART_MspInit+0x9c>)
 8002114:	f000 fafe 	bl	8002714 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002118:	2200      	movs	r2, #0
 800211a:	2100      	movs	r1, #0
 800211c:	2027      	movs	r0, #39	; 0x27
 800211e:	f000 fa30 	bl	8002582 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002122:	2027      	movs	r0, #39	; 0x27
 8002124:	f000 fa49 	bl	80025ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002128:	bf00      	nop
 800212a:	3728      	adds	r7, #40	; 0x28
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	40004800 	.word	0x40004800
 8002134:	40023800 	.word	0x40023800
 8002138:	40020c00 	.word	0x40020c00

0800213c <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002140:	4b14      	ldr	r3, [pc, #80]	; (8002194 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002142:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002146:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8002148:	4b12      	ldr	r3, [pc, #72]	; (8002194 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800214a:	2204      	movs	r2, #4
 800214c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800214e:	4b11      	ldr	r3, [pc, #68]	; (8002194 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002150:	2202      	movs	r2, #2
 8002152:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002154:	4b0f      	ldr	r3, [pc, #60]	; (8002194 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002156:	2200      	movs	r2, #0
 8002158:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800215a:	4b0e      	ldr	r3, [pc, #56]	; (8002194 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800215c:	2202      	movs	r2, #2
 800215e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8002160:	4b0c      	ldr	r3, [pc, #48]	; (8002194 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002162:	2201      	movs	r2, #1
 8002164:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002166:	4b0b      	ldr	r3, [pc, #44]	; (8002194 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002168:	2200      	movs	r2, #0
 800216a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800216c:	4b09      	ldr	r3, [pc, #36]	; (8002194 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800216e:	2200      	movs	r2, #0
 8002170:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002172:	4b08      	ldr	r3, [pc, #32]	; (8002194 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002174:	2201      	movs	r2, #1
 8002176:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002178:	4b06      	ldr	r3, [pc, #24]	; (8002194 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800217a:	2200      	movs	r2, #0
 800217c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800217e:	4805      	ldr	r0, [pc, #20]	; (8002194 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002180:	f000 fca5 	bl	8002ace <HAL_PCD_Init>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800218a:	f7ff fda3 	bl	8001cd4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800218e:	bf00      	nop
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	200002c4 	.word	0x200002c4

08002198 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b08a      	sub	sp, #40	; 0x28
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a0:	f107 0314 	add.w	r3, r7, #20
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]
 80021a8:	605a      	str	r2, [r3, #4]
 80021aa:	609a      	str	r2, [r3, #8]
 80021ac:	60da      	str	r2, [r3, #12]
 80021ae:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021b8:	d13f      	bne.n	800223a <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ba:	2300      	movs	r3, #0
 80021bc:	613b      	str	r3, [r7, #16]
 80021be:	4b21      	ldr	r3, [pc, #132]	; (8002244 <HAL_PCD_MspInit+0xac>)
 80021c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c2:	4a20      	ldr	r2, [pc, #128]	; (8002244 <HAL_PCD_MspInit+0xac>)
 80021c4:	f043 0301 	orr.w	r3, r3, #1
 80021c8:	6313      	str	r3, [r2, #48]	; 0x30
 80021ca:	4b1e      	ldr	r3, [pc, #120]	; (8002244 <HAL_PCD_MspInit+0xac>)
 80021cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	613b      	str	r3, [r7, #16]
 80021d4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80021d6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80021da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021dc:	2302      	movs	r3, #2
 80021de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e0:	2300      	movs	r3, #0
 80021e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021e4:	2303      	movs	r3, #3
 80021e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80021e8:	230a      	movs	r3, #10
 80021ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ec:	f107 0314 	add.w	r3, r7, #20
 80021f0:	4619      	mov	r1, r3
 80021f2:	4815      	ldr	r0, [pc, #84]	; (8002248 <HAL_PCD_MspInit+0xb0>)
 80021f4:	f000 fa8e 	bl	8002714 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80021f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021fe:	2300      	movs	r3, #0
 8002200:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002202:	2300      	movs	r3, #0
 8002204:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002206:	f107 0314 	add.w	r3, r7, #20
 800220a:	4619      	mov	r1, r3
 800220c:	480e      	ldr	r0, [pc, #56]	; (8002248 <HAL_PCD_MspInit+0xb0>)
 800220e:	f000 fa81 	bl	8002714 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002212:	4b0c      	ldr	r3, [pc, #48]	; (8002244 <HAL_PCD_MspInit+0xac>)
 8002214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002216:	4a0b      	ldr	r2, [pc, #44]	; (8002244 <HAL_PCD_MspInit+0xac>)
 8002218:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800221c:	6353      	str	r3, [r2, #52]	; 0x34
 800221e:	2300      	movs	r3, #0
 8002220:	60fb      	str	r3, [r7, #12]
 8002222:	4b08      	ldr	r3, [pc, #32]	; (8002244 <HAL_PCD_MspInit+0xac>)
 8002224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002226:	4a07      	ldr	r2, [pc, #28]	; (8002244 <HAL_PCD_MspInit+0xac>)
 8002228:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800222c:	6453      	str	r3, [r2, #68]	; 0x44
 800222e:	4b05      	ldr	r3, [pc, #20]	; (8002244 <HAL_PCD_MspInit+0xac>)
 8002230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002232:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002236:	60fb      	str	r3, [r7, #12]
 8002238:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800223a:	bf00      	nop
 800223c:	3728      	adds	r7, #40	; 0x28
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	40023800 	.word	0x40023800
 8002248:	40020000 	.word	0x40020000

0800224c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800224c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002284 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002250:	480d      	ldr	r0, [pc, #52]	; (8002288 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002252:	490e      	ldr	r1, [pc, #56]	; (800228c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002254:	4a0e      	ldr	r2, [pc, #56]	; (8002290 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002256:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002258:	e002      	b.n	8002260 <LoopCopyDataInit>

0800225a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800225a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800225c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800225e:	3304      	adds	r3, #4

08002260 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002260:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002262:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002264:	d3f9      	bcc.n	800225a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002266:	4a0b      	ldr	r2, [pc, #44]	; (8002294 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002268:	4c0b      	ldr	r4, [pc, #44]	; (8002298 <LoopFillZerobss+0x26>)
  movs r3, #0
 800226a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800226c:	e001      	b.n	8002272 <LoopFillZerobss>

0800226e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800226e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002270:	3204      	adds	r2, #4

08002272 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002272:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002274:	d3fb      	bcc.n	800226e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002276:	f7ff fed5 	bl	8002024 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800227a:	f004 f989 	bl	8006590 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800227e:	f7ff fc85 	bl	8001b8c <main>
  bx  lr    
 8002282:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002284:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002288:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800228c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002290:	0800a1b8 	.word	0x0800a1b8
  ldr r2, =_sbss
 8002294:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002298:	20000920 	.word	0x20000920

0800229c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800229c:	e7fe      	b.n	800229c <ADC_IRQHandler>
	...

080022a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022a4:	4b0e      	ldr	r3, [pc, #56]	; (80022e0 <HAL_Init+0x40>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a0d      	ldr	r2, [pc, #52]	; (80022e0 <HAL_Init+0x40>)
 80022aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022b0:	4b0b      	ldr	r3, [pc, #44]	; (80022e0 <HAL_Init+0x40>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a0a      	ldr	r2, [pc, #40]	; (80022e0 <HAL_Init+0x40>)
 80022b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022bc:	4b08      	ldr	r3, [pc, #32]	; (80022e0 <HAL_Init+0x40>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a07      	ldr	r2, [pc, #28]	; (80022e0 <HAL_Init+0x40>)
 80022c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022c8:	2003      	movs	r0, #3
 80022ca:	f000 f94f 	bl	800256c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022ce:	2000      	movs	r0, #0
 80022d0:	f000 f808 	bl	80022e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022d4:	f7ff fd84 	bl	8001de0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022d8:	2300      	movs	r3, #0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	40023c00 	.word	0x40023c00

080022e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022ec:	4b12      	ldr	r3, [pc, #72]	; (8002338 <HAL_InitTick+0x54>)
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	4b12      	ldr	r3, [pc, #72]	; (800233c <HAL_InitTick+0x58>)
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	4619      	mov	r1, r3
 80022f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80022fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002302:	4618      	mov	r0, r3
 8002304:	f000 f967 	bl	80025d6 <HAL_SYSTICK_Config>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e00e      	b.n	8002330 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2b0f      	cmp	r3, #15
 8002316:	d80a      	bhi.n	800232e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002318:	2200      	movs	r2, #0
 800231a:	6879      	ldr	r1, [r7, #4]
 800231c:	f04f 30ff 	mov.w	r0, #4294967295
 8002320:	f000 f92f 	bl	8002582 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002324:	4a06      	ldr	r2, [pc, #24]	; (8002340 <HAL_InitTick+0x5c>)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800232a:	2300      	movs	r3, #0
 800232c:	e000      	b.n	8002330 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
}
 8002330:	4618      	mov	r0, r3
 8002332:	3708      	adds	r7, #8
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	20000000 	.word	0x20000000
 800233c:	20000008 	.word	0x20000008
 8002340:	20000004 	.word	0x20000004

08002344 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002348:	4b06      	ldr	r3, [pc, #24]	; (8002364 <HAL_IncTick+0x20>)
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	461a      	mov	r2, r3
 800234e:	4b06      	ldr	r3, [pc, #24]	; (8002368 <HAL_IncTick+0x24>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4413      	add	r3, r2
 8002354:	4a04      	ldr	r2, [pc, #16]	; (8002368 <HAL_IncTick+0x24>)
 8002356:	6013      	str	r3, [r2, #0]
}
 8002358:	bf00      	nop
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	20000008 	.word	0x20000008
 8002368:	200007d0 	.word	0x200007d0

0800236c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  return uwTick;
 8002370:	4b03      	ldr	r3, [pc, #12]	; (8002380 <HAL_GetTick+0x14>)
 8002372:	681b      	ldr	r3, [r3, #0]
}
 8002374:	4618      	mov	r0, r3
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	200007d0 	.word	0x200007d0

08002384 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800238c:	f7ff ffee 	bl	800236c <HAL_GetTick>
 8002390:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800239c:	d005      	beq.n	80023aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800239e:	4b0a      	ldr	r3, [pc, #40]	; (80023c8 <HAL_Delay+0x44>)
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	461a      	mov	r2, r3
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	4413      	add	r3, r2
 80023a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80023aa:	bf00      	nop
 80023ac:	f7ff ffde 	bl	800236c <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	68fa      	ldr	r2, [r7, #12]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d8f7      	bhi.n	80023ac <HAL_Delay+0x28>
  {
  }
}
 80023bc:	bf00      	nop
 80023be:	bf00      	nop
 80023c0:	3710      	adds	r7, #16
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	20000008 	.word	0x20000008

080023cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b085      	sub	sp, #20
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f003 0307 	and.w	r3, r3, #7
 80023da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023dc:	4b0c      	ldr	r3, [pc, #48]	; (8002410 <__NVIC_SetPriorityGrouping+0x44>)
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023e2:	68ba      	ldr	r2, [r7, #8]
 80023e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023e8:	4013      	ands	r3, r2
 80023ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023fe:	4a04      	ldr	r2, [pc, #16]	; (8002410 <__NVIC_SetPriorityGrouping+0x44>)
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	60d3      	str	r3, [r2, #12]
}
 8002404:	bf00      	nop
 8002406:	3714      	adds	r7, #20
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr
 8002410:	e000ed00 	.word	0xe000ed00

08002414 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002418:	4b04      	ldr	r3, [pc, #16]	; (800242c <__NVIC_GetPriorityGrouping+0x18>)
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	0a1b      	lsrs	r3, r3, #8
 800241e:	f003 0307 	and.w	r3, r3, #7
}
 8002422:	4618      	mov	r0, r3
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr
 800242c:	e000ed00 	.word	0xe000ed00

08002430 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	4603      	mov	r3, r0
 8002438:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800243a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800243e:	2b00      	cmp	r3, #0
 8002440:	db0b      	blt.n	800245a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002442:	79fb      	ldrb	r3, [r7, #7]
 8002444:	f003 021f 	and.w	r2, r3, #31
 8002448:	4907      	ldr	r1, [pc, #28]	; (8002468 <__NVIC_EnableIRQ+0x38>)
 800244a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800244e:	095b      	lsrs	r3, r3, #5
 8002450:	2001      	movs	r0, #1
 8002452:	fa00 f202 	lsl.w	r2, r0, r2
 8002456:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800245a:	bf00      	nop
 800245c:	370c      	adds	r7, #12
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	e000e100 	.word	0xe000e100

0800246c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	4603      	mov	r3, r0
 8002474:	6039      	str	r1, [r7, #0]
 8002476:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002478:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800247c:	2b00      	cmp	r3, #0
 800247e:	db0a      	blt.n	8002496 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	b2da      	uxtb	r2, r3
 8002484:	490c      	ldr	r1, [pc, #48]	; (80024b8 <__NVIC_SetPriority+0x4c>)
 8002486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800248a:	0112      	lsls	r2, r2, #4
 800248c:	b2d2      	uxtb	r2, r2
 800248e:	440b      	add	r3, r1
 8002490:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002494:	e00a      	b.n	80024ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	b2da      	uxtb	r2, r3
 800249a:	4908      	ldr	r1, [pc, #32]	; (80024bc <__NVIC_SetPriority+0x50>)
 800249c:	79fb      	ldrb	r3, [r7, #7]
 800249e:	f003 030f 	and.w	r3, r3, #15
 80024a2:	3b04      	subs	r3, #4
 80024a4:	0112      	lsls	r2, r2, #4
 80024a6:	b2d2      	uxtb	r2, r2
 80024a8:	440b      	add	r3, r1
 80024aa:	761a      	strb	r2, [r3, #24]
}
 80024ac:	bf00      	nop
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr
 80024b8:	e000e100 	.word	0xe000e100
 80024bc:	e000ed00 	.word	0xe000ed00

080024c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b089      	sub	sp, #36	; 0x24
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	60b9      	str	r1, [r7, #8]
 80024ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f003 0307 	and.w	r3, r3, #7
 80024d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	f1c3 0307 	rsb	r3, r3, #7
 80024da:	2b04      	cmp	r3, #4
 80024dc:	bf28      	it	cs
 80024de:	2304      	movcs	r3, #4
 80024e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	3304      	adds	r3, #4
 80024e6:	2b06      	cmp	r3, #6
 80024e8:	d902      	bls.n	80024f0 <NVIC_EncodePriority+0x30>
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	3b03      	subs	r3, #3
 80024ee:	e000      	b.n	80024f2 <NVIC_EncodePriority+0x32>
 80024f0:	2300      	movs	r3, #0
 80024f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024f4:	f04f 32ff 	mov.w	r2, #4294967295
 80024f8:	69bb      	ldr	r3, [r7, #24]
 80024fa:	fa02 f303 	lsl.w	r3, r2, r3
 80024fe:	43da      	mvns	r2, r3
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	401a      	ands	r2, r3
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002508:	f04f 31ff 	mov.w	r1, #4294967295
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	fa01 f303 	lsl.w	r3, r1, r3
 8002512:	43d9      	mvns	r1, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002518:	4313      	orrs	r3, r2
         );
}
 800251a:	4618      	mov	r0, r3
 800251c:	3724      	adds	r7, #36	; 0x24
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
	...

08002528 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	3b01      	subs	r3, #1
 8002534:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002538:	d301      	bcc.n	800253e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800253a:	2301      	movs	r3, #1
 800253c:	e00f      	b.n	800255e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800253e:	4a0a      	ldr	r2, [pc, #40]	; (8002568 <SysTick_Config+0x40>)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	3b01      	subs	r3, #1
 8002544:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002546:	210f      	movs	r1, #15
 8002548:	f04f 30ff 	mov.w	r0, #4294967295
 800254c:	f7ff ff8e 	bl	800246c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002550:	4b05      	ldr	r3, [pc, #20]	; (8002568 <SysTick_Config+0x40>)
 8002552:	2200      	movs	r2, #0
 8002554:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002556:	4b04      	ldr	r3, [pc, #16]	; (8002568 <SysTick_Config+0x40>)
 8002558:	2207      	movs	r2, #7
 800255a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3708      	adds	r7, #8
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	e000e010 	.word	0xe000e010

0800256c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f7ff ff29 	bl	80023cc <__NVIC_SetPriorityGrouping>
}
 800257a:	bf00      	nop
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}

08002582 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002582:	b580      	push	{r7, lr}
 8002584:	b086      	sub	sp, #24
 8002586:	af00      	add	r7, sp, #0
 8002588:	4603      	mov	r3, r0
 800258a:	60b9      	str	r1, [r7, #8]
 800258c:	607a      	str	r2, [r7, #4]
 800258e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002590:	2300      	movs	r3, #0
 8002592:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002594:	f7ff ff3e 	bl	8002414 <__NVIC_GetPriorityGrouping>
 8002598:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	68b9      	ldr	r1, [r7, #8]
 800259e:	6978      	ldr	r0, [r7, #20]
 80025a0:	f7ff ff8e 	bl	80024c0 <NVIC_EncodePriority>
 80025a4:	4602      	mov	r2, r0
 80025a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025aa:	4611      	mov	r1, r2
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7ff ff5d 	bl	800246c <__NVIC_SetPriority>
}
 80025b2:	bf00      	nop
 80025b4:	3718      	adds	r7, #24
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}

080025ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025ba:	b580      	push	{r7, lr}
 80025bc:	b082      	sub	sp, #8
 80025be:	af00      	add	r7, sp, #0
 80025c0:	4603      	mov	r3, r0
 80025c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7ff ff31 	bl	8002430 <__NVIC_EnableIRQ>
}
 80025ce:	bf00      	nop
 80025d0:	3708      	adds	r7, #8
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025d6:	b580      	push	{r7, lr}
 80025d8:	b082      	sub	sp, #8
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f7ff ffa2 	bl	8002528 <SysTick_Config>
 80025e4:	4603      	mov	r3, r0
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3708      	adds	r7, #8
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}

080025ee <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80025ee:	b580      	push	{r7, lr}
 80025f0:	b084      	sub	sp, #16
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025fa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80025fc:	f7ff feb6 	bl	800236c <HAL_GetTick>
 8002600:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002608:	b2db      	uxtb	r3, r3
 800260a:	2b02      	cmp	r3, #2
 800260c:	d008      	beq.n	8002620 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2280      	movs	r2, #128	; 0x80
 8002612:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2200      	movs	r2, #0
 8002618:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e052      	b.n	80026c6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f022 0216 	bic.w	r2, r2, #22
 800262e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	695a      	ldr	r2, [r3, #20]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800263e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002644:	2b00      	cmp	r3, #0
 8002646:	d103      	bne.n	8002650 <HAL_DMA_Abort+0x62>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800264c:	2b00      	cmp	r3, #0
 800264e:	d007      	beq.n	8002660 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f022 0208 	bic.w	r2, r2, #8
 800265e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f022 0201 	bic.w	r2, r2, #1
 800266e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002670:	e013      	b.n	800269a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002672:	f7ff fe7b 	bl	800236c <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	2b05      	cmp	r3, #5
 800267e:	d90c      	bls.n	800269a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2220      	movs	r2, #32
 8002684:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2203      	movs	r2, #3
 800268a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e015      	b.n	80026c6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0301 	and.w	r3, r3, #1
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d1e4      	bne.n	8002672 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ac:	223f      	movs	r2, #63	; 0x3f
 80026ae:	409a      	lsls	r2, r3
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3710      	adds	r7, #16
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}

080026ce <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80026ce:	b480      	push	{r7}
 80026d0:	b083      	sub	sp, #12
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d004      	beq.n	80026ec <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2280      	movs	r2, #128	; 0x80
 80026e6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e00c      	b.n	8002706 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2205      	movs	r2, #5
 80026f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f022 0201 	bic.w	r2, r2, #1
 8002702:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	370c      	adds	r7, #12
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
	...

08002714 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002714:	b480      	push	{r7}
 8002716:	b089      	sub	sp, #36	; 0x24
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800271e:	2300      	movs	r3, #0
 8002720:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002722:	2300      	movs	r3, #0
 8002724:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002726:	2300      	movs	r3, #0
 8002728:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800272a:	2300      	movs	r3, #0
 800272c:	61fb      	str	r3, [r7, #28]
 800272e:	e177      	b.n	8002a20 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002730:	2201      	movs	r2, #1
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	fa02 f303 	lsl.w	r3, r2, r3
 8002738:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	697a      	ldr	r2, [r7, #20]
 8002740:	4013      	ands	r3, r2
 8002742:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002744:	693a      	ldr	r2, [r7, #16]
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	429a      	cmp	r2, r3
 800274a:	f040 8166 	bne.w	8002a1a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f003 0303 	and.w	r3, r3, #3
 8002756:	2b01      	cmp	r3, #1
 8002758:	d005      	beq.n	8002766 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002762:	2b02      	cmp	r3, #2
 8002764:	d130      	bne.n	80027c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	005b      	lsls	r3, r3, #1
 8002770:	2203      	movs	r2, #3
 8002772:	fa02 f303 	lsl.w	r3, r2, r3
 8002776:	43db      	mvns	r3, r3
 8002778:	69ba      	ldr	r2, [r7, #24]
 800277a:	4013      	ands	r3, r2
 800277c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	68da      	ldr	r2, [r3, #12]
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	005b      	lsls	r3, r3, #1
 8002786:	fa02 f303 	lsl.w	r3, r2, r3
 800278a:	69ba      	ldr	r2, [r7, #24]
 800278c:	4313      	orrs	r3, r2
 800278e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	69ba      	ldr	r2, [r7, #24]
 8002794:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800279c:	2201      	movs	r2, #1
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	fa02 f303 	lsl.w	r3, r2, r3
 80027a4:	43db      	mvns	r3, r3
 80027a6:	69ba      	ldr	r2, [r7, #24]
 80027a8:	4013      	ands	r3, r2
 80027aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	091b      	lsrs	r3, r3, #4
 80027b2:	f003 0201 	and.w	r2, r3, #1
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	fa02 f303 	lsl.w	r3, r2, r3
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	4313      	orrs	r3, r2
 80027c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f003 0303 	and.w	r3, r3, #3
 80027d0:	2b03      	cmp	r3, #3
 80027d2:	d017      	beq.n	8002804 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	005b      	lsls	r3, r3, #1
 80027de:	2203      	movs	r2, #3
 80027e0:	fa02 f303 	lsl.w	r3, r2, r3
 80027e4:	43db      	mvns	r3, r3
 80027e6:	69ba      	ldr	r2, [r7, #24]
 80027e8:	4013      	ands	r3, r2
 80027ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	689a      	ldr	r2, [r3, #8]
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	005b      	lsls	r3, r3, #1
 80027f4:	fa02 f303 	lsl.w	r3, r2, r3
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f003 0303 	and.w	r3, r3, #3
 800280c:	2b02      	cmp	r3, #2
 800280e:	d123      	bne.n	8002858 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	08da      	lsrs	r2, r3, #3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	3208      	adds	r2, #8
 8002818:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800281c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	f003 0307 	and.w	r3, r3, #7
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	220f      	movs	r2, #15
 8002828:	fa02 f303 	lsl.w	r3, r2, r3
 800282c:	43db      	mvns	r3, r3
 800282e:	69ba      	ldr	r2, [r7, #24]
 8002830:	4013      	ands	r3, r2
 8002832:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	691a      	ldr	r2, [r3, #16]
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	f003 0307 	and.w	r3, r3, #7
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	fa02 f303 	lsl.w	r3, r2, r3
 8002844:	69ba      	ldr	r2, [r7, #24]
 8002846:	4313      	orrs	r3, r2
 8002848:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	08da      	lsrs	r2, r3, #3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	3208      	adds	r2, #8
 8002852:	69b9      	ldr	r1, [r7, #24]
 8002854:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	005b      	lsls	r3, r3, #1
 8002862:	2203      	movs	r2, #3
 8002864:	fa02 f303 	lsl.w	r3, r2, r3
 8002868:	43db      	mvns	r3, r3
 800286a:	69ba      	ldr	r2, [r7, #24]
 800286c:	4013      	ands	r3, r2
 800286e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f003 0203 	and.w	r2, r3, #3
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	005b      	lsls	r3, r3, #1
 800287c:	fa02 f303 	lsl.w	r3, r2, r3
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	4313      	orrs	r3, r2
 8002884:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	69ba      	ldr	r2, [r7, #24]
 800288a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002894:	2b00      	cmp	r3, #0
 8002896:	f000 80c0 	beq.w	8002a1a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800289a:	2300      	movs	r3, #0
 800289c:	60fb      	str	r3, [r7, #12]
 800289e:	4b66      	ldr	r3, [pc, #408]	; (8002a38 <HAL_GPIO_Init+0x324>)
 80028a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a2:	4a65      	ldr	r2, [pc, #404]	; (8002a38 <HAL_GPIO_Init+0x324>)
 80028a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028a8:	6453      	str	r3, [r2, #68]	; 0x44
 80028aa:	4b63      	ldr	r3, [pc, #396]	; (8002a38 <HAL_GPIO_Init+0x324>)
 80028ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028b2:	60fb      	str	r3, [r7, #12]
 80028b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028b6:	4a61      	ldr	r2, [pc, #388]	; (8002a3c <HAL_GPIO_Init+0x328>)
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	089b      	lsrs	r3, r3, #2
 80028bc:	3302      	adds	r3, #2
 80028be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	f003 0303 	and.w	r3, r3, #3
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	220f      	movs	r2, #15
 80028ce:	fa02 f303 	lsl.w	r3, r2, r3
 80028d2:	43db      	mvns	r3, r3
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	4013      	ands	r3, r2
 80028d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4a58      	ldr	r2, [pc, #352]	; (8002a40 <HAL_GPIO_Init+0x32c>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d037      	beq.n	8002952 <HAL_GPIO_Init+0x23e>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a57      	ldr	r2, [pc, #348]	; (8002a44 <HAL_GPIO_Init+0x330>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d031      	beq.n	800294e <HAL_GPIO_Init+0x23a>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4a56      	ldr	r2, [pc, #344]	; (8002a48 <HAL_GPIO_Init+0x334>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d02b      	beq.n	800294a <HAL_GPIO_Init+0x236>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4a55      	ldr	r2, [pc, #340]	; (8002a4c <HAL_GPIO_Init+0x338>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d025      	beq.n	8002946 <HAL_GPIO_Init+0x232>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4a54      	ldr	r2, [pc, #336]	; (8002a50 <HAL_GPIO_Init+0x33c>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d01f      	beq.n	8002942 <HAL_GPIO_Init+0x22e>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a53      	ldr	r2, [pc, #332]	; (8002a54 <HAL_GPIO_Init+0x340>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d019      	beq.n	800293e <HAL_GPIO_Init+0x22a>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a52      	ldr	r2, [pc, #328]	; (8002a58 <HAL_GPIO_Init+0x344>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d013      	beq.n	800293a <HAL_GPIO_Init+0x226>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a51      	ldr	r2, [pc, #324]	; (8002a5c <HAL_GPIO_Init+0x348>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d00d      	beq.n	8002936 <HAL_GPIO_Init+0x222>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a50      	ldr	r2, [pc, #320]	; (8002a60 <HAL_GPIO_Init+0x34c>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d007      	beq.n	8002932 <HAL_GPIO_Init+0x21e>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a4f      	ldr	r2, [pc, #316]	; (8002a64 <HAL_GPIO_Init+0x350>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d101      	bne.n	800292e <HAL_GPIO_Init+0x21a>
 800292a:	2309      	movs	r3, #9
 800292c:	e012      	b.n	8002954 <HAL_GPIO_Init+0x240>
 800292e:	230a      	movs	r3, #10
 8002930:	e010      	b.n	8002954 <HAL_GPIO_Init+0x240>
 8002932:	2308      	movs	r3, #8
 8002934:	e00e      	b.n	8002954 <HAL_GPIO_Init+0x240>
 8002936:	2307      	movs	r3, #7
 8002938:	e00c      	b.n	8002954 <HAL_GPIO_Init+0x240>
 800293a:	2306      	movs	r3, #6
 800293c:	e00a      	b.n	8002954 <HAL_GPIO_Init+0x240>
 800293e:	2305      	movs	r3, #5
 8002940:	e008      	b.n	8002954 <HAL_GPIO_Init+0x240>
 8002942:	2304      	movs	r3, #4
 8002944:	e006      	b.n	8002954 <HAL_GPIO_Init+0x240>
 8002946:	2303      	movs	r3, #3
 8002948:	e004      	b.n	8002954 <HAL_GPIO_Init+0x240>
 800294a:	2302      	movs	r3, #2
 800294c:	e002      	b.n	8002954 <HAL_GPIO_Init+0x240>
 800294e:	2301      	movs	r3, #1
 8002950:	e000      	b.n	8002954 <HAL_GPIO_Init+0x240>
 8002952:	2300      	movs	r3, #0
 8002954:	69fa      	ldr	r2, [r7, #28]
 8002956:	f002 0203 	and.w	r2, r2, #3
 800295a:	0092      	lsls	r2, r2, #2
 800295c:	4093      	lsls	r3, r2
 800295e:	69ba      	ldr	r2, [r7, #24]
 8002960:	4313      	orrs	r3, r2
 8002962:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002964:	4935      	ldr	r1, [pc, #212]	; (8002a3c <HAL_GPIO_Init+0x328>)
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	089b      	lsrs	r3, r3, #2
 800296a:	3302      	adds	r3, #2
 800296c:	69ba      	ldr	r2, [r7, #24]
 800296e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002972:	4b3d      	ldr	r3, [pc, #244]	; (8002a68 <HAL_GPIO_Init+0x354>)
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	43db      	mvns	r3, r3
 800297c:	69ba      	ldr	r2, [r7, #24]
 800297e:	4013      	ands	r3, r2
 8002980:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d003      	beq.n	8002996 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800298e:	69ba      	ldr	r2, [r7, #24]
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	4313      	orrs	r3, r2
 8002994:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002996:	4a34      	ldr	r2, [pc, #208]	; (8002a68 <HAL_GPIO_Init+0x354>)
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800299c:	4b32      	ldr	r3, [pc, #200]	; (8002a68 <HAL_GPIO_Init+0x354>)
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	43db      	mvns	r3, r3
 80029a6:	69ba      	ldr	r2, [r7, #24]
 80029a8:	4013      	ands	r3, r2
 80029aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d003      	beq.n	80029c0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80029b8:	69ba      	ldr	r2, [r7, #24]
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	4313      	orrs	r3, r2
 80029be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029c0:	4a29      	ldr	r2, [pc, #164]	; (8002a68 <HAL_GPIO_Init+0x354>)
 80029c2:	69bb      	ldr	r3, [r7, #24]
 80029c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029c6:	4b28      	ldr	r3, [pc, #160]	; (8002a68 <HAL_GPIO_Init+0x354>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	43db      	mvns	r3, r3
 80029d0:	69ba      	ldr	r2, [r7, #24]
 80029d2:	4013      	ands	r3, r2
 80029d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d003      	beq.n	80029ea <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80029e2:	69ba      	ldr	r2, [r7, #24]
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029ea:	4a1f      	ldr	r2, [pc, #124]	; (8002a68 <HAL_GPIO_Init+0x354>)
 80029ec:	69bb      	ldr	r3, [r7, #24]
 80029ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029f0:	4b1d      	ldr	r3, [pc, #116]	; (8002a68 <HAL_GPIO_Init+0x354>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	43db      	mvns	r3, r3
 80029fa:	69ba      	ldr	r2, [r7, #24]
 80029fc:	4013      	ands	r3, r2
 80029fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d003      	beq.n	8002a14 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002a0c:	69ba      	ldr	r2, [r7, #24]
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a14:	4a14      	ldr	r2, [pc, #80]	; (8002a68 <HAL_GPIO_Init+0x354>)
 8002a16:	69bb      	ldr	r3, [r7, #24]
 8002a18:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	3301      	adds	r3, #1
 8002a1e:	61fb      	str	r3, [r7, #28]
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	2b0f      	cmp	r3, #15
 8002a24:	f67f ae84 	bls.w	8002730 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a28:	bf00      	nop
 8002a2a:	bf00      	nop
 8002a2c:	3724      	adds	r7, #36	; 0x24
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	40023800 	.word	0x40023800
 8002a3c:	40013800 	.word	0x40013800
 8002a40:	40020000 	.word	0x40020000
 8002a44:	40020400 	.word	0x40020400
 8002a48:	40020800 	.word	0x40020800
 8002a4c:	40020c00 	.word	0x40020c00
 8002a50:	40021000 	.word	0x40021000
 8002a54:	40021400 	.word	0x40021400
 8002a58:	40021800 	.word	0x40021800
 8002a5c:	40021c00 	.word	0x40021c00
 8002a60:	40022000 	.word	0x40022000
 8002a64:	40022400 	.word	0x40022400
 8002a68:	40013c00 	.word	0x40013c00

08002a6c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b085      	sub	sp, #20
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	460b      	mov	r3, r1
 8002a76:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	691a      	ldr	r2, [r3, #16]
 8002a7c:	887b      	ldrh	r3, [r7, #2]
 8002a7e:	4013      	ands	r3, r2
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d002      	beq.n	8002a8a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a84:	2301      	movs	r3, #1
 8002a86:	73fb      	strb	r3, [r7, #15]
 8002a88:	e001      	b.n	8002a8e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3714      	adds	r7, #20
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr

08002a9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	460b      	mov	r3, r1
 8002aa6:	807b      	strh	r3, [r7, #2]
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002aac:	787b      	ldrb	r3, [r7, #1]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d003      	beq.n	8002aba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ab2:	887a      	ldrh	r2, [r7, #2]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ab8:	e003      	b.n	8002ac2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002aba:	887b      	ldrh	r3, [r7, #2]
 8002abc:	041a      	lsls	r2, r3, #16
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	619a      	str	r2, [r3, #24]
}
 8002ac2:	bf00      	nop
 8002ac4:	370c      	adds	r7, #12
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr

08002ace <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002ace:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ad0:	b08f      	sub	sp, #60	; 0x3c
 8002ad2:	af0a      	add	r7, sp, #40	; 0x28
 8002ad4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d101      	bne.n	8002ae0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e10f      	b.n	8002d00 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d106      	bne.n	8002b00 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f7ff fb4c 	bl	8002198 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2203      	movs	r2, #3
 8002b04:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d102      	bne.n	8002b1a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2200      	movs	r2, #0
 8002b18:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f002 fa13 	bl	8004f4a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	603b      	str	r3, [r7, #0]
 8002b2a:	687e      	ldr	r6, [r7, #4]
 8002b2c:	466d      	mov	r5, sp
 8002b2e:	f106 0410 	add.w	r4, r6, #16
 8002b32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b3a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b3e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b42:	1d33      	adds	r3, r6, #4
 8002b44:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b46:	6838      	ldr	r0, [r7, #0]
 8002b48:	f002 f99e 	bl	8004e88 <USB_CoreInit>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d005      	beq.n	8002b5e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2202      	movs	r2, #2
 8002b56:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e0d0      	b.n	8002d00 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2100      	movs	r1, #0
 8002b64:	4618      	mov	r0, r3
 8002b66:	f002 fa01 	bl	8004f6c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	73fb      	strb	r3, [r7, #15]
 8002b6e:	e04a      	b.n	8002c06 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002b70:	7bfa      	ldrb	r2, [r7, #15]
 8002b72:	6879      	ldr	r1, [r7, #4]
 8002b74:	4613      	mov	r3, r2
 8002b76:	00db      	lsls	r3, r3, #3
 8002b78:	4413      	add	r3, r2
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	440b      	add	r3, r1
 8002b7e:	333d      	adds	r3, #61	; 0x3d
 8002b80:	2201      	movs	r2, #1
 8002b82:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002b84:	7bfa      	ldrb	r2, [r7, #15]
 8002b86:	6879      	ldr	r1, [r7, #4]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	00db      	lsls	r3, r3, #3
 8002b8c:	4413      	add	r3, r2
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	440b      	add	r3, r1
 8002b92:	333c      	adds	r3, #60	; 0x3c
 8002b94:	7bfa      	ldrb	r2, [r7, #15]
 8002b96:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002b98:	7bfa      	ldrb	r2, [r7, #15]
 8002b9a:	7bfb      	ldrb	r3, [r7, #15]
 8002b9c:	b298      	uxth	r0, r3
 8002b9e:	6879      	ldr	r1, [r7, #4]
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	00db      	lsls	r3, r3, #3
 8002ba4:	4413      	add	r3, r2
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	440b      	add	r3, r1
 8002baa:	3344      	adds	r3, #68	; 0x44
 8002bac:	4602      	mov	r2, r0
 8002bae:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002bb0:	7bfa      	ldrb	r2, [r7, #15]
 8002bb2:	6879      	ldr	r1, [r7, #4]
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	00db      	lsls	r3, r3, #3
 8002bb8:	4413      	add	r3, r2
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	440b      	add	r3, r1
 8002bbe:	3340      	adds	r3, #64	; 0x40
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002bc4:	7bfa      	ldrb	r2, [r7, #15]
 8002bc6:	6879      	ldr	r1, [r7, #4]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	4413      	add	r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	440b      	add	r3, r1
 8002bd2:	3348      	adds	r3, #72	; 0x48
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002bd8:	7bfa      	ldrb	r2, [r7, #15]
 8002bda:	6879      	ldr	r1, [r7, #4]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	00db      	lsls	r3, r3, #3
 8002be0:	4413      	add	r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	440b      	add	r3, r1
 8002be6:	334c      	adds	r3, #76	; 0x4c
 8002be8:	2200      	movs	r2, #0
 8002bea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002bec:	7bfa      	ldrb	r2, [r7, #15]
 8002bee:	6879      	ldr	r1, [r7, #4]
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	00db      	lsls	r3, r3, #3
 8002bf4:	4413      	add	r3, r2
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	440b      	add	r3, r1
 8002bfa:	3354      	adds	r3, #84	; 0x54
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c00:	7bfb      	ldrb	r3, [r7, #15]
 8002c02:	3301      	adds	r3, #1
 8002c04:	73fb      	strb	r3, [r7, #15]
 8002c06:	7bfa      	ldrb	r2, [r7, #15]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d3af      	bcc.n	8002b70 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c10:	2300      	movs	r3, #0
 8002c12:	73fb      	strb	r3, [r7, #15]
 8002c14:	e044      	b.n	8002ca0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c16:	7bfa      	ldrb	r2, [r7, #15]
 8002c18:	6879      	ldr	r1, [r7, #4]
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	00db      	lsls	r3, r3, #3
 8002c1e:	4413      	add	r3, r2
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	440b      	add	r3, r1
 8002c24:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002c28:	2200      	movs	r2, #0
 8002c2a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002c2c:	7bfa      	ldrb	r2, [r7, #15]
 8002c2e:	6879      	ldr	r1, [r7, #4]
 8002c30:	4613      	mov	r3, r2
 8002c32:	00db      	lsls	r3, r3, #3
 8002c34:	4413      	add	r3, r2
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	440b      	add	r3, r1
 8002c3a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002c3e:	7bfa      	ldrb	r2, [r7, #15]
 8002c40:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c42:	7bfa      	ldrb	r2, [r7, #15]
 8002c44:	6879      	ldr	r1, [r7, #4]
 8002c46:	4613      	mov	r3, r2
 8002c48:	00db      	lsls	r3, r3, #3
 8002c4a:	4413      	add	r3, r2
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	440b      	add	r3, r1
 8002c50:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002c54:	2200      	movs	r2, #0
 8002c56:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002c58:	7bfa      	ldrb	r2, [r7, #15]
 8002c5a:	6879      	ldr	r1, [r7, #4]
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	00db      	lsls	r3, r3, #3
 8002c60:	4413      	add	r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	440b      	add	r3, r1
 8002c66:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c6e:	7bfa      	ldrb	r2, [r7, #15]
 8002c70:	6879      	ldr	r1, [r7, #4]
 8002c72:	4613      	mov	r3, r2
 8002c74:	00db      	lsls	r3, r3, #3
 8002c76:	4413      	add	r3, r2
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	440b      	add	r3, r1
 8002c7c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002c80:	2200      	movs	r2, #0
 8002c82:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c84:	7bfa      	ldrb	r2, [r7, #15]
 8002c86:	6879      	ldr	r1, [r7, #4]
 8002c88:	4613      	mov	r3, r2
 8002c8a:	00db      	lsls	r3, r3, #3
 8002c8c:	4413      	add	r3, r2
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	440b      	add	r3, r1
 8002c92:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002c96:	2200      	movs	r2, #0
 8002c98:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c9a:	7bfb      	ldrb	r3, [r7, #15]
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	73fb      	strb	r3, [r7, #15]
 8002ca0:	7bfa      	ldrb	r2, [r7, #15]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d3b5      	bcc.n	8002c16 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	603b      	str	r3, [r7, #0]
 8002cb0:	687e      	ldr	r6, [r7, #4]
 8002cb2:	466d      	mov	r5, sp
 8002cb4:	f106 0410 	add.w	r4, r6, #16
 8002cb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cbc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cbe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cc0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002cc4:	e885 0003 	stmia.w	r5, {r0, r1}
 8002cc8:	1d33      	adds	r3, r6, #4
 8002cca:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ccc:	6838      	ldr	r0, [r7, #0]
 8002cce:	f002 f999 	bl	8005004 <USB_DevInit>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d005      	beq.n	8002ce4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2202      	movs	r2, #2
 8002cdc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e00d      	b.n	8002d00 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f002 fb64 	bl	80053c6 <USB_DevDisconnect>

  return HAL_OK;
 8002cfe:	2300      	movs	r3, #0
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3714      	adds	r7, #20
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d08 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b086      	sub	sp, #24
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d101      	bne.n	8002d1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e267      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d075      	beq.n	8002e12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d26:	4b88      	ldr	r3, [pc, #544]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	f003 030c 	and.w	r3, r3, #12
 8002d2e:	2b04      	cmp	r3, #4
 8002d30:	d00c      	beq.n	8002d4c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d32:	4b85      	ldr	r3, [pc, #532]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d3a:	2b08      	cmp	r3, #8
 8002d3c:	d112      	bne.n	8002d64 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d3e:	4b82      	ldr	r3, [pc, #520]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d4a:	d10b      	bne.n	8002d64 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d4c:	4b7e      	ldr	r3, [pc, #504]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d05b      	beq.n	8002e10 <HAL_RCC_OscConfig+0x108>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d157      	bne.n	8002e10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e242      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d6c:	d106      	bne.n	8002d7c <HAL_RCC_OscConfig+0x74>
 8002d6e:	4b76      	ldr	r3, [pc, #472]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a75      	ldr	r2, [pc, #468]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002d74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d78:	6013      	str	r3, [r2, #0]
 8002d7a:	e01d      	b.n	8002db8 <HAL_RCC_OscConfig+0xb0>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d84:	d10c      	bne.n	8002da0 <HAL_RCC_OscConfig+0x98>
 8002d86:	4b70      	ldr	r3, [pc, #448]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a6f      	ldr	r2, [pc, #444]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002d8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d90:	6013      	str	r3, [r2, #0]
 8002d92:	4b6d      	ldr	r3, [pc, #436]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a6c      	ldr	r2, [pc, #432]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002d98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d9c:	6013      	str	r3, [r2, #0]
 8002d9e:	e00b      	b.n	8002db8 <HAL_RCC_OscConfig+0xb0>
 8002da0:	4b69      	ldr	r3, [pc, #420]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a68      	ldr	r2, [pc, #416]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002da6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002daa:	6013      	str	r3, [r2, #0]
 8002dac:	4b66      	ldr	r3, [pc, #408]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a65      	ldr	r2, [pc, #404]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002db2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002db6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d013      	beq.n	8002de8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc0:	f7ff fad4 	bl	800236c <HAL_GetTick>
 8002dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dc6:	e008      	b.n	8002dda <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dc8:	f7ff fad0 	bl	800236c <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	2b64      	cmp	r3, #100	; 0x64
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e207      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dda:	4b5b      	ldr	r3, [pc, #364]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d0f0      	beq.n	8002dc8 <HAL_RCC_OscConfig+0xc0>
 8002de6:	e014      	b.n	8002e12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de8:	f7ff fac0 	bl	800236c <HAL_GetTick>
 8002dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dee:	e008      	b.n	8002e02 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002df0:	f7ff fabc 	bl	800236c <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	2b64      	cmp	r3, #100	; 0x64
 8002dfc:	d901      	bls.n	8002e02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e1f3      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e02:	4b51      	ldr	r3, [pc, #324]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d1f0      	bne.n	8002df0 <HAL_RCC_OscConfig+0xe8>
 8002e0e:	e000      	b.n	8002e12 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0302 	and.w	r3, r3, #2
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d063      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e1e:	4b4a      	ldr	r3, [pc, #296]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	f003 030c 	and.w	r3, r3, #12
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d00b      	beq.n	8002e42 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e2a:	4b47      	ldr	r3, [pc, #284]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e32:	2b08      	cmp	r3, #8
 8002e34:	d11c      	bne.n	8002e70 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e36:	4b44      	ldr	r3, [pc, #272]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d116      	bne.n	8002e70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e42:	4b41      	ldr	r3, [pc, #260]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0302 	and.w	r3, r3, #2
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d005      	beq.n	8002e5a <HAL_RCC_OscConfig+0x152>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d001      	beq.n	8002e5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e1c7      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e5a:	4b3b      	ldr	r3, [pc, #236]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	691b      	ldr	r3, [r3, #16]
 8002e66:	00db      	lsls	r3, r3, #3
 8002e68:	4937      	ldr	r1, [pc, #220]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e6e:	e03a      	b.n	8002ee6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d020      	beq.n	8002eba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e78:	4b34      	ldr	r3, [pc, #208]	; (8002f4c <HAL_RCC_OscConfig+0x244>)
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e7e:	f7ff fa75 	bl	800236c <HAL_GetTick>
 8002e82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e84:	e008      	b.n	8002e98 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e86:	f7ff fa71 	bl	800236c <HAL_GetTick>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d901      	bls.n	8002e98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e94:	2303      	movs	r3, #3
 8002e96:	e1a8      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e98:	4b2b      	ldr	r3, [pc, #172]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0302 	and.w	r3, r3, #2
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d0f0      	beq.n	8002e86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ea4:	4b28      	ldr	r3, [pc, #160]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	691b      	ldr	r3, [r3, #16]
 8002eb0:	00db      	lsls	r3, r3, #3
 8002eb2:	4925      	ldr	r1, [pc, #148]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	600b      	str	r3, [r1, #0]
 8002eb8:	e015      	b.n	8002ee6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002eba:	4b24      	ldr	r3, [pc, #144]	; (8002f4c <HAL_RCC_OscConfig+0x244>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec0:	f7ff fa54 	bl	800236c <HAL_GetTick>
 8002ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ec6:	e008      	b.n	8002eda <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ec8:	f7ff fa50 	bl	800236c <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d901      	bls.n	8002eda <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e187      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eda:	4b1b      	ldr	r3, [pc, #108]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0302 	and.w	r3, r3, #2
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d1f0      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0308 	and.w	r3, r3, #8
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d036      	beq.n	8002f60 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	695b      	ldr	r3, [r3, #20]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d016      	beq.n	8002f28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002efa:	4b15      	ldr	r3, [pc, #84]	; (8002f50 <HAL_RCC_OscConfig+0x248>)
 8002efc:	2201      	movs	r2, #1
 8002efe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f00:	f7ff fa34 	bl	800236c <HAL_GetTick>
 8002f04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f06:	e008      	b.n	8002f1a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f08:	f7ff fa30 	bl	800236c <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d901      	bls.n	8002f1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e167      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f1a:	4b0b      	ldr	r3, [pc, #44]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002f1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f1e:	f003 0302 	and.w	r3, r3, #2
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d0f0      	beq.n	8002f08 <HAL_RCC_OscConfig+0x200>
 8002f26:	e01b      	b.n	8002f60 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f28:	4b09      	ldr	r3, [pc, #36]	; (8002f50 <HAL_RCC_OscConfig+0x248>)
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f2e:	f7ff fa1d 	bl	800236c <HAL_GetTick>
 8002f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f34:	e00e      	b.n	8002f54 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f36:	f7ff fa19 	bl	800236c <HAL_GetTick>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d907      	bls.n	8002f54 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e150      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
 8002f48:	40023800 	.word	0x40023800
 8002f4c:	42470000 	.word	0x42470000
 8002f50:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f54:	4b88      	ldr	r3, [pc, #544]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 8002f56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f58:	f003 0302 	and.w	r3, r3, #2
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d1ea      	bne.n	8002f36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0304 	and.w	r3, r3, #4
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	f000 8097 	beq.w	800309c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f72:	4b81      	ldr	r3, [pc, #516]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 8002f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d10f      	bne.n	8002f9e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f7e:	2300      	movs	r3, #0
 8002f80:	60bb      	str	r3, [r7, #8]
 8002f82:	4b7d      	ldr	r3, [pc, #500]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 8002f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f86:	4a7c      	ldr	r2, [pc, #496]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 8002f88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f8c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f8e:	4b7a      	ldr	r3, [pc, #488]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 8002f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f96:	60bb      	str	r3, [r7, #8]
 8002f98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f9e:	4b77      	ldr	r3, [pc, #476]	; (800317c <HAL_RCC_OscConfig+0x474>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d118      	bne.n	8002fdc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002faa:	4b74      	ldr	r3, [pc, #464]	; (800317c <HAL_RCC_OscConfig+0x474>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a73      	ldr	r2, [pc, #460]	; (800317c <HAL_RCC_OscConfig+0x474>)
 8002fb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fb6:	f7ff f9d9 	bl	800236c <HAL_GetTick>
 8002fba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fbc:	e008      	b.n	8002fd0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fbe:	f7ff f9d5 	bl	800236c <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d901      	bls.n	8002fd0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	e10c      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fd0:	4b6a      	ldr	r3, [pc, #424]	; (800317c <HAL_RCC_OscConfig+0x474>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d0f0      	beq.n	8002fbe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d106      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x2ea>
 8002fe4:	4b64      	ldr	r3, [pc, #400]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 8002fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe8:	4a63      	ldr	r2, [pc, #396]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 8002fea:	f043 0301 	orr.w	r3, r3, #1
 8002fee:	6713      	str	r3, [r2, #112]	; 0x70
 8002ff0:	e01c      	b.n	800302c <HAL_RCC_OscConfig+0x324>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	2b05      	cmp	r3, #5
 8002ff8:	d10c      	bne.n	8003014 <HAL_RCC_OscConfig+0x30c>
 8002ffa:	4b5f      	ldr	r3, [pc, #380]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 8002ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ffe:	4a5e      	ldr	r2, [pc, #376]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 8003000:	f043 0304 	orr.w	r3, r3, #4
 8003004:	6713      	str	r3, [r2, #112]	; 0x70
 8003006:	4b5c      	ldr	r3, [pc, #368]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 8003008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800300a:	4a5b      	ldr	r2, [pc, #364]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 800300c:	f043 0301 	orr.w	r3, r3, #1
 8003010:	6713      	str	r3, [r2, #112]	; 0x70
 8003012:	e00b      	b.n	800302c <HAL_RCC_OscConfig+0x324>
 8003014:	4b58      	ldr	r3, [pc, #352]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 8003016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003018:	4a57      	ldr	r2, [pc, #348]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 800301a:	f023 0301 	bic.w	r3, r3, #1
 800301e:	6713      	str	r3, [r2, #112]	; 0x70
 8003020:	4b55      	ldr	r3, [pc, #340]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 8003022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003024:	4a54      	ldr	r2, [pc, #336]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 8003026:	f023 0304 	bic.w	r3, r3, #4
 800302a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d015      	beq.n	8003060 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003034:	f7ff f99a 	bl	800236c <HAL_GetTick>
 8003038:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800303a:	e00a      	b.n	8003052 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800303c:	f7ff f996 	bl	800236c <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	f241 3288 	movw	r2, #5000	; 0x1388
 800304a:	4293      	cmp	r3, r2
 800304c:	d901      	bls.n	8003052 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e0cb      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003052:	4b49      	ldr	r3, [pc, #292]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 8003054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003056:	f003 0302 	and.w	r3, r3, #2
 800305a:	2b00      	cmp	r3, #0
 800305c:	d0ee      	beq.n	800303c <HAL_RCC_OscConfig+0x334>
 800305e:	e014      	b.n	800308a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003060:	f7ff f984 	bl	800236c <HAL_GetTick>
 8003064:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003066:	e00a      	b.n	800307e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003068:	f7ff f980 	bl	800236c <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	f241 3288 	movw	r2, #5000	; 0x1388
 8003076:	4293      	cmp	r3, r2
 8003078:	d901      	bls.n	800307e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e0b5      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800307e:	4b3e      	ldr	r3, [pc, #248]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 8003080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003082:	f003 0302 	and.w	r3, r3, #2
 8003086:	2b00      	cmp	r3, #0
 8003088:	d1ee      	bne.n	8003068 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800308a:	7dfb      	ldrb	r3, [r7, #23]
 800308c:	2b01      	cmp	r3, #1
 800308e:	d105      	bne.n	800309c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003090:	4b39      	ldr	r3, [pc, #228]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 8003092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003094:	4a38      	ldr	r2, [pc, #224]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 8003096:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800309a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	699b      	ldr	r3, [r3, #24]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	f000 80a1 	beq.w	80031e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030a6:	4b34      	ldr	r3, [pc, #208]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f003 030c 	and.w	r3, r3, #12
 80030ae:	2b08      	cmp	r3, #8
 80030b0:	d05c      	beq.n	800316c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	699b      	ldr	r3, [r3, #24]
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d141      	bne.n	800313e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030ba:	4b31      	ldr	r3, [pc, #196]	; (8003180 <HAL_RCC_OscConfig+0x478>)
 80030bc:	2200      	movs	r2, #0
 80030be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c0:	f7ff f954 	bl	800236c <HAL_GetTick>
 80030c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030c6:	e008      	b.n	80030da <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030c8:	f7ff f950 	bl	800236c <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d901      	bls.n	80030da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e087      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030da:	4b27      	ldr	r3, [pc, #156]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d1f0      	bne.n	80030c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	69da      	ldr	r2, [r3, #28]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a1b      	ldr	r3, [r3, #32]
 80030ee:	431a      	orrs	r2, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f4:	019b      	lsls	r3, r3, #6
 80030f6:	431a      	orrs	r2, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030fc:	085b      	lsrs	r3, r3, #1
 80030fe:	3b01      	subs	r3, #1
 8003100:	041b      	lsls	r3, r3, #16
 8003102:	431a      	orrs	r2, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003108:	061b      	lsls	r3, r3, #24
 800310a:	491b      	ldr	r1, [pc, #108]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 800310c:	4313      	orrs	r3, r2
 800310e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003110:	4b1b      	ldr	r3, [pc, #108]	; (8003180 <HAL_RCC_OscConfig+0x478>)
 8003112:	2201      	movs	r2, #1
 8003114:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003116:	f7ff f929 	bl	800236c <HAL_GetTick>
 800311a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800311c:	e008      	b.n	8003130 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800311e:	f7ff f925 	bl	800236c <HAL_GetTick>
 8003122:	4602      	mov	r2, r0
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	2b02      	cmp	r3, #2
 800312a:	d901      	bls.n	8003130 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800312c:	2303      	movs	r3, #3
 800312e:	e05c      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003130:	4b11      	ldr	r3, [pc, #68]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d0f0      	beq.n	800311e <HAL_RCC_OscConfig+0x416>
 800313c:	e054      	b.n	80031e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800313e:	4b10      	ldr	r3, [pc, #64]	; (8003180 <HAL_RCC_OscConfig+0x478>)
 8003140:	2200      	movs	r2, #0
 8003142:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003144:	f7ff f912 	bl	800236c <HAL_GetTick>
 8003148:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800314a:	e008      	b.n	800315e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800314c:	f7ff f90e 	bl	800236c <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	2b02      	cmp	r3, #2
 8003158:	d901      	bls.n	800315e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e045      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800315e:	4b06      	ldr	r3, [pc, #24]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d1f0      	bne.n	800314c <HAL_RCC_OscConfig+0x444>
 800316a:	e03d      	b.n	80031e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	699b      	ldr	r3, [r3, #24]
 8003170:	2b01      	cmp	r3, #1
 8003172:	d107      	bne.n	8003184 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e038      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
 8003178:	40023800 	.word	0x40023800
 800317c:	40007000 	.word	0x40007000
 8003180:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003184:	4b1b      	ldr	r3, [pc, #108]	; (80031f4 <HAL_RCC_OscConfig+0x4ec>)
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	699b      	ldr	r3, [r3, #24]
 800318e:	2b01      	cmp	r3, #1
 8003190:	d028      	beq.n	80031e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800319c:	429a      	cmp	r2, r3
 800319e:	d121      	bne.n	80031e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d11a      	bne.n	80031e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031ae:	68fa      	ldr	r2, [r7, #12]
 80031b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80031b4:	4013      	ands	r3, r2
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80031ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031bc:	4293      	cmp	r3, r2
 80031be:	d111      	bne.n	80031e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ca:	085b      	lsrs	r3, r3, #1
 80031cc:	3b01      	subs	r3, #1
 80031ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d107      	bne.n	80031e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d001      	beq.n	80031e8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e000      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3718      	adds	r7, #24
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	40023800 	.word	0x40023800

080031f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d101      	bne.n	800320c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e0cc      	b.n	80033a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800320c:	4b68      	ldr	r3, [pc, #416]	; (80033b0 <HAL_RCC_ClockConfig+0x1b8>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 030f 	and.w	r3, r3, #15
 8003214:	683a      	ldr	r2, [r7, #0]
 8003216:	429a      	cmp	r2, r3
 8003218:	d90c      	bls.n	8003234 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800321a:	4b65      	ldr	r3, [pc, #404]	; (80033b0 <HAL_RCC_ClockConfig+0x1b8>)
 800321c:	683a      	ldr	r2, [r7, #0]
 800321e:	b2d2      	uxtb	r2, r2
 8003220:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003222:	4b63      	ldr	r3, [pc, #396]	; (80033b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 030f 	and.w	r3, r3, #15
 800322a:	683a      	ldr	r2, [r7, #0]
 800322c:	429a      	cmp	r2, r3
 800322e:	d001      	beq.n	8003234 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e0b8      	b.n	80033a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0302 	and.w	r3, r3, #2
 800323c:	2b00      	cmp	r3, #0
 800323e:	d020      	beq.n	8003282 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0304 	and.w	r3, r3, #4
 8003248:	2b00      	cmp	r3, #0
 800324a:	d005      	beq.n	8003258 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800324c:	4b59      	ldr	r3, [pc, #356]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	4a58      	ldr	r2, [pc, #352]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003252:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003256:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0308 	and.w	r3, r3, #8
 8003260:	2b00      	cmp	r3, #0
 8003262:	d005      	beq.n	8003270 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003264:	4b53      	ldr	r3, [pc, #332]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	4a52      	ldr	r2, [pc, #328]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 800326a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800326e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003270:	4b50      	ldr	r3, [pc, #320]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	494d      	ldr	r1, [pc, #308]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 800327e:	4313      	orrs	r3, r2
 8003280:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0301 	and.w	r3, r3, #1
 800328a:	2b00      	cmp	r3, #0
 800328c:	d044      	beq.n	8003318 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	2b01      	cmp	r3, #1
 8003294:	d107      	bne.n	80032a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003296:	4b47      	ldr	r3, [pc, #284]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d119      	bne.n	80032d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e07f      	b.n	80033a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d003      	beq.n	80032b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032b2:	2b03      	cmp	r3, #3
 80032b4:	d107      	bne.n	80032c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032b6:	4b3f      	ldr	r3, [pc, #252]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d109      	bne.n	80032d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e06f      	b.n	80033a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032c6:	4b3b      	ldr	r3, [pc, #236]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0302 	and.w	r3, r3, #2
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d101      	bne.n	80032d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e067      	b.n	80033a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032d6:	4b37      	ldr	r3, [pc, #220]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f023 0203 	bic.w	r2, r3, #3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	4934      	ldr	r1, [pc, #208]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 80032e4:	4313      	orrs	r3, r2
 80032e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032e8:	f7ff f840 	bl	800236c <HAL_GetTick>
 80032ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ee:	e00a      	b.n	8003306 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032f0:	f7ff f83c 	bl	800236c <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80032fe:	4293      	cmp	r3, r2
 8003300:	d901      	bls.n	8003306 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e04f      	b.n	80033a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003306:	4b2b      	ldr	r3, [pc, #172]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f003 020c 	and.w	r2, r3, #12
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	429a      	cmp	r2, r3
 8003316:	d1eb      	bne.n	80032f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003318:	4b25      	ldr	r3, [pc, #148]	; (80033b0 <HAL_RCC_ClockConfig+0x1b8>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 030f 	and.w	r3, r3, #15
 8003320:	683a      	ldr	r2, [r7, #0]
 8003322:	429a      	cmp	r2, r3
 8003324:	d20c      	bcs.n	8003340 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003326:	4b22      	ldr	r3, [pc, #136]	; (80033b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003328:	683a      	ldr	r2, [r7, #0]
 800332a:	b2d2      	uxtb	r2, r2
 800332c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800332e:	4b20      	ldr	r3, [pc, #128]	; (80033b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 030f 	and.w	r3, r3, #15
 8003336:	683a      	ldr	r2, [r7, #0]
 8003338:	429a      	cmp	r2, r3
 800333a:	d001      	beq.n	8003340 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e032      	b.n	80033a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0304 	and.w	r3, r3, #4
 8003348:	2b00      	cmp	r3, #0
 800334a:	d008      	beq.n	800335e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800334c:	4b19      	ldr	r3, [pc, #100]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	4916      	ldr	r1, [pc, #88]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 800335a:	4313      	orrs	r3, r2
 800335c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0308 	and.w	r3, r3, #8
 8003366:	2b00      	cmp	r3, #0
 8003368:	d009      	beq.n	800337e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800336a:	4b12      	ldr	r3, [pc, #72]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	691b      	ldr	r3, [r3, #16]
 8003376:	00db      	lsls	r3, r3, #3
 8003378:	490e      	ldr	r1, [pc, #56]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 800337a:	4313      	orrs	r3, r2
 800337c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800337e:	f000 f821 	bl	80033c4 <HAL_RCC_GetSysClockFreq>
 8003382:	4602      	mov	r2, r0
 8003384:	4b0b      	ldr	r3, [pc, #44]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	091b      	lsrs	r3, r3, #4
 800338a:	f003 030f 	and.w	r3, r3, #15
 800338e:	490a      	ldr	r1, [pc, #40]	; (80033b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003390:	5ccb      	ldrb	r3, [r1, r3]
 8003392:	fa22 f303 	lsr.w	r3, r2, r3
 8003396:	4a09      	ldr	r2, [pc, #36]	; (80033bc <HAL_RCC_ClockConfig+0x1c4>)
 8003398:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800339a:	4b09      	ldr	r3, [pc, #36]	; (80033c0 <HAL_RCC_ClockConfig+0x1c8>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4618      	mov	r0, r3
 80033a0:	f7fe ffa0 	bl	80022e4 <HAL_InitTick>

  return HAL_OK;
 80033a4:	2300      	movs	r3, #0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3710      	adds	r7, #16
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	40023c00 	.word	0x40023c00
 80033b4:	40023800 	.word	0x40023800
 80033b8:	08009d64 	.word	0x08009d64
 80033bc:	20000000 	.word	0x20000000
 80033c0:	20000004 	.word	0x20000004

080033c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033c8:	b094      	sub	sp, #80	; 0x50
 80033ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80033cc:	2300      	movs	r3, #0
 80033ce:	647b      	str	r3, [r7, #68]	; 0x44
 80033d0:	2300      	movs	r3, #0
 80033d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033d4:	2300      	movs	r3, #0
 80033d6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80033d8:	2300      	movs	r3, #0
 80033da:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033dc:	4b79      	ldr	r3, [pc, #484]	; (80035c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	f003 030c 	and.w	r3, r3, #12
 80033e4:	2b08      	cmp	r3, #8
 80033e6:	d00d      	beq.n	8003404 <HAL_RCC_GetSysClockFreq+0x40>
 80033e8:	2b08      	cmp	r3, #8
 80033ea:	f200 80e1 	bhi.w	80035b0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d002      	beq.n	80033f8 <HAL_RCC_GetSysClockFreq+0x34>
 80033f2:	2b04      	cmp	r3, #4
 80033f4:	d003      	beq.n	80033fe <HAL_RCC_GetSysClockFreq+0x3a>
 80033f6:	e0db      	b.n	80035b0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033f8:	4b73      	ldr	r3, [pc, #460]	; (80035c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80033fa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80033fc:	e0db      	b.n	80035b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033fe:	4b73      	ldr	r3, [pc, #460]	; (80035cc <HAL_RCC_GetSysClockFreq+0x208>)
 8003400:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003402:	e0d8      	b.n	80035b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003404:	4b6f      	ldr	r3, [pc, #444]	; (80035c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800340c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800340e:	4b6d      	ldr	r3, [pc, #436]	; (80035c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d063      	beq.n	80034e2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800341a:	4b6a      	ldr	r3, [pc, #424]	; (80035c4 <HAL_RCC_GetSysClockFreq+0x200>)
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	099b      	lsrs	r3, r3, #6
 8003420:	2200      	movs	r2, #0
 8003422:	63bb      	str	r3, [r7, #56]	; 0x38
 8003424:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003428:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800342c:	633b      	str	r3, [r7, #48]	; 0x30
 800342e:	2300      	movs	r3, #0
 8003430:	637b      	str	r3, [r7, #52]	; 0x34
 8003432:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003436:	4622      	mov	r2, r4
 8003438:	462b      	mov	r3, r5
 800343a:	f04f 0000 	mov.w	r0, #0
 800343e:	f04f 0100 	mov.w	r1, #0
 8003442:	0159      	lsls	r1, r3, #5
 8003444:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003448:	0150      	lsls	r0, r2, #5
 800344a:	4602      	mov	r2, r0
 800344c:	460b      	mov	r3, r1
 800344e:	4621      	mov	r1, r4
 8003450:	1a51      	subs	r1, r2, r1
 8003452:	6139      	str	r1, [r7, #16]
 8003454:	4629      	mov	r1, r5
 8003456:	eb63 0301 	sbc.w	r3, r3, r1
 800345a:	617b      	str	r3, [r7, #20]
 800345c:	f04f 0200 	mov.w	r2, #0
 8003460:	f04f 0300 	mov.w	r3, #0
 8003464:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003468:	4659      	mov	r1, fp
 800346a:	018b      	lsls	r3, r1, #6
 800346c:	4651      	mov	r1, sl
 800346e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003472:	4651      	mov	r1, sl
 8003474:	018a      	lsls	r2, r1, #6
 8003476:	4651      	mov	r1, sl
 8003478:	ebb2 0801 	subs.w	r8, r2, r1
 800347c:	4659      	mov	r1, fp
 800347e:	eb63 0901 	sbc.w	r9, r3, r1
 8003482:	f04f 0200 	mov.w	r2, #0
 8003486:	f04f 0300 	mov.w	r3, #0
 800348a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800348e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003492:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003496:	4690      	mov	r8, r2
 8003498:	4699      	mov	r9, r3
 800349a:	4623      	mov	r3, r4
 800349c:	eb18 0303 	adds.w	r3, r8, r3
 80034a0:	60bb      	str	r3, [r7, #8]
 80034a2:	462b      	mov	r3, r5
 80034a4:	eb49 0303 	adc.w	r3, r9, r3
 80034a8:	60fb      	str	r3, [r7, #12]
 80034aa:	f04f 0200 	mov.w	r2, #0
 80034ae:	f04f 0300 	mov.w	r3, #0
 80034b2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80034b6:	4629      	mov	r1, r5
 80034b8:	024b      	lsls	r3, r1, #9
 80034ba:	4621      	mov	r1, r4
 80034bc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80034c0:	4621      	mov	r1, r4
 80034c2:	024a      	lsls	r2, r1, #9
 80034c4:	4610      	mov	r0, r2
 80034c6:	4619      	mov	r1, r3
 80034c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034ca:	2200      	movs	r2, #0
 80034cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80034ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80034d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80034d4:	f7fd fbe8 	bl	8000ca8 <__aeabi_uldivmod>
 80034d8:	4602      	mov	r2, r0
 80034da:	460b      	mov	r3, r1
 80034dc:	4613      	mov	r3, r2
 80034de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034e0:	e058      	b.n	8003594 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034e2:	4b38      	ldr	r3, [pc, #224]	; (80035c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	099b      	lsrs	r3, r3, #6
 80034e8:	2200      	movs	r2, #0
 80034ea:	4618      	mov	r0, r3
 80034ec:	4611      	mov	r1, r2
 80034ee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80034f2:	623b      	str	r3, [r7, #32]
 80034f4:	2300      	movs	r3, #0
 80034f6:	627b      	str	r3, [r7, #36]	; 0x24
 80034f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80034fc:	4642      	mov	r2, r8
 80034fe:	464b      	mov	r3, r9
 8003500:	f04f 0000 	mov.w	r0, #0
 8003504:	f04f 0100 	mov.w	r1, #0
 8003508:	0159      	lsls	r1, r3, #5
 800350a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800350e:	0150      	lsls	r0, r2, #5
 8003510:	4602      	mov	r2, r0
 8003512:	460b      	mov	r3, r1
 8003514:	4641      	mov	r1, r8
 8003516:	ebb2 0a01 	subs.w	sl, r2, r1
 800351a:	4649      	mov	r1, r9
 800351c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003520:	f04f 0200 	mov.w	r2, #0
 8003524:	f04f 0300 	mov.w	r3, #0
 8003528:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800352c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003530:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003534:	ebb2 040a 	subs.w	r4, r2, sl
 8003538:	eb63 050b 	sbc.w	r5, r3, fp
 800353c:	f04f 0200 	mov.w	r2, #0
 8003540:	f04f 0300 	mov.w	r3, #0
 8003544:	00eb      	lsls	r3, r5, #3
 8003546:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800354a:	00e2      	lsls	r2, r4, #3
 800354c:	4614      	mov	r4, r2
 800354e:	461d      	mov	r5, r3
 8003550:	4643      	mov	r3, r8
 8003552:	18e3      	adds	r3, r4, r3
 8003554:	603b      	str	r3, [r7, #0]
 8003556:	464b      	mov	r3, r9
 8003558:	eb45 0303 	adc.w	r3, r5, r3
 800355c:	607b      	str	r3, [r7, #4]
 800355e:	f04f 0200 	mov.w	r2, #0
 8003562:	f04f 0300 	mov.w	r3, #0
 8003566:	e9d7 4500 	ldrd	r4, r5, [r7]
 800356a:	4629      	mov	r1, r5
 800356c:	028b      	lsls	r3, r1, #10
 800356e:	4621      	mov	r1, r4
 8003570:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003574:	4621      	mov	r1, r4
 8003576:	028a      	lsls	r2, r1, #10
 8003578:	4610      	mov	r0, r2
 800357a:	4619      	mov	r1, r3
 800357c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800357e:	2200      	movs	r2, #0
 8003580:	61bb      	str	r3, [r7, #24]
 8003582:	61fa      	str	r2, [r7, #28]
 8003584:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003588:	f7fd fb8e 	bl	8000ca8 <__aeabi_uldivmod>
 800358c:	4602      	mov	r2, r0
 800358e:	460b      	mov	r3, r1
 8003590:	4613      	mov	r3, r2
 8003592:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003594:	4b0b      	ldr	r3, [pc, #44]	; (80035c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	0c1b      	lsrs	r3, r3, #16
 800359a:	f003 0303 	and.w	r3, r3, #3
 800359e:	3301      	adds	r3, #1
 80035a0:	005b      	lsls	r3, r3, #1
 80035a2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80035a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80035a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80035ae:	e002      	b.n	80035b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035b0:	4b05      	ldr	r3, [pc, #20]	; (80035c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80035b2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80035b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3750      	adds	r7, #80	; 0x50
 80035bc:	46bd      	mov	sp, r7
 80035be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035c2:	bf00      	nop
 80035c4:	40023800 	.word	0x40023800
 80035c8:	00f42400 	.word	0x00f42400
 80035cc:	007a1200 	.word	0x007a1200

080035d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035d0:	b480      	push	{r7}
 80035d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035d4:	4b03      	ldr	r3, [pc, #12]	; (80035e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80035d6:	681b      	ldr	r3, [r3, #0]
}
 80035d8:	4618      	mov	r0, r3
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop
 80035e4:	20000000 	.word	0x20000000

080035e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80035ec:	f7ff fff0 	bl	80035d0 <HAL_RCC_GetHCLKFreq>
 80035f0:	4602      	mov	r2, r0
 80035f2:	4b05      	ldr	r3, [pc, #20]	; (8003608 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	0a9b      	lsrs	r3, r3, #10
 80035f8:	f003 0307 	and.w	r3, r3, #7
 80035fc:	4903      	ldr	r1, [pc, #12]	; (800360c <HAL_RCC_GetPCLK1Freq+0x24>)
 80035fe:	5ccb      	ldrb	r3, [r1, r3]
 8003600:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003604:	4618      	mov	r0, r3
 8003606:	bd80      	pop	{r7, pc}
 8003608:	40023800 	.word	0x40023800
 800360c:	08009d74 	.word	0x08009d74

08003610 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003614:	f7ff ffdc 	bl	80035d0 <HAL_RCC_GetHCLKFreq>
 8003618:	4602      	mov	r2, r0
 800361a:	4b05      	ldr	r3, [pc, #20]	; (8003630 <HAL_RCC_GetPCLK2Freq+0x20>)
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	0b5b      	lsrs	r3, r3, #13
 8003620:	f003 0307 	and.w	r3, r3, #7
 8003624:	4903      	ldr	r1, [pc, #12]	; (8003634 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003626:	5ccb      	ldrb	r3, [r1, r3]
 8003628:	fa22 f303 	lsr.w	r3, r2, r3
}
 800362c:	4618      	mov	r0, r3
 800362e:	bd80      	pop	{r7, pc}
 8003630:	40023800 	.word	0x40023800
 8003634:	08009d74 	.word	0x08009d74

08003638 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d101      	bne.n	800364a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e07b      	b.n	8003742 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364e:	2b00      	cmp	r3, #0
 8003650:	d108      	bne.n	8003664 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800365a:	d009      	beq.n	8003670 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	61da      	str	r2, [r3, #28]
 8003662:	e005      	b.n	8003670 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800367c:	b2db      	uxtb	r3, r3
 800367e:	2b00      	cmp	r3, #0
 8003680:	d106      	bne.n	8003690 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f7fe fb60 	bl	8001d50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2202      	movs	r2, #2
 8003694:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036a6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80036b8:	431a      	orrs	r2, r3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036c2:	431a      	orrs	r2, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	691b      	ldr	r3, [r3, #16]
 80036c8:	f003 0302 	and.w	r3, r3, #2
 80036cc:	431a      	orrs	r2, r3
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	695b      	ldr	r3, [r3, #20]
 80036d2:	f003 0301 	and.w	r3, r3, #1
 80036d6:	431a      	orrs	r2, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	699b      	ldr	r3, [r3, #24]
 80036dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036e0:	431a      	orrs	r2, r3
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	69db      	ldr	r3, [r3, #28]
 80036e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80036ea:	431a      	orrs	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a1b      	ldr	r3, [r3, #32]
 80036f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036f4:	ea42 0103 	orr.w	r1, r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036fc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	430a      	orrs	r2, r1
 8003706:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	699b      	ldr	r3, [r3, #24]
 800370c:	0c1b      	lsrs	r3, r3, #16
 800370e:	f003 0104 	and.w	r1, r3, #4
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003716:	f003 0210 	and.w	r2, r3, #16
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	430a      	orrs	r2, r1
 8003720:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	69da      	ldr	r2, [r3, #28]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003730:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003740:	2300      	movs	r3, #0
}
 8003742:	4618      	mov	r0, r3
 8003744:	3708      	adds	r7, #8
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}

0800374a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800374a:	b580      	push	{r7, lr}
 800374c:	b088      	sub	sp, #32
 800374e:	af02      	add	r7, sp, #8
 8003750:	60f8      	str	r0, [r7, #12]
 8003752:	60b9      	str	r1, [r7, #8]
 8003754:	603b      	str	r3, [r7, #0]
 8003756:	4613      	mov	r3, r2
 8003758:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800375a:	2300      	movs	r3, #0
 800375c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003766:	d112      	bne.n	800378e <HAL_SPI_Receive+0x44>
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d10e      	bne.n	800378e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2204      	movs	r2, #4
 8003774:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003778:	88fa      	ldrh	r2, [r7, #6]
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	9300      	str	r3, [sp, #0]
 800377e:	4613      	mov	r3, r2
 8003780:	68ba      	ldr	r2, [r7, #8]
 8003782:	68b9      	ldr	r1, [r7, #8]
 8003784:	68f8      	ldr	r0, [r7, #12]
 8003786:	f000 f8f1 	bl	800396c <HAL_SPI_TransmitReceive>
 800378a:	4603      	mov	r3, r0
 800378c:	e0ea      	b.n	8003964 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003794:	2b01      	cmp	r3, #1
 8003796:	d101      	bne.n	800379c <HAL_SPI_Receive+0x52>
 8003798:	2302      	movs	r3, #2
 800379a:	e0e3      	b.n	8003964 <HAL_SPI_Receive+0x21a>
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80037a4:	f7fe fde2 	bl	800236c <HAL_GetTick>
 80037a8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d002      	beq.n	80037bc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80037b6:	2302      	movs	r3, #2
 80037b8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80037ba:	e0ca      	b.n	8003952 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d002      	beq.n	80037c8 <HAL_SPI_Receive+0x7e>
 80037c2:	88fb      	ldrh	r3, [r7, #6]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d102      	bne.n	80037ce <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	75fb      	strb	r3, [r7, #23]
    goto error;
 80037cc:	e0c1      	b.n	8003952 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2204      	movs	r2, #4
 80037d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2200      	movs	r2, #0
 80037da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	68ba      	ldr	r2, [r7, #8]
 80037e0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	88fa      	ldrh	r2, [r7, #6]
 80037e6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	88fa      	ldrh	r2, [r7, #6]
 80037ec:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2200      	movs	r2, #0
 80037f2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2200      	movs	r2, #0
 80037f8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2200      	movs	r2, #0
 80037fe:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2200      	movs	r2, #0
 8003804:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2200      	movs	r2, #0
 800380a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003814:	d10f      	bne.n	8003836 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003824:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003834:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003840:	2b40      	cmp	r3, #64	; 0x40
 8003842:	d007      	beq.n	8003854 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003852:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d162      	bne.n	8003922 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800385c:	e02e      	b.n	80038bc <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	f003 0301 	and.w	r3, r3, #1
 8003868:	2b01      	cmp	r3, #1
 800386a:	d115      	bne.n	8003898 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f103 020c 	add.w	r2, r3, #12
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003878:	7812      	ldrb	r2, [r2, #0]
 800387a:	b2d2      	uxtb	r2, r2
 800387c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003882:	1c5a      	adds	r2, r3, #1
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800388c:	b29b      	uxth	r3, r3
 800388e:	3b01      	subs	r3, #1
 8003890:	b29a      	uxth	r2, r3
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003896:	e011      	b.n	80038bc <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003898:	f7fe fd68 	bl	800236c <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	683a      	ldr	r2, [r7, #0]
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d803      	bhi.n	80038b0 <HAL_SPI_Receive+0x166>
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ae:	d102      	bne.n	80038b6 <HAL_SPI_Receive+0x16c>
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d102      	bne.n	80038bc <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80038ba:	e04a      	b.n	8003952 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d1cb      	bne.n	800385e <HAL_SPI_Receive+0x114>
 80038c6:	e031      	b.n	800392c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	f003 0301 	and.w	r3, r3, #1
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d113      	bne.n	80038fe <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	68da      	ldr	r2, [r3, #12]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e0:	b292      	uxth	r2, r2
 80038e2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e8:	1c9a      	adds	r2, r3, #2
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	3b01      	subs	r3, #1
 80038f6:	b29a      	uxth	r2, r3
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80038fc:	e011      	b.n	8003922 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80038fe:	f7fe fd35 	bl	800236c <HAL_GetTick>
 8003902:	4602      	mov	r2, r0
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	683a      	ldr	r2, [r7, #0]
 800390a:	429a      	cmp	r2, r3
 800390c:	d803      	bhi.n	8003916 <HAL_SPI_Receive+0x1cc>
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003914:	d102      	bne.n	800391c <HAL_SPI_Receive+0x1d2>
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d102      	bne.n	8003922 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800391c:	2303      	movs	r3, #3
 800391e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003920:	e017      	b.n	8003952 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003926:	b29b      	uxth	r3, r3
 8003928:	2b00      	cmp	r3, #0
 800392a:	d1cd      	bne.n	80038c8 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800392c:	693a      	ldr	r2, [r7, #16]
 800392e:	6839      	ldr	r1, [r7, #0]
 8003930:	68f8      	ldr	r0, [r7, #12]
 8003932:	f000 fa45 	bl	8003dc0 <SPI_EndRxTransaction>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d002      	beq.n	8003942 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2220      	movs	r2, #32
 8003940:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003946:	2b00      	cmp	r3, #0
 8003948:	d002      	beq.n	8003950 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	75fb      	strb	r3, [r7, #23]
 800394e:	e000      	b.n	8003952 <HAL_SPI_Receive+0x208>
  }

error :
 8003950:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2201      	movs	r2, #1
 8003956:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2200      	movs	r2, #0
 800395e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003962:	7dfb      	ldrb	r3, [r7, #23]
}
 8003964:	4618      	mov	r0, r3
 8003966:	3718      	adds	r7, #24
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b08c      	sub	sp, #48	; 0x30
 8003970:	af00      	add	r7, sp, #0
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	60b9      	str	r1, [r7, #8]
 8003976:	607a      	str	r2, [r7, #4]
 8003978:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800397a:	2301      	movs	r3, #1
 800397c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800397e:	2300      	movs	r3, #0
 8003980:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800398a:	2b01      	cmp	r3, #1
 800398c:	d101      	bne.n	8003992 <HAL_SPI_TransmitReceive+0x26>
 800398e:	2302      	movs	r3, #2
 8003990:	e18a      	b.n	8003ca8 <HAL_SPI_TransmitReceive+0x33c>
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2201      	movs	r2, #1
 8003996:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800399a:	f7fe fce7 	bl	800236c <HAL_GetTick>
 800399e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80039b0:	887b      	ldrh	r3, [r7, #2]
 80039b2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80039b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d00f      	beq.n	80039dc <HAL_SPI_TransmitReceive+0x70>
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039c2:	d107      	bne.n	80039d4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d103      	bne.n	80039d4 <HAL_SPI_TransmitReceive+0x68>
 80039cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80039d0:	2b04      	cmp	r3, #4
 80039d2:	d003      	beq.n	80039dc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80039d4:	2302      	movs	r3, #2
 80039d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80039da:	e15b      	b.n	8003c94 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d005      	beq.n	80039ee <HAL_SPI_TransmitReceive+0x82>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d002      	beq.n	80039ee <HAL_SPI_TransmitReceive+0x82>
 80039e8:	887b      	ldrh	r3, [r7, #2]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d103      	bne.n	80039f6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80039f4:	e14e      	b.n	8003c94 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	2b04      	cmp	r3, #4
 8003a00:	d003      	beq.n	8003a0a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2205      	movs	r2, #5
 8003a06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	887a      	ldrh	r2, [r7, #2]
 8003a1a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	887a      	ldrh	r2, [r7, #2]
 8003a20:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	68ba      	ldr	r2, [r7, #8]
 8003a26:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	887a      	ldrh	r2, [r7, #2]
 8003a2c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	887a      	ldrh	r2, [r7, #2]
 8003a32:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2200      	movs	r2, #0
 8003a38:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a4a:	2b40      	cmp	r3, #64	; 0x40
 8003a4c:	d007      	beq.n	8003a5e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a5c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a66:	d178      	bne.n	8003b5a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d002      	beq.n	8003a76 <HAL_SPI_TransmitReceive+0x10a>
 8003a70:	8b7b      	ldrh	r3, [r7, #26]
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d166      	bne.n	8003b44 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7a:	881a      	ldrh	r2, [r3, #0]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a86:	1c9a      	adds	r2, r3, #2
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	3b01      	subs	r3, #1
 8003a94:	b29a      	uxth	r2, r3
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a9a:	e053      	b.n	8003b44 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f003 0302 	and.w	r3, r3, #2
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	d11b      	bne.n	8003ae2 <HAL_SPI_TransmitReceive+0x176>
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d016      	beq.n	8003ae2 <HAL_SPI_TransmitReceive+0x176>
 8003ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d113      	bne.n	8003ae2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003abe:	881a      	ldrh	r2, [r3, #0]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aca:	1c9a      	adds	r2, r3, #2
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	3b01      	subs	r3, #1
 8003ad8:	b29a      	uxth	r2, r3
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	f003 0301 	and.w	r3, r3, #1
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d119      	bne.n	8003b24 <HAL_SPI_TransmitReceive+0x1b8>
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d014      	beq.n	8003b24 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	68da      	ldr	r2, [r3, #12]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b04:	b292      	uxth	r2, r2
 8003b06:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b0c:	1c9a      	adds	r2, r3, #2
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	3b01      	subs	r3, #1
 8003b1a:	b29a      	uxth	r2, r3
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003b20:	2301      	movs	r3, #1
 8003b22:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003b24:	f7fe fc22 	bl	800236c <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d807      	bhi.n	8003b44 <HAL_SPI_TransmitReceive+0x1d8>
 8003b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b3a:	d003      	beq.n	8003b44 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003b42:	e0a7      	b.n	8003c94 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d1a6      	bne.n	8003a9c <HAL_SPI_TransmitReceive+0x130>
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d1a1      	bne.n	8003a9c <HAL_SPI_TransmitReceive+0x130>
 8003b58:	e07c      	b.n	8003c54 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d002      	beq.n	8003b68 <HAL_SPI_TransmitReceive+0x1fc>
 8003b62:	8b7b      	ldrh	r3, [r7, #26]
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d16b      	bne.n	8003c40 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	330c      	adds	r3, #12
 8003b72:	7812      	ldrb	r2, [r2, #0]
 8003b74:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7a:	1c5a      	adds	r2, r3, #1
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	3b01      	subs	r3, #1
 8003b88:	b29a      	uxth	r2, r3
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b8e:	e057      	b.n	8003c40 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	f003 0302 	and.w	r3, r3, #2
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d11c      	bne.n	8003bd8 <HAL_SPI_TransmitReceive+0x26c>
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d017      	beq.n	8003bd8 <HAL_SPI_TransmitReceive+0x26c>
 8003ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d114      	bne.n	8003bd8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	330c      	adds	r3, #12
 8003bb8:	7812      	ldrb	r2, [r2, #0]
 8003bba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc0:	1c5a      	adds	r2, r3, #1
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	3b01      	subs	r3, #1
 8003bce:	b29a      	uxth	r2, r3
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	f003 0301 	and.w	r3, r3, #1
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d119      	bne.n	8003c1a <HAL_SPI_TransmitReceive+0x2ae>
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d014      	beq.n	8003c1a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	68da      	ldr	r2, [r3, #12]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bfa:	b2d2      	uxtb	r2, r2
 8003bfc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c02:	1c5a      	adds	r2, r3, #1
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	3b01      	subs	r3, #1
 8003c10:	b29a      	uxth	r2, r3
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003c16:	2301      	movs	r3, #1
 8003c18:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003c1a:	f7fe fba7 	bl	800236c <HAL_GetTick>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d803      	bhi.n	8003c32 <HAL_SPI_TransmitReceive+0x2c6>
 8003c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c30:	d102      	bne.n	8003c38 <HAL_SPI_TransmitReceive+0x2cc>
 8003c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d103      	bne.n	8003c40 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003c38:	2303      	movs	r3, #3
 8003c3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003c3e:	e029      	b.n	8003c94 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d1a2      	bne.n	8003b90 <HAL_SPI_TransmitReceive+0x224>
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d19d      	bne.n	8003b90 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c56:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003c58:	68f8      	ldr	r0, [r7, #12]
 8003c5a:	f000 f917 	bl	8003e8c <SPI_EndRxTxTransaction>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d006      	beq.n	8003c72 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2220      	movs	r2, #32
 8003c6e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003c70:	e010      	b.n	8003c94 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d10b      	bne.n	8003c92 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	617b      	str	r3, [r7, #20]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	617b      	str	r3, [r7, #20]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	617b      	str	r3, [r7, #20]
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	e000      	b.n	8003c94 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003c92:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003ca4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3730      	adds	r7, #48	; 0x30
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b088      	sub	sp, #32
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	60b9      	str	r1, [r7, #8]
 8003cba:	603b      	str	r3, [r7, #0]
 8003cbc:	4613      	mov	r3, r2
 8003cbe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003cc0:	f7fe fb54 	bl	800236c <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cc8:	1a9b      	subs	r3, r3, r2
 8003cca:	683a      	ldr	r2, [r7, #0]
 8003ccc:	4413      	add	r3, r2
 8003cce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003cd0:	f7fe fb4c 	bl	800236c <HAL_GetTick>
 8003cd4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003cd6:	4b39      	ldr	r3, [pc, #228]	; (8003dbc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	015b      	lsls	r3, r3, #5
 8003cdc:	0d1b      	lsrs	r3, r3, #20
 8003cde:	69fa      	ldr	r2, [r7, #28]
 8003ce0:	fb02 f303 	mul.w	r3, r2, r3
 8003ce4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ce6:	e054      	b.n	8003d92 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cee:	d050      	beq.n	8003d92 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003cf0:	f7fe fb3c 	bl	800236c <HAL_GetTick>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	69bb      	ldr	r3, [r7, #24]
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	69fa      	ldr	r2, [r7, #28]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d902      	bls.n	8003d06 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003d00:	69fb      	ldr	r3, [r7, #28]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d13d      	bne.n	8003d82 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	685a      	ldr	r2, [r3, #4]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003d14:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d1e:	d111      	bne.n	8003d44 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d28:	d004      	beq.n	8003d34 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d32:	d107      	bne.n	8003d44 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d42:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d4c:	d10f      	bne.n	8003d6e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d5c:	601a      	str	r2, [r3, #0]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d6c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2201      	movs	r2, #1
 8003d72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	e017      	b.n	8003db2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d101      	bne.n	8003d8c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	3b01      	subs	r3, #1
 8003d90:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	689a      	ldr	r2, [r3, #8]
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	68ba      	ldr	r2, [r7, #8]
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	bf0c      	ite	eq
 8003da2:	2301      	moveq	r3, #1
 8003da4:	2300      	movne	r3, #0
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	461a      	mov	r2, r3
 8003daa:	79fb      	ldrb	r3, [r7, #7]
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d19b      	bne.n	8003ce8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003db0:	2300      	movs	r3, #0
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3720      	adds	r7, #32
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	bf00      	nop
 8003dbc:	20000000 	.word	0x20000000

08003dc0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b086      	sub	sp, #24
 8003dc4:	af02      	add	r7, sp, #8
 8003dc6:	60f8      	str	r0, [r7, #12]
 8003dc8:	60b9      	str	r1, [r7, #8]
 8003dca:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003dd4:	d111      	bne.n	8003dfa <SPI_EndRxTransaction+0x3a>
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dde:	d004      	beq.n	8003dea <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003de8:	d107      	bne.n	8003dfa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003df8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e02:	d12a      	bne.n	8003e5a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e0c:	d012      	beq.n	8003e34 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	9300      	str	r3, [sp, #0]
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	2200      	movs	r2, #0
 8003e16:	2180      	movs	r1, #128	; 0x80
 8003e18:	68f8      	ldr	r0, [r7, #12]
 8003e1a:	f7ff ff49 	bl	8003cb0 <SPI_WaitFlagStateUntilTimeout>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d02d      	beq.n	8003e80 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e28:	f043 0220 	orr.w	r2, r3, #32
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003e30:	2303      	movs	r3, #3
 8003e32:	e026      	b.n	8003e82 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	9300      	str	r3, [sp, #0]
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	2101      	movs	r1, #1
 8003e3e:	68f8      	ldr	r0, [r7, #12]
 8003e40:	f7ff ff36 	bl	8003cb0 <SPI_WaitFlagStateUntilTimeout>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d01a      	beq.n	8003e80 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e4e:	f043 0220 	orr.w	r2, r3, #32
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e013      	b.n	8003e82 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	9300      	str	r3, [sp, #0]
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	2200      	movs	r2, #0
 8003e62:	2101      	movs	r1, #1
 8003e64:	68f8      	ldr	r0, [r7, #12]
 8003e66:	f7ff ff23 	bl	8003cb0 <SPI_WaitFlagStateUntilTimeout>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d007      	beq.n	8003e80 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e74:	f043 0220 	orr.w	r2, r3, #32
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	e000      	b.n	8003e82 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3710      	adds	r7, #16
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
	...

08003e8c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b088      	sub	sp, #32
 8003e90:	af02      	add	r7, sp, #8
 8003e92:	60f8      	str	r0, [r7, #12]
 8003e94:	60b9      	str	r1, [r7, #8]
 8003e96:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003e98:	4b1b      	ldr	r3, [pc, #108]	; (8003f08 <SPI_EndRxTxTransaction+0x7c>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a1b      	ldr	r2, [pc, #108]	; (8003f0c <SPI_EndRxTxTransaction+0x80>)
 8003e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003ea2:	0d5b      	lsrs	r3, r3, #21
 8003ea4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003ea8:	fb02 f303 	mul.w	r3, r2, r3
 8003eac:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003eb6:	d112      	bne.n	8003ede <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	9300      	str	r3, [sp, #0]
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	2180      	movs	r1, #128	; 0x80
 8003ec2:	68f8      	ldr	r0, [r7, #12]
 8003ec4:	f7ff fef4 	bl	8003cb0 <SPI_WaitFlagStateUntilTimeout>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d016      	beq.n	8003efc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ed2:	f043 0220 	orr.w	r2, r3, #32
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e00f      	b.n	8003efe <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d00a      	beq.n	8003efa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	3b01      	subs	r3, #1
 8003ee8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ef4:	2b80      	cmp	r3, #128	; 0x80
 8003ef6:	d0f2      	beq.n	8003ede <SPI_EndRxTxTransaction+0x52>
 8003ef8:	e000      	b.n	8003efc <SPI_EndRxTxTransaction+0x70>
        break;
 8003efa:	bf00      	nop
  }

  return HAL_OK;
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3718      	adds	r7, #24
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	20000000 	.word	0x20000000
 8003f0c:	165e9f81 	.word	0x165e9f81

08003f10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b082      	sub	sp, #8
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d101      	bne.n	8003f22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e03f      	b.n	8003fa2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d106      	bne.n	8003f3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f7fe f8b0 	bl	800209c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2224      	movs	r2, #36	; 0x24
 8003f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	68da      	ldr	r2, [r3, #12]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f000 fd23 	bl	80049a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	691a      	ldr	r2, [r3, #16]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	695a      	ldr	r2, [r3, #20]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	68da      	ldr	r2, [r3, #12]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2220      	movs	r2, #32
 8003f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2220      	movs	r2, #32
 8003f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003fa0:	2300      	movs	r3, #0
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3708      	adds	r7, #8
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}

08003faa <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003faa:	b480      	push	{r7}
 8003fac:	b085      	sub	sp, #20
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	60f8      	str	r0, [r7, #12]
 8003fb2:	60b9      	str	r1, [r7, #8]
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	2b20      	cmp	r3, #32
 8003fc2:	d130      	bne.n	8004026 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d002      	beq.n	8003fd0 <HAL_UART_Transmit_IT+0x26>
 8003fca:	88fb      	ldrh	r3, [r7, #6]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d101      	bne.n	8003fd4 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e029      	b.n	8004028 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d101      	bne.n	8003fe2 <HAL_UART_Transmit_IT+0x38>
 8003fde:	2302      	movs	r3, #2
 8003fe0:	e022      	b.n	8004028 <HAL_UART_Transmit_IT+0x7e>
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	68ba      	ldr	r2, [r7, #8]
 8003fee:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	88fa      	ldrh	r2, [r7, #6]
 8003ff4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	88fa      	ldrh	r2, [r7, #6]
 8003ffa:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2200      	movs	r2, #0
 8004000:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2221      	movs	r2, #33	; 0x21
 8004006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2200      	movs	r2, #0
 800400e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	68da      	ldr	r2, [r3, #12]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004020:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004022:	2300      	movs	r3, #0
 8004024:	e000      	b.n	8004028 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8004026:	2302      	movs	r3, #2
  }
}
 8004028:	4618      	mov	r0, r3
 800402a:	3714      	adds	r7, #20
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr

08004034 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	60b9      	str	r1, [r7, #8]
 800403e:	4613      	mov	r3, r2
 8004040:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004048:	b2db      	uxtb	r3, r3
 800404a:	2b20      	cmp	r3, #32
 800404c:	d11d      	bne.n	800408a <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d002      	beq.n	800405a <HAL_UART_Receive_IT+0x26>
 8004054:	88fb      	ldrh	r3, [r7, #6]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d101      	bne.n	800405e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e016      	b.n	800408c <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004064:	2b01      	cmp	r3, #1
 8004066:	d101      	bne.n	800406c <HAL_UART_Receive_IT+0x38>
 8004068:	2302      	movs	r3, #2
 800406a:	e00f      	b.n	800408c <HAL_UART_Receive_IT+0x58>
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2200      	movs	r2, #0
 8004078:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800407a:	88fb      	ldrh	r3, [r7, #6]
 800407c:	461a      	mov	r2, r3
 800407e:	68b9      	ldr	r1, [r7, #8]
 8004080:	68f8      	ldr	r0, [r7, #12]
 8004082:	f000 fab5 	bl	80045f0 <UART_Start_Receive_IT>
 8004086:	4603      	mov	r3, r0
 8004088:	e000      	b.n	800408c <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800408a:	2302      	movs	r3, #2
  }
}
 800408c:	4618      	mov	r0, r3
 800408e:	3710      	adds	r7, #16
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}

08004094 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b0ba      	sub	sp, #232	; 0xe8
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	695b      	ldr	r3, [r3, #20]
 80040b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80040ba:	2300      	movs	r3, #0
 80040bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80040c0:	2300      	movs	r3, #0
 80040c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80040c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040ca:	f003 030f 	and.w	r3, r3, #15
 80040ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80040d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d10f      	bne.n	80040fa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80040da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040de:	f003 0320 	and.w	r3, r3, #32
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d009      	beq.n	80040fa <HAL_UART_IRQHandler+0x66>
 80040e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040ea:	f003 0320 	and.w	r3, r3, #32
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d003      	beq.n	80040fa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f000 fb99 	bl	800482a <UART_Receive_IT>
      return;
 80040f8:	e256      	b.n	80045a8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80040fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80040fe:	2b00      	cmp	r3, #0
 8004100:	f000 80de 	beq.w	80042c0 <HAL_UART_IRQHandler+0x22c>
 8004104:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004108:	f003 0301 	and.w	r3, r3, #1
 800410c:	2b00      	cmp	r3, #0
 800410e:	d106      	bne.n	800411e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004110:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004114:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004118:	2b00      	cmp	r3, #0
 800411a:	f000 80d1 	beq.w	80042c0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800411e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004122:	f003 0301 	and.w	r3, r3, #1
 8004126:	2b00      	cmp	r3, #0
 8004128:	d00b      	beq.n	8004142 <HAL_UART_IRQHandler+0xae>
 800412a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800412e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004132:	2b00      	cmp	r3, #0
 8004134:	d005      	beq.n	8004142 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413a:	f043 0201 	orr.w	r2, r3, #1
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004142:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004146:	f003 0304 	and.w	r3, r3, #4
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00b      	beq.n	8004166 <HAL_UART_IRQHandler+0xd2>
 800414e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004152:	f003 0301 	and.w	r3, r3, #1
 8004156:	2b00      	cmp	r3, #0
 8004158:	d005      	beq.n	8004166 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415e:	f043 0202 	orr.w	r2, r3, #2
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004166:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800416a:	f003 0302 	and.w	r3, r3, #2
 800416e:	2b00      	cmp	r3, #0
 8004170:	d00b      	beq.n	800418a <HAL_UART_IRQHandler+0xf6>
 8004172:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004176:	f003 0301 	and.w	r3, r3, #1
 800417a:	2b00      	cmp	r3, #0
 800417c:	d005      	beq.n	800418a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004182:	f043 0204 	orr.w	r2, r3, #4
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800418a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800418e:	f003 0308 	and.w	r3, r3, #8
 8004192:	2b00      	cmp	r3, #0
 8004194:	d011      	beq.n	80041ba <HAL_UART_IRQHandler+0x126>
 8004196:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800419a:	f003 0320 	and.w	r3, r3, #32
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d105      	bne.n	80041ae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80041a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041a6:	f003 0301 	and.w	r3, r3, #1
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d005      	beq.n	80041ba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b2:	f043 0208 	orr.w	r2, r3, #8
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041be:	2b00      	cmp	r3, #0
 80041c0:	f000 81ed 	beq.w	800459e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80041c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041c8:	f003 0320 	and.w	r3, r3, #32
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d008      	beq.n	80041e2 <HAL_UART_IRQHandler+0x14e>
 80041d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041d4:	f003 0320 	and.w	r3, r3, #32
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d002      	beq.n	80041e2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f000 fb24 	bl	800482a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	695b      	ldr	r3, [r3, #20]
 80041e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ec:	2b40      	cmp	r3, #64	; 0x40
 80041ee:	bf0c      	ite	eq
 80041f0:	2301      	moveq	r3, #1
 80041f2:	2300      	movne	r3, #0
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fe:	f003 0308 	and.w	r3, r3, #8
 8004202:	2b00      	cmp	r3, #0
 8004204:	d103      	bne.n	800420e <HAL_UART_IRQHandler+0x17a>
 8004206:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800420a:	2b00      	cmp	r3, #0
 800420c:	d04f      	beq.n	80042ae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f000 fa2c 	bl	800466c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	695b      	ldr	r3, [r3, #20]
 800421a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800421e:	2b40      	cmp	r3, #64	; 0x40
 8004220:	d141      	bne.n	80042a6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	3314      	adds	r3, #20
 8004228:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800422c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004230:	e853 3f00 	ldrex	r3, [r3]
 8004234:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004238:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800423c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004240:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	3314      	adds	r3, #20
 800424a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800424e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004252:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004256:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800425a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800425e:	e841 2300 	strex	r3, r2, [r1]
 8004262:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004266:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800426a:	2b00      	cmp	r3, #0
 800426c:	d1d9      	bne.n	8004222 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004272:	2b00      	cmp	r3, #0
 8004274:	d013      	beq.n	800429e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800427a:	4a7d      	ldr	r2, [pc, #500]	; (8004470 <HAL_UART_IRQHandler+0x3dc>)
 800427c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004282:	4618      	mov	r0, r3
 8004284:	f7fe fa23 	bl	80026ce <HAL_DMA_Abort_IT>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d016      	beq.n	80042bc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004292:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004298:	4610      	mov	r0, r2
 800429a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800429c:	e00e      	b.n	80042bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f000 f990 	bl	80045c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042a4:	e00a      	b.n	80042bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f000 f98c 	bl	80045c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042ac:	e006      	b.n	80042bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f000 f988 	bl	80045c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2200      	movs	r2, #0
 80042b8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80042ba:	e170      	b.n	800459e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042bc:	bf00      	nop
    return;
 80042be:	e16e      	b.n	800459e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	f040 814a 	bne.w	800455e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80042ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042ce:	f003 0310 	and.w	r3, r3, #16
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	f000 8143 	beq.w	800455e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80042d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042dc:	f003 0310 	and.w	r3, r3, #16
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	f000 813c 	beq.w	800455e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80042e6:	2300      	movs	r3, #0
 80042e8:	60bb      	str	r3, [r7, #8]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	60bb      	str	r3, [r7, #8]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	60bb      	str	r3, [r7, #8]
 80042fa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	695b      	ldr	r3, [r3, #20]
 8004302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004306:	2b40      	cmp	r3, #64	; 0x40
 8004308:	f040 80b4 	bne.w	8004474 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004318:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800431c:	2b00      	cmp	r3, #0
 800431e:	f000 8140 	beq.w	80045a2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004326:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800432a:	429a      	cmp	r2, r3
 800432c:	f080 8139 	bcs.w	80045a2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004336:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800433c:	69db      	ldr	r3, [r3, #28]
 800433e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004342:	f000 8088 	beq.w	8004456 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	330c      	adds	r3, #12
 800434c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004350:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004354:	e853 3f00 	ldrex	r3, [r3]
 8004358:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800435c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004360:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004364:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	330c      	adds	r3, #12
 800436e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004372:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004376:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800437a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800437e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004382:	e841 2300 	strex	r3, r2, [r1]
 8004386:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800438a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800438e:	2b00      	cmp	r3, #0
 8004390:	d1d9      	bne.n	8004346 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	3314      	adds	r3, #20
 8004398:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800439a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800439c:	e853 3f00 	ldrex	r3, [r3]
 80043a0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80043a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80043a4:	f023 0301 	bic.w	r3, r3, #1
 80043a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	3314      	adds	r3, #20
 80043b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80043b6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80043ba:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043bc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80043be:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80043c2:	e841 2300 	strex	r3, r2, [r1]
 80043c6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80043c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d1e1      	bne.n	8004392 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	3314      	adds	r3, #20
 80043d4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043d8:	e853 3f00 	ldrex	r3, [r3]
 80043dc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80043de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	3314      	adds	r3, #20
 80043ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80043f2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80043f4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80043f8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80043fa:	e841 2300 	strex	r3, r2, [r1]
 80043fe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004400:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004402:	2b00      	cmp	r3, #0
 8004404:	d1e3      	bne.n	80043ce <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2220      	movs	r2, #32
 800440a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	330c      	adds	r3, #12
 800441a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800441c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800441e:	e853 3f00 	ldrex	r3, [r3]
 8004422:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004424:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004426:	f023 0310 	bic.w	r3, r3, #16
 800442a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	330c      	adds	r3, #12
 8004434:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004438:	65ba      	str	r2, [r7, #88]	; 0x58
 800443a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800443c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800443e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004440:	e841 2300 	strex	r3, r2, [r1]
 8004444:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004446:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004448:	2b00      	cmp	r3, #0
 800444a:	d1e3      	bne.n	8004414 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004450:	4618      	mov	r0, r3
 8004452:	f7fe f8cc 	bl	80025ee <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800445e:	b29b      	uxth	r3, r3
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	b29b      	uxth	r3, r3
 8004464:	4619      	mov	r1, r3
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f000 f8b6 	bl	80045d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800446c:	e099      	b.n	80045a2 <HAL_UART_IRQHandler+0x50e>
 800446e:	bf00      	nop
 8004470:	08004733 	.word	0x08004733
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800447c:	b29b      	uxth	r3, r3
 800447e:	1ad3      	subs	r3, r2, r3
 8004480:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004488:	b29b      	uxth	r3, r3
 800448a:	2b00      	cmp	r3, #0
 800448c:	f000 808b 	beq.w	80045a6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004490:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004494:	2b00      	cmp	r3, #0
 8004496:	f000 8086 	beq.w	80045a6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	330c      	adds	r3, #12
 80044a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044a4:	e853 3f00 	ldrex	r3, [r3]
 80044a8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80044aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80044b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	330c      	adds	r3, #12
 80044ba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80044be:	647a      	str	r2, [r7, #68]	; 0x44
 80044c0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80044c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80044c6:	e841 2300 	strex	r3, r2, [r1]
 80044ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80044cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d1e3      	bne.n	800449a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	3314      	adds	r3, #20
 80044d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044dc:	e853 3f00 	ldrex	r3, [r3]
 80044e0:	623b      	str	r3, [r7, #32]
   return(result);
 80044e2:	6a3b      	ldr	r3, [r7, #32]
 80044e4:	f023 0301 	bic.w	r3, r3, #1
 80044e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	3314      	adds	r3, #20
 80044f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80044f6:	633a      	str	r2, [r7, #48]	; 0x30
 80044f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80044fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044fe:	e841 2300 	strex	r3, r2, [r1]
 8004502:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004506:	2b00      	cmp	r3, #0
 8004508:	d1e3      	bne.n	80044d2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2220      	movs	r2, #32
 800450e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2200      	movs	r2, #0
 8004516:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	330c      	adds	r3, #12
 800451e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	e853 3f00 	ldrex	r3, [r3]
 8004526:	60fb      	str	r3, [r7, #12]
   return(result);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f023 0310 	bic.w	r3, r3, #16
 800452e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	330c      	adds	r3, #12
 8004538:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800453c:	61fa      	str	r2, [r7, #28]
 800453e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004540:	69b9      	ldr	r1, [r7, #24]
 8004542:	69fa      	ldr	r2, [r7, #28]
 8004544:	e841 2300 	strex	r3, r2, [r1]
 8004548:	617b      	str	r3, [r7, #20]
   return(result);
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d1e3      	bne.n	8004518 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004550:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004554:	4619      	mov	r1, r3
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f000 f83e 	bl	80045d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800455c:	e023      	b.n	80045a6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800455e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004566:	2b00      	cmp	r3, #0
 8004568:	d009      	beq.n	800457e <HAL_UART_IRQHandler+0x4ea>
 800456a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800456e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004572:	2b00      	cmp	r3, #0
 8004574:	d003      	beq.n	800457e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f000 f8ef 	bl	800475a <UART_Transmit_IT>
    return;
 800457c:	e014      	b.n	80045a8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800457e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004586:	2b00      	cmp	r3, #0
 8004588:	d00e      	beq.n	80045a8 <HAL_UART_IRQHandler+0x514>
 800458a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800458e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004592:	2b00      	cmp	r3, #0
 8004594:	d008      	beq.n	80045a8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 f92f 	bl	80047fa <UART_EndTransmit_IT>
    return;
 800459c:	e004      	b.n	80045a8 <HAL_UART_IRQHandler+0x514>
    return;
 800459e:	bf00      	nop
 80045a0:	e002      	b.n	80045a8 <HAL_UART_IRQHandler+0x514>
      return;
 80045a2:	bf00      	nop
 80045a4:	e000      	b.n	80045a8 <HAL_UART_IRQHandler+0x514>
      return;
 80045a6:	bf00      	nop
  }
}
 80045a8:	37e8      	adds	r7, #232	; 0xe8
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop

080045b0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b083      	sub	sp, #12
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80045b8:	bf00      	nop
 80045ba:	370c      	adds	r7, #12
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr

080045c4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b083      	sub	sp, #12
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80045cc:	bf00      	nop
 80045ce:	370c      	adds	r7, #12
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr

080045d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80045d8:	b480      	push	{r7}
 80045da:	b083      	sub	sp, #12
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	460b      	mov	r3, r1
 80045e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80045e4:	bf00      	nop
 80045e6:	370c      	adds	r7, #12
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr

080045f0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b085      	sub	sp, #20
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	60b9      	str	r1, [r7, #8]
 80045fa:	4613      	mov	r3, r2
 80045fc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	68ba      	ldr	r2, [r7, #8]
 8004602:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	88fa      	ldrh	r2, [r7, #6]
 8004608:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	88fa      	ldrh	r2, [r7, #6]
 800460e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2200      	movs	r2, #0
 8004614:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2222      	movs	r2, #34	; 0x22
 800461a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2200      	movs	r2, #0
 8004622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	691b      	ldr	r3, [r3, #16]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d007      	beq.n	800463e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	68da      	ldr	r2, [r3, #12]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800463c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	695a      	ldr	r2, [r3, #20]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f042 0201 	orr.w	r2, r2, #1
 800464c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	68da      	ldr	r2, [r3, #12]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f042 0220 	orr.w	r2, r2, #32
 800465c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800465e:	2300      	movs	r3, #0
}
 8004660:	4618      	mov	r0, r3
 8004662:	3714      	adds	r7, #20
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr

0800466c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800466c:	b480      	push	{r7}
 800466e:	b095      	sub	sp, #84	; 0x54
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	330c      	adds	r3, #12
 800467a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800467c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800467e:	e853 3f00 	ldrex	r3, [r3]
 8004682:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004686:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800468a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	330c      	adds	r3, #12
 8004692:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004694:	643a      	str	r2, [r7, #64]	; 0x40
 8004696:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004698:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800469a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800469c:	e841 2300 	strex	r3, r2, [r1]
 80046a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80046a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d1e5      	bne.n	8004674 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	3314      	adds	r3, #20
 80046ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046b0:	6a3b      	ldr	r3, [r7, #32]
 80046b2:	e853 3f00 	ldrex	r3, [r3]
 80046b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	f023 0301 	bic.w	r3, r3, #1
 80046be:	64bb      	str	r3, [r7, #72]	; 0x48
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	3314      	adds	r3, #20
 80046c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80046c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80046ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80046ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046d0:	e841 2300 	strex	r3, r2, [r1]
 80046d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80046d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d1e5      	bne.n	80046a8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d119      	bne.n	8004718 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	330c      	adds	r3, #12
 80046ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	e853 3f00 	ldrex	r3, [r3]
 80046f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	f023 0310 	bic.w	r3, r3, #16
 80046fa:	647b      	str	r3, [r7, #68]	; 0x44
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	330c      	adds	r3, #12
 8004702:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004704:	61ba      	str	r2, [r7, #24]
 8004706:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004708:	6979      	ldr	r1, [r7, #20]
 800470a:	69ba      	ldr	r2, [r7, #24]
 800470c:	e841 2300 	strex	r3, r2, [r1]
 8004710:	613b      	str	r3, [r7, #16]
   return(result);
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d1e5      	bne.n	80046e4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2220      	movs	r2, #32
 800471c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004726:	bf00      	nop
 8004728:	3754      	adds	r7, #84	; 0x54
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr

08004732 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004732:	b580      	push	{r7, lr}
 8004734:	b084      	sub	sp, #16
 8004736:	af00      	add	r7, sp, #0
 8004738:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800473e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2200      	movs	r2, #0
 8004744:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2200      	movs	r2, #0
 800474a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800474c:	68f8      	ldr	r0, [r7, #12]
 800474e:	f7ff ff39 	bl	80045c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004752:	bf00      	nop
 8004754:	3710      	adds	r7, #16
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}

0800475a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800475a:	b480      	push	{r7}
 800475c:	b085      	sub	sp, #20
 800475e:	af00      	add	r7, sp, #0
 8004760:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004768:	b2db      	uxtb	r3, r3
 800476a:	2b21      	cmp	r3, #33	; 0x21
 800476c:	d13e      	bne.n	80047ec <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004776:	d114      	bne.n	80047a2 <UART_Transmit_IT+0x48>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	691b      	ldr	r3, [r3, #16]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d110      	bne.n	80047a2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6a1b      	ldr	r3, [r3, #32]
 8004784:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	881b      	ldrh	r3, [r3, #0]
 800478a:	461a      	mov	r2, r3
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004794:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6a1b      	ldr	r3, [r3, #32]
 800479a:	1c9a      	adds	r2, r3, #2
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	621a      	str	r2, [r3, #32]
 80047a0:	e008      	b.n	80047b4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6a1b      	ldr	r3, [r3, #32]
 80047a6:	1c59      	adds	r1, r3, #1
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	6211      	str	r1, [r2, #32]
 80047ac:	781a      	ldrb	r2, [r3, #0]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	3b01      	subs	r3, #1
 80047bc:	b29b      	uxth	r3, r3
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	4619      	mov	r1, r3
 80047c2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d10f      	bne.n	80047e8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	68da      	ldr	r2, [r3, #12]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80047d6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	68da      	ldr	r2, [r3, #12]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047e6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80047e8:	2300      	movs	r3, #0
 80047ea:	e000      	b.n	80047ee <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80047ec:	2302      	movs	r3, #2
  }
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3714      	adds	r7, #20
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr

080047fa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80047fa:	b580      	push	{r7, lr}
 80047fc:	b082      	sub	sp, #8
 80047fe:	af00      	add	r7, sp, #0
 8004800:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	68da      	ldr	r2, [r3, #12]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004810:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2220      	movs	r2, #32
 8004816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f7ff fec8 	bl	80045b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004820:	2300      	movs	r3, #0
}
 8004822:	4618      	mov	r0, r3
 8004824:	3708      	adds	r7, #8
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}

0800482a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800482a:	b580      	push	{r7, lr}
 800482c:	b08c      	sub	sp, #48	; 0x30
 800482e:	af00      	add	r7, sp, #0
 8004830:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004838:	b2db      	uxtb	r3, r3
 800483a:	2b22      	cmp	r3, #34	; 0x22
 800483c:	f040 80ab 	bne.w	8004996 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004848:	d117      	bne.n	800487a <UART_Receive_IT+0x50>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	691b      	ldr	r3, [r3, #16]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d113      	bne.n	800487a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004852:	2300      	movs	r3, #0
 8004854:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800485a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	b29b      	uxth	r3, r3
 8004864:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004868:	b29a      	uxth	r2, r3
 800486a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800486c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004872:	1c9a      	adds	r2, r3, #2
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	629a      	str	r2, [r3, #40]	; 0x28
 8004878:	e026      	b.n	80048c8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800487e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004880:	2300      	movs	r3, #0
 8004882:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800488c:	d007      	beq.n	800489e <UART_Receive_IT+0x74>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d10a      	bne.n	80048ac <UART_Receive_IT+0x82>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	691b      	ldr	r3, [r3, #16]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d106      	bne.n	80048ac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	b2da      	uxtb	r2, r3
 80048a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048a8:	701a      	strb	r2, [r3, #0]
 80048aa:	e008      	b.n	80048be <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048b8:	b2da      	uxtb	r2, r3
 80048ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048bc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048c2:	1c5a      	adds	r2, r3, #1
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	3b01      	subs	r3, #1
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	4619      	mov	r1, r3
 80048d6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d15a      	bne.n	8004992 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	68da      	ldr	r2, [r3, #12]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f022 0220 	bic.w	r2, r2, #32
 80048ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	68da      	ldr	r2, [r3, #12]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80048fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	695a      	ldr	r2, [r3, #20]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f022 0201 	bic.w	r2, r2, #1
 800490a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2220      	movs	r2, #32
 8004910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004918:	2b01      	cmp	r3, #1
 800491a:	d135      	bne.n	8004988 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	330c      	adds	r3, #12
 8004928:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	e853 3f00 	ldrex	r3, [r3]
 8004930:	613b      	str	r3, [r7, #16]
   return(result);
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	f023 0310 	bic.w	r3, r3, #16
 8004938:	627b      	str	r3, [r7, #36]	; 0x24
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	330c      	adds	r3, #12
 8004940:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004942:	623a      	str	r2, [r7, #32]
 8004944:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004946:	69f9      	ldr	r1, [r7, #28]
 8004948:	6a3a      	ldr	r2, [r7, #32]
 800494a:	e841 2300 	strex	r3, r2, [r1]
 800494e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004950:	69bb      	ldr	r3, [r7, #24]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d1e5      	bne.n	8004922 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 0310 	and.w	r3, r3, #16
 8004960:	2b10      	cmp	r3, #16
 8004962:	d10a      	bne.n	800497a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004964:	2300      	movs	r3, #0
 8004966:	60fb      	str	r3, [r7, #12]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	60fb      	str	r3, [r7, #12]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	60fb      	str	r3, [r7, #12]
 8004978:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800497e:	4619      	mov	r1, r3
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f7ff fe29 	bl	80045d8 <HAL_UARTEx_RxEventCallback>
 8004986:	e002      	b.n	800498e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f7fc ff5f 	bl	800184c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800498e:	2300      	movs	r3, #0
 8004990:	e002      	b.n	8004998 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004992:	2300      	movs	r3, #0
 8004994:	e000      	b.n	8004998 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004996:	2302      	movs	r3, #2
  }
}
 8004998:	4618      	mov	r0, r3
 800499a:	3730      	adds	r7, #48	; 0x30
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}

080049a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049a4:	b0c0      	sub	sp, #256	; 0x100
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	691b      	ldr	r3, [r3, #16]
 80049b4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80049b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049bc:	68d9      	ldr	r1, [r3, #12]
 80049be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	ea40 0301 	orr.w	r3, r0, r1
 80049c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80049ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049ce:	689a      	ldr	r2, [r3, #8]
 80049d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049d4:	691b      	ldr	r3, [r3, #16]
 80049d6:	431a      	orrs	r2, r3
 80049d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049dc:	695b      	ldr	r3, [r3, #20]
 80049de:	431a      	orrs	r2, r3
 80049e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049e4:	69db      	ldr	r3, [r3, #28]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80049ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80049f8:	f021 010c 	bic.w	r1, r1, #12
 80049fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004a06:	430b      	orrs	r3, r1
 8004a08:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	695b      	ldr	r3, [r3, #20]
 8004a12:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004a16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a1a:	6999      	ldr	r1, [r3, #24]
 8004a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	ea40 0301 	orr.w	r3, r0, r1
 8004a26:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	4b8f      	ldr	r3, [pc, #572]	; (8004c6c <UART_SetConfig+0x2cc>)
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d005      	beq.n	8004a40 <UART_SetConfig+0xa0>
 8004a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	4b8d      	ldr	r3, [pc, #564]	; (8004c70 <UART_SetConfig+0x2d0>)
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d104      	bne.n	8004a4a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a40:	f7fe fde6 	bl	8003610 <HAL_RCC_GetPCLK2Freq>
 8004a44:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004a48:	e003      	b.n	8004a52 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a4a:	f7fe fdcd 	bl	80035e8 <HAL_RCC_GetPCLK1Freq>
 8004a4e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a56:	69db      	ldr	r3, [r3, #28]
 8004a58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a5c:	f040 810c 	bne.w	8004c78 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a64:	2200      	movs	r2, #0
 8004a66:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004a6a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004a6e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004a72:	4622      	mov	r2, r4
 8004a74:	462b      	mov	r3, r5
 8004a76:	1891      	adds	r1, r2, r2
 8004a78:	65b9      	str	r1, [r7, #88]	; 0x58
 8004a7a:	415b      	adcs	r3, r3
 8004a7c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a7e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004a82:	4621      	mov	r1, r4
 8004a84:	eb12 0801 	adds.w	r8, r2, r1
 8004a88:	4629      	mov	r1, r5
 8004a8a:	eb43 0901 	adc.w	r9, r3, r1
 8004a8e:	f04f 0200 	mov.w	r2, #0
 8004a92:	f04f 0300 	mov.w	r3, #0
 8004a96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004aa2:	4690      	mov	r8, r2
 8004aa4:	4699      	mov	r9, r3
 8004aa6:	4623      	mov	r3, r4
 8004aa8:	eb18 0303 	adds.w	r3, r8, r3
 8004aac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004ab0:	462b      	mov	r3, r5
 8004ab2:	eb49 0303 	adc.w	r3, r9, r3
 8004ab6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004aba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004ac6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004aca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004ace:	460b      	mov	r3, r1
 8004ad0:	18db      	adds	r3, r3, r3
 8004ad2:	653b      	str	r3, [r7, #80]	; 0x50
 8004ad4:	4613      	mov	r3, r2
 8004ad6:	eb42 0303 	adc.w	r3, r2, r3
 8004ada:	657b      	str	r3, [r7, #84]	; 0x54
 8004adc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004ae0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004ae4:	f7fc f8e0 	bl	8000ca8 <__aeabi_uldivmod>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	460b      	mov	r3, r1
 8004aec:	4b61      	ldr	r3, [pc, #388]	; (8004c74 <UART_SetConfig+0x2d4>)
 8004aee:	fba3 2302 	umull	r2, r3, r3, r2
 8004af2:	095b      	lsrs	r3, r3, #5
 8004af4:	011c      	lsls	r4, r3, #4
 8004af6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004afa:	2200      	movs	r2, #0
 8004afc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004b00:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004b04:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004b08:	4642      	mov	r2, r8
 8004b0a:	464b      	mov	r3, r9
 8004b0c:	1891      	adds	r1, r2, r2
 8004b0e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004b10:	415b      	adcs	r3, r3
 8004b12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b14:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004b18:	4641      	mov	r1, r8
 8004b1a:	eb12 0a01 	adds.w	sl, r2, r1
 8004b1e:	4649      	mov	r1, r9
 8004b20:	eb43 0b01 	adc.w	fp, r3, r1
 8004b24:	f04f 0200 	mov.w	r2, #0
 8004b28:	f04f 0300 	mov.w	r3, #0
 8004b2c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004b30:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004b34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b38:	4692      	mov	sl, r2
 8004b3a:	469b      	mov	fp, r3
 8004b3c:	4643      	mov	r3, r8
 8004b3e:	eb1a 0303 	adds.w	r3, sl, r3
 8004b42:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004b46:	464b      	mov	r3, r9
 8004b48:	eb4b 0303 	adc.w	r3, fp, r3
 8004b4c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	2200      	movs	r2, #0
 8004b58:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004b5c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004b60:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004b64:	460b      	mov	r3, r1
 8004b66:	18db      	adds	r3, r3, r3
 8004b68:	643b      	str	r3, [r7, #64]	; 0x40
 8004b6a:	4613      	mov	r3, r2
 8004b6c:	eb42 0303 	adc.w	r3, r2, r3
 8004b70:	647b      	str	r3, [r7, #68]	; 0x44
 8004b72:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004b76:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004b7a:	f7fc f895 	bl	8000ca8 <__aeabi_uldivmod>
 8004b7e:	4602      	mov	r2, r0
 8004b80:	460b      	mov	r3, r1
 8004b82:	4611      	mov	r1, r2
 8004b84:	4b3b      	ldr	r3, [pc, #236]	; (8004c74 <UART_SetConfig+0x2d4>)
 8004b86:	fba3 2301 	umull	r2, r3, r3, r1
 8004b8a:	095b      	lsrs	r3, r3, #5
 8004b8c:	2264      	movs	r2, #100	; 0x64
 8004b8e:	fb02 f303 	mul.w	r3, r2, r3
 8004b92:	1acb      	subs	r3, r1, r3
 8004b94:	00db      	lsls	r3, r3, #3
 8004b96:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004b9a:	4b36      	ldr	r3, [pc, #216]	; (8004c74 <UART_SetConfig+0x2d4>)
 8004b9c:	fba3 2302 	umull	r2, r3, r3, r2
 8004ba0:	095b      	lsrs	r3, r3, #5
 8004ba2:	005b      	lsls	r3, r3, #1
 8004ba4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ba8:	441c      	add	r4, r3
 8004baa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004bb4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004bb8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004bbc:	4642      	mov	r2, r8
 8004bbe:	464b      	mov	r3, r9
 8004bc0:	1891      	adds	r1, r2, r2
 8004bc2:	63b9      	str	r1, [r7, #56]	; 0x38
 8004bc4:	415b      	adcs	r3, r3
 8004bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bc8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004bcc:	4641      	mov	r1, r8
 8004bce:	1851      	adds	r1, r2, r1
 8004bd0:	6339      	str	r1, [r7, #48]	; 0x30
 8004bd2:	4649      	mov	r1, r9
 8004bd4:	414b      	adcs	r3, r1
 8004bd6:	637b      	str	r3, [r7, #52]	; 0x34
 8004bd8:	f04f 0200 	mov.w	r2, #0
 8004bdc:	f04f 0300 	mov.w	r3, #0
 8004be0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004be4:	4659      	mov	r1, fp
 8004be6:	00cb      	lsls	r3, r1, #3
 8004be8:	4651      	mov	r1, sl
 8004bea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bee:	4651      	mov	r1, sl
 8004bf0:	00ca      	lsls	r2, r1, #3
 8004bf2:	4610      	mov	r0, r2
 8004bf4:	4619      	mov	r1, r3
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	4642      	mov	r2, r8
 8004bfa:	189b      	adds	r3, r3, r2
 8004bfc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c00:	464b      	mov	r3, r9
 8004c02:	460a      	mov	r2, r1
 8004c04:	eb42 0303 	adc.w	r3, r2, r3
 8004c08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004c18:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004c1c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004c20:	460b      	mov	r3, r1
 8004c22:	18db      	adds	r3, r3, r3
 8004c24:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c26:	4613      	mov	r3, r2
 8004c28:	eb42 0303 	adc.w	r3, r2, r3
 8004c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c2e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004c32:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004c36:	f7fc f837 	bl	8000ca8 <__aeabi_uldivmod>
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	460b      	mov	r3, r1
 8004c3e:	4b0d      	ldr	r3, [pc, #52]	; (8004c74 <UART_SetConfig+0x2d4>)
 8004c40:	fba3 1302 	umull	r1, r3, r3, r2
 8004c44:	095b      	lsrs	r3, r3, #5
 8004c46:	2164      	movs	r1, #100	; 0x64
 8004c48:	fb01 f303 	mul.w	r3, r1, r3
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	00db      	lsls	r3, r3, #3
 8004c50:	3332      	adds	r3, #50	; 0x32
 8004c52:	4a08      	ldr	r2, [pc, #32]	; (8004c74 <UART_SetConfig+0x2d4>)
 8004c54:	fba2 2303 	umull	r2, r3, r2, r3
 8004c58:	095b      	lsrs	r3, r3, #5
 8004c5a:	f003 0207 	and.w	r2, r3, #7
 8004c5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4422      	add	r2, r4
 8004c66:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004c68:	e106      	b.n	8004e78 <UART_SetConfig+0x4d8>
 8004c6a:	bf00      	nop
 8004c6c:	40011000 	.word	0x40011000
 8004c70:	40011400 	.word	0x40011400
 8004c74:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004c82:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004c86:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004c8a:	4642      	mov	r2, r8
 8004c8c:	464b      	mov	r3, r9
 8004c8e:	1891      	adds	r1, r2, r2
 8004c90:	6239      	str	r1, [r7, #32]
 8004c92:	415b      	adcs	r3, r3
 8004c94:	627b      	str	r3, [r7, #36]	; 0x24
 8004c96:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c9a:	4641      	mov	r1, r8
 8004c9c:	1854      	adds	r4, r2, r1
 8004c9e:	4649      	mov	r1, r9
 8004ca0:	eb43 0501 	adc.w	r5, r3, r1
 8004ca4:	f04f 0200 	mov.w	r2, #0
 8004ca8:	f04f 0300 	mov.w	r3, #0
 8004cac:	00eb      	lsls	r3, r5, #3
 8004cae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004cb2:	00e2      	lsls	r2, r4, #3
 8004cb4:	4614      	mov	r4, r2
 8004cb6:	461d      	mov	r5, r3
 8004cb8:	4643      	mov	r3, r8
 8004cba:	18e3      	adds	r3, r4, r3
 8004cbc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004cc0:	464b      	mov	r3, r9
 8004cc2:	eb45 0303 	adc.w	r3, r5, r3
 8004cc6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004cca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004cd6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004cda:	f04f 0200 	mov.w	r2, #0
 8004cde:	f04f 0300 	mov.w	r3, #0
 8004ce2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004ce6:	4629      	mov	r1, r5
 8004ce8:	008b      	lsls	r3, r1, #2
 8004cea:	4621      	mov	r1, r4
 8004cec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cf0:	4621      	mov	r1, r4
 8004cf2:	008a      	lsls	r2, r1, #2
 8004cf4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004cf8:	f7fb ffd6 	bl	8000ca8 <__aeabi_uldivmod>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	460b      	mov	r3, r1
 8004d00:	4b60      	ldr	r3, [pc, #384]	; (8004e84 <UART_SetConfig+0x4e4>)
 8004d02:	fba3 2302 	umull	r2, r3, r3, r2
 8004d06:	095b      	lsrs	r3, r3, #5
 8004d08:	011c      	lsls	r4, r3, #4
 8004d0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004d14:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004d18:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004d1c:	4642      	mov	r2, r8
 8004d1e:	464b      	mov	r3, r9
 8004d20:	1891      	adds	r1, r2, r2
 8004d22:	61b9      	str	r1, [r7, #24]
 8004d24:	415b      	adcs	r3, r3
 8004d26:	61fb      	str	r3, [r7, #28]
 8004d28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d2c:	4641      	mov	r1, r8
 8004d2e:	1851      	adds	r1, r2, r1
 8004d30:	6139      	str	r1, [r7, #16]
 8004d32:	4649      	mov	r1, r9
 8004d34:	414b      	adcs	r3, r1
 8004d36:	617b      	str	r3, [r7, #20]
 8004d38:	f04f 0200 	mov.w	r2, #0
 8004d3c:	f04f 0300 	mov.w	r3, #0
 8004d40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d44:	4659      	mov	r1, fp
 8004d46:	00cb      	lsls	r3, r1, #3
 8004d48:	4651      	mov	r1, sl
 8004d4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d4e:	4651      	mov	r1, sl
 8004d50:	00ca      	lsls	r2, r1, #3
 8004d52:	4610      	mov	r0, r2
 8004d54:	4619      	mov	r1, r3
 8004d56:	4603      	mov	r3, r0
 8004d58:	4642      	mov	r2, r8
 8004d5a:	189b      	adds	r3, r3, r2
 8004d5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004d60:	464b      	mov	r3, r9
 8004d62:	460a      	mov	r2, r1
 8004d64:	eb42 0303 	adc.w	r3, r2, r3
 8004d68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d76:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004d78:	f04f 0200 	mov.w	r2, #0
 8004d7c:	f04f 0300 	mov.w	r3, #0
 8004d80:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004d84:	4649      	mov	r1, r9
 8004d86:	008b      	lsls	r3, r1, #2
 8004d88:	4641      	mov	r1, r8
 8004d8a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d8e:	4641      	mov	r1, r8
 8004d90:	008a      	lsls	r2, r1, #2
 8004d92:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004d96:	f7fb ff87 	bl	8000ca8 <__aeabi_uldivmod>
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	460b      	mov	r3, r1
 8004d9e:	4611      	mov	r1, r2
 8004da0:	4b38      	ldr	r3, [pc, #224]	; (8004e84 <UART_SetConfig+0x4e4>)
 8004da2:	fba3 2301 	umull	r2, r3, r3, r1
 8004da6:	095b      	lsrs	r3, r3, #5
 8004da8:	2264      	movs	r2, #100	; 0x64
 8004daa:	fb02 f303 	mul.w	r3, r2, r3
 8004dae:	1acb      	subs	r3, r1, r3
 8004db0:	011b      	lsls	r3, r3, #4
 8004db2:	3332      	adds	r3, #50	; 0x32
 8004db4:	4a33      	ldr	r2, [pc, #204]	; (8004e84 <UART_SetConfig+0x4e4>)
 8004db6:	fba2 2303 	umull	r2, r3, r2, r3
 8004dba:	095b      	lsrs	r3, r3, #5
 8004dbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004dc0:	441c      	add	r4, r3
 8004dc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	673b      	str	r3, [r7, #112]	; 0x70
 8004dca:	677a      	str	r2, [r7, #116]	; 0x74
 8004dcc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004dd0:	4642      	mov	r2, r8
 8004dd2:	464b      	mov	r3, r9
 8004dd4:	1891      	adds	r1, r2, r2
 8004dd6:	60b9      	str	r1, [r7, #8]
 8004dd8:	415b      	adcs	r3, r3
 8004dda:	60fb      	str	r3, [r7, #12]
 8004ddc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004de0:	4641      	mov	r1, r8
 8004de2:	1851      	adds	r1, r2, r1
 8004de4:	6039      	str	r1, [r7, #0]
 8004de6:	4649      	mov	r1, r9
 8004de8:	414b      	adcs	r3, r1
 8004dea:	607b      	str	r3, [r7, #4]
 8004dec:	f04f 0200 	mov.w	r2, #0
 8004df0:	f04f 0300 	mov.w	r3, #0
 8004df4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004df8:	4659      	mov	r1, fp
 8004dfa:	00cb      	lsls	r3, r1, #3
 8004dfc:	4651      	mov	r1, sl
 8004dfe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e02:	4651      	mov	r1, sl
 8004e04:	00ca      	lsls	r2, r1, #3
 8004e06:	4610      	mov	r0, r2
 8004e08:	4619      	mov	r1, r3
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	4642      	mov	r2, r8
 8004e0e:	189b      	adds	r3, r3, r2
 8004e10:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e12:	464b      	mov	r3, r9
 8004e14:	460a      	mov	r2, r1
 8004e16:	eb42 0303 	adc.w	r3, r2, r3
 8004e1a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	663b      	str	r3, [r7, #96]	; 0x60
 8004e26:	667a      	str	r2, [r7, #100]	; 0x64
 8004e28:	f04f 0200 	mov.w	r2, #0
 8004e2c:	f04f 0300 	mov.w	r3, #0
 8004e30:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004e34:	4649      	mov	r1, r9
 8004e36:	008b      	lsls	r3, r1, #2
 8004e38:	4641      	mov	r1, r8
 8004e3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e3e:	4641      	mov	r1, r8
 8004e40:	008a      	lsls	r2, r1, #2
 8004e42:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004e46:	f7fb ff2f 	bl	8000ca8 <__aeabi_uldivmod>
 8004e4a:	4602      	mov	r2, r0
 8004e4c:	460b      	mov	r3, r1
 8004e4e:	4b0d      	ldr	r3, [pc, #52]	; (8004e84 <UART_SetConfig+0x4e4>)
 8004e50:	fba3 1302 	umull	r1, r3, r3, r2
 8004e54:	095b      	lsrs	r3, r3, #5
 8004e56:	2164      	movs	r1, #100	; 0x64
 8004e58:	fb01 f303 	mul.w	r3, r1, r3
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	011b      	lsls	r3, r3, #4
 8004e60:	3332      	adds	r3, #50	; 0x32
 8004e62:	4a08      	ldr	r2, [pc, #32]	; (8004e84 <UART_SetConfig+0x4e4>)
 8004e64:	fba2 2303 	umull	r2, r3, r2, r3
 8004e68:	095b      	lsrs	r3, r3, #5
 8004e6a:	f003 020f 	and.w	r2, r3, #15
 8004e6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4422      	add	r2, r4
 8004e76:	609a      	str	r2, [r3, #8]
}
 8004e78:	bf00      	nop
 8004e7a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e84:	51eb851f 	.word	0x51eb851f

08004e88 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e88:	b084      	sub	sp, #16
 8004e8a:	b580      	push	{r7, lr}
 8004e8c:	b084      	sub	sp, #16
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	6078      	str	r0, [r7, #4]
 8004e92:	f107 001c 	add.w	r0, r7, #28
 8004e96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d122      	bne.n	8004ee6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004eb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	68db      	ldr	r3, [r3, #12]
 8004ec0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004ec8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d105      	bne.n	8004eda <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f000 faa2 	bl	8005424 <USB_CoreReset>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	73fb      	strb	r3, [r7, #15]
 8004ee4:	e01a      	b.n	8004f1c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	68db      	ldr	r3, [r3, #12]
 8004eea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f000 fa96 	bl	8005424 <USB_CoreReset>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004efc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d106      	bne.n	8004f10 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f06:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	639a      	str	r2, [r3, #56]	; 0x38
 8004f0e:	e005      	b.n	8004f1c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f14:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d10b      	bne.n	8004f3a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	f043 0206 	orr.w	r2, r3, #6
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	f043 0220 	orr.w	r2, r3, #32
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004f3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3710      	adds	r7, #16
 8004f40:	46bd      	mov	sp, r7
 8004f42:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f46:	b004      	add	sp, #16
 8004f48:	4770      	bx	lr

08004f4a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f4a:	b480      	push	{r7}
 8004f4c:	b083      	sub	sp, #12
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	f023 0201 	bic.w	r2, r3, #1
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f5e:	2300      	movs	r3, #0
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	370c      	adds	r7, #12
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr

08004f6c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b084      	sub	sp, #16
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	460b      	mov	r3, r1
 8004f76:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004f88:	78fb      	ldrb	r3, [r7, #3]
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d115      	bne.n	8004fba <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	68db      	ldr	r3, [r3, #12]
 8004f92:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004f9a:	2001      	movs	r0, #1
 8004f9c:	f7fd f9f2 	bl	8002384 <HAL_Delay>
      ms++;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	3301      	adds	r3, #1
 8004fa4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f000 fa2e 	bl	8005408 <USB_GetMode>
 8004fac:	4603      	mov	r3, r0
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d01e      	beq.n	8004ff0 <USB_SetCurrentMode+0x84>
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2b31      	cmp	r3, #49	; 0x31
 8004fb6:	d9f0      	bls.n	8004f9a <USB_SetCurrentMode+0x2e>
 8004fb8:	e01a      	b.n	8004ff0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004fba:	78fb      	ldrb	r3, [r7, #3]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d115      	bne.n	8004fec <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004fcc:	2001      	movs	r0, #1
 8004fce:	f7fd f9d9 	bl	8002384 <HAL_Delay>
      ms++;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	3301      	adds	r3, #1
 8004fd6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f000 fa15 	bl	8005408 <USB_GetMode>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d005      	beq.n	8004ff0 <USB_SetCurrentMode+0x84>
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2b31      	cmp	r3, #49	; 0x31
 8004fe8:	d9f0      	bls.n	8004fcc <USB_SetCurrentMode+0x60>
 8004fea:	e001      	b.n	8004ff0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	e005      	b.n	8004ffc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2b32      	cmp	r3, #50	; 0x32
 8004ff4:	d101      	bne.n	8004ffa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e000      	b.n	8004ffc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004ffa:	2300      	movs	r3, #0
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3710      	adds	r7, #16
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}

08005004 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005004:	b084      	sub	sp, #16
 8005006:	b580      	push	{r7, lr}
 8005008:	b086      	sub	sp, #24
 800500a:	af00      	add	r7, sp, #0
 800500c:	6078      	str	r0, [r7, #4]
 800500e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005012:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005016:	2300      	movs	r3, #0
 8005018:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800501e:	2300      	movs	r3, #0
 8005020:	613b      	str	r3, [r7, #16]
 8005022:	e009      	b.n	8005038 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	3340      	adds	r3, #64	; 0x40
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	4413      	add	r3, r2
 800502e:	2200      	movs	r2, #0
 8005030:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	3301      	adds	r3, #1
 8005036:	613b      	str	r3, [r7, #16]
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	2b0e      	cmp	r3, #14
 800503c:	d9f2      	bls.n	8005024 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800503e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005040:	2b00      	cmp	r3, #0
 8005042:	d11c      	bne.n	800507e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	68fa      	ldr	r2, [r7, #12]
 800504e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005052:	f043 0302 	orr.w	r3, r3, #2
 8005056:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800505c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005068:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005074:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	639a      	str	r2, [r3, #56]	; 0x38
 800507c:	e00b      	b.n	8005096 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005082:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800508e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800509c:	461a      	mov	r2, r3
 800509e:	2300      	movs	r3, #0
 80050a0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050a8:	4619      	mov	r1, r3
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050b0:	461a      	mov	r2, r3
 80050b2:	680b      	ldr	r3, [r1, #0]
 80050b4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80050b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d10c      	bne.n	80050d6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80050bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d104      	bne.n	80050cc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80050c2:	2100      	movs	r1, #0
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f000 f965 	bl	8005394 <USB_SetDevSpeed>
 80050ca:	e008      	b.n	80050de <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80050cc:	2101      	movs	r1, #1
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f000 f960 	bl	8005394 <USB_SetDevSpeed>
 80050d4:	e003      	b.n	80050de <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80050d6:	2103      	movs	r1, #3
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f000 f95b 	bl	8005394 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80050de:	2110      	movs	r1, #16
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f000 f8f3 	bl	80052cc <USB_FlushTxFifo>
 80050e6:	4603      	mov	r3, r0
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d001      	beq.n	80050f0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	f000 f91f 	bl	8005334 <USB_FlushRxFifo>
 80050f6:	4603      	mov	r3, r0
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d001      	beq.n	8005100 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005106:	461a      	mov	r2, r3
 8005108:	2300      	movs	r3, #0
 800510a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005112:	461a      	mov	r2, r3
 8005114:	2300      	movs	r3, #0
 8005116:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800511e:	461a      	mov	r2, r3
 8005120:	2300      	movs	r3, #0
 8005122:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005124:	2300      	movs	r3, #0
 8005126:	613b      	str	r3, [r7, #16]
 8005128:	e043      	b.n	80051b2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	015a      	lsls	r2, r3, #5
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	4413      	add	r3, r2
 8005132:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800513c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005140:	d118      	bne.n	8005174 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d10a      	bne.n	800515e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	015a      	lsls	r2, r3, #5
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	4413      	add	r3, r2
 8005150:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005154:	461a      	mov	r2, r3
 8005156:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800515a:	6013      	str	r3, [r2, #0]
 800515c:	e013      	b.n	8005186 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	015a      	lsls	r2, r3, #5
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	4413      	add	r3, r2
 8005166:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800516a:	461a      	mov	r2, r3
 800516c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005170:	6013      	str	r3, [r2, #0]
 8005172:	e008      	b.n	8005186 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	015a      	lsls	r2, r3, #5
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	4413      	add	r3, r2
 800517c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005180:	461a      	mov	r2, r3
 8005182:	2300      	movs	r3, #0
 8005184:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	015a      	lsls	r2, r3, #5
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	4413      	add	r3, r2
 800518e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005192:	461a      	mov	r2, r3
 8005194:	2300      	movs	r3, #0
 8005196:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	015a      	lsls	r2, r3, #5
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	4413      	add	r3, r2
 80051a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051a4:	461a      	mov	r2, r3
 80051a6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80051aa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	3301      	adds	r3, #1
 80051b0:	613b      	str	r3, [r7, #16]
 80051b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b4:	693a      	ldr	r2, [r7, #16]
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d3b7      	bcc.n	800512a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051ba:	2300      	movs	r3, #0
 80051bc:	613b      	str	r3, [r7, #16]
 80051be:	e043      	b.n	8005248 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	015a      	lsls	r2, r3, #5
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	4413      	add	r3, r2
 80051c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051d6:	d118      	bne.n	800520a <USB_DevInit+0x206>
    {
      if (i == 0U)
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d10a      	bne.n	80051f4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	015a      	lsls	r2, r3, #5
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	4413      	add	r3, r2
 80051e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ea:	461a      	mov	r2, r3
 80051ec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80051f0:	6013      	str	r3, [r2, #0]
 80051f2:	e013      	b.n	800521c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	015a      	lsls	r2, r3, #5
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	4413      	add	r3, r2
 80051fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005200:	461a      	mov	r2, r3
 8005202:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005206:	6013      	str	r3, [r2, #0]
 8005208:	e008      	b.n	800521c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	015a      	lsls	r2, r3, #5
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	4413      	add	r3, r2
 8005212:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005216:	461a      	mov	r2, r3
 8005218:	2300      	movs	r3, #0
 800521a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	015a      	lsls	r2, r3, #5
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	4413      	add	r3, r2
 8005224:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005228:	461a      	mov	r2, r3
 800522a:	2300      	movs	r3, #0
 800522c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	015a      	lsls	r2, r3, #5
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	4413      	add	r3, r2
 8005236:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800523a:	461a      	mov	r2, r3
 800523c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005240:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	3301      	adds	r3, #1
 8005246:	613b      	str	r3, [r7, #16]
 8005248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524a:	693a      	ldr	r2, [r7, #16]
 800524c:	429a      	cmp	r2, r3
 800524e:	d3b7      	bcc.n	80051c0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005256:	691b      	ldr	r3, [r3, #16]
 8005258:	68fa      	ldr	r2, [r7, #12]
 800525a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800525e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005262:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2200      	movs	r2, #0
 8005268:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005270:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005274:	2b00      	cmp	r3, #0
 8005276:	d105      	bne.n	8005284 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	699b      	ldr	r3, [r3, #24]
 800527c:	f043 0210 	orr.w	r2, r3, #16
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	699a      	ldr	r2, [r3, #24]
 8005288:	4b0f      	ldr	r3, [pc, #60]	; (80052c8 <USB_DevInit+0x2c4>)
 800528a:	4313      	orrs	r3, r2
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005290:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005292:	2b00      	cmp	r3, #0
 8005294:	d005      	beq.n	80052a2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	699b      	ldr	r3, [r3, #24]
 800529a:	f043 0208 	orr.w	r2, r3, #8
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80052a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d107      	bne.n	80052b8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	699b      	ldr	r3, [r3, #24]
 80052ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80052b0:	f043 0304 	orr.w	r3, r3, #4
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80052b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3718      	adds	r7, #24
 80052be:	46bd      	mov	sp, r7
 80052c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80052c4:	b004      	add	sp, #16
 80052c6:	4770      	bx	lr
 80052c8:	803c3800 	.word	0x803c3800

080052cc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b085      	sub	sp, #20
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80052d6:	2300      	movs	r3, #0
 80052d8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	3301      	adds	r3, #1
 80052de:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	4a13      	ldr	r2, [pc, #76]	; (8005330 <USB_FlushTxFifo+0x64>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d901      	bls.n	80052ec <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80052e8:	2303      	movs	r3, #3
 80052ea:	e01b      	b.n	8005324 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	691b      	ldr	r3, [r3, #16]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	daf2      	bge.n	80052da <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80052f4:	2300      	movs	r3, #0
 80052f6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	019b      	lsls	r3, r3, #6
 80052fc:	f043 0220 	orr.w	r2, r3, #32
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	3301      	adds	r3, #1
 8005308:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	4a08      	ldr	r2, [pc, #32]	; (8005330 <USB_FlushTxFifo+0x64>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d901      	bls.n	8005316 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005312:	2303      	movs	r3, #3
 8005314:	e006      	b.n	8005324 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	f003 0320 	and.w	r3, r3, #32
 800531e:	2b20      	cmp	r3, #32
 8005320:	d0f0      	beq.n	8005304 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005322:	2300      	movs	r3, #0
}
 8005324:	4618      	mov	r0, r3
 8005326:	3714      	adds	r7, #20
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr
 8005330:	00030d40 	.word	0x00030d40

08005334 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005334:	b480      	push	{r7}
 8005336:	b085      	sub	sp, #20
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800533c:	2300      	movs	r3, #0
 800533e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	3301      	adds	r3, #1
 8005344:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	4a11      	ldr	r2, [pc, #68]	; (8005390 <USB_FlushRxFifo+0x5c>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d901      	bls.n	8005352 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800534e:	2303      	movs	r3, #3
 8005350:	e018      	b.n	8005384 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	691b      	ldr	r3, [r3, #16]
 8005356:	2b00      	cmp	r3, #0
 8005358:	daf2      	bge.n	8005340 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800535a:	2300      	movs	r3, #0
 800535c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2210      	movs	r2, #16
 8005362:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	3301      	adds	r3, #1
 8005368:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	4a08      	ldr	r2, [pc, #32]	; (8005390 <USB_FlushRxFifo+0x5c>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d901      	bls.n	8005376 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005372:	2303      	movs	r3, #3
 8005374:	e006      	b.n	8005384 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	691b      	ldr	r3, [r3, #16]
 800537a:	f003 0310 	and.w	r3, r3, #16
 800537e:	2b10      	cmp	r3, #16
 8005380:	d0f0      	beq.n	8005364 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005382:	2300      	movs	r3, #0
}
 8005384:	4618      	mov	r0, r3
 8005386:	3714      	adds	r7, #20
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr
 8005390:	00030d40 	.word	0x00030d40

08005394 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005394:	b480      	push	{r7}
 8005396:	b085      	sub	sp, #20
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	460b      	mov	r3, r1
 800539e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	78fb      	ldrb	r3, [r7, #3]
 80053ae:	68f9      	ldr	r1, [r7, #12]
 80053b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053b4:	4313      	orrs	r3, r2
 80053b6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80053b8:	2300      	movs	r3, #0
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3714      	adds	r7, #20
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr

080053c6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80053c6:	b480      	push	{r7}
 80053c8:	b085      	sub	sp, #20
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	68fa      	ldr	r2, [r7, #12]
 80053dc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80053e0:	f023 0303 	bic.w	r3, r3, #3
 80053e4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	68fa      	ldr	r2, [r7, #12]
 80053f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053f4:	f043 0302 	orr.w	r3, r3, #2
 80053f8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80053fa:	2300      	movs	r3, #0
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3714      	adds	r7, #20
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr

08005408 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005408:	b480      	push	{r7}
 800540a:	b083      	sub	sp, #12
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	695b      	ldr	r3, [r3, #20]
 8005414:	f003 0301 	and.w	r3, r3, #1
}
 8005418:	4618      	mov	r0, r3
 800541a:	370c      	adds	r7, #12
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr

08005424 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005424:	b480      	push	{r7}
 8005426:	b085      	sub	sp, #20
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800542c:	2300      	movs	r3, #0
 800542e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	3301      	adds	r3, #1
 8005434:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	4a13      	ldr	r2, [pc, #76]	; (8005488 <USB_CoreReset+0x64>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d901      	bls.n	8005442 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800543e:	2303      	movs	r3, #3
 8005440:	e01b      	b.n	800547a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	691b      	ldr	r3, [r3, #16]
 8005446:	2b00      	cmp	r3, #0
 8005448:	daf2      	bge.n	8005430 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800544a:	2300      	movs	r3, #0
 800544c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	691b      	ldr	r3, [r3, #16]
 8005452:	f043 0201 	orr.w	r2, r3, #1
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	3301      	adds	r3, #1
 800545e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	4a09      	ldr	r2, [pc, #36]	; (8005488 <USB_CoreReset+0x64>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d901      	bls.n	800546c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005468:	2303      	movs	r3, #3
 800546a:	e006      	b.n	800547a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	691b      	ldr	r3, [r3, #16]
 8005470:	f003 0301 	and.w	r3, r3, #1
 8005474:	2b01      	cmp	r3, #1
 8005476:	d0f0      	beq.n	800545a <USB_CoreReset+0x36>

  return HAL_OK;
 8005478:	2300      	movs	r3, #0
}
 800547a:	4618      	mov	r0, r3
 800547c:	3714      	adds	r7, #20
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr
 8005486:	bf00      	nop
 8005488:	00030d40 	.word	0x00030d40

0800548c <_strtol_l.constprop.0>:
 800548c:	2b01      	cmp	r3, #1
 800548e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005492:	d001      	beq.n	8005498 <_strtol_l.constprop.0+0xc>
 8005494:	2b24      	cmp	r3, #36	; 0x24
 8005496:	d906      	bls.n	80054a6 <_strtol_l.constprop.0+0x1a>
 8005498:	f001 f874 	bl	8006584 <__errno>
 800549c:	2316      	movs	r3, #22
 800549e:	6003      	str	r3, [r0, #0]
 80054a0:	2000      	movs	r0, #0
 80054a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054a6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800558c <_strtol_l.constprop.0+0x100>
 80054aa:	460d      	mov	r5, r1
 80054ac:	462e      	mov	r6, r5
 80054ae:	f815 4b01 	ldrb.w	r4, [r5], #1
 80054b2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80054b6:	f017 0708 	ands.w	r7, r7, #8
 80054ba:	d1f7      	bne.n	80054ac <_strtol_l.constprop.0+0x20>
 80054bc:	2c2d      	cmp	r4, #45	; 0x2d
 80054be:	d132      	bne.n	8005526 <_strtol_l.constprop.0+0x9a>
 80054c0:	782c      	ldrb	r4, [r5, #0]
 80054c2:	2701      	movs	r7, #1
 80054c4:	1cb5      	adds	r5, r6, #2
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d05b      	beq.n	8005582 <_strtol_l.constprop.0+0xf6>
 80054ca:	2b10      	cmp	r3, #16
 80054cc:	d109      	bne.n	80054e2 <_strtol_l.constprop.0+0x56>
 80054ce:	2c30      	cmp	r4, #48	; 0x30
 80054d0:	d107      	bne.n	80054e2 <_strtol_l.constprop.0+0x56>
 80054d2:	782c      	ldrb	r4, [r5, #0]
 80054d4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80054d8:	2c58      	cmp	r4, #88	; 0x58
 80054da:	d14d      	bne.n	8005578 <_strtol_l.constprop.0+0xec>
 80054dc:	786c      	ldrb	r4, [r5, #1]
 80054de:	2310      	movs	r3, #16
 80054e0:	3502      	adds	r5, #2
 80054e2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80054e6:	f108 38ff 	add.w	r8, r8, #4294967295
 80054ea:	f04f 0e00 	mov.w	lr, #0
 80054ee:	fbb8 f9f3 	udiv	r9, r8, r3
 80054f2:	4676      	mov	r6, lr
 80054f4:	fb03 8a19 	mls	sl, r3, r9, r8
 80054f8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80054fc:	f1bc 0f09 	cmp.w	ip, #9
 8005500:	d816      	bhi.n	8005530 <_strtol_l.constprop.0+0xa4>
 8005502:	4664      	mov	r4, ip
 8005504:	42a3      	cmp	r3, r4
 8005506:	dd24      	ble.n	8005552 <_strtol_l.constprop.0+0xc6>
 8005508:	f1be 3fff 	cmp.w	lr, #4294967295
 800550c:	d008      	beq.n	8005520 <_strtol_l.constprop.0+0x94>
 800550e:	45b1      	cmp	r9, r6
 8005510:	d31c      	bcc.n	800554c <_strtol_l.constprop.0+0xc0>
 8005512:	d101      	bne.n	8005518 <_strtol_l.constprop.0+0x8c>
 8005514:	45a2      	cmp	sl, r4
 8005516:	db19      	blt.n	800554c <_strtol_l.constprop.0+0xc0>
 8005518:	fb06 4603 	mla	r6, r6, r3, r4
 800551c:	f04f 0e01 	mov.w	lr, #1
 8005520:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005524:	e7e8      	b.n	80054f8 <_strtol_l.constprop.0+0x6c>
 8005526:	2c2b      	cmp	r4, #43	; 0x2b
 8005528:	bf04      	itt	eq
 800552a:	782c      	ldrbeq	r4, [r5, #0]
 800552c:	1cb5      	addeq	r5, r6, #2
 800552e:	e7ca      	b.n	80054c6 <_strtol_l.constprop.0+0x3a>
 8005530:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8005534:	f1bc 0f19 	cmp.w	ip, #25
 8005538:	d801      	bhi.n	800553e <_strtol_l.constprop.0+0xb2>
 800553a:	3c37      	subs	r4, #55	; 0x37
 800553c:	e7e2      	b.n	8005504 <_strtol_l.constprop.0+0x78>
 800553e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8005542:	f1bc 0f19 	cmp.w	ip, #25
 8005546:	d804      	bhi.n	8005552 <_strtol_l.constprop.0+0xc6>
 8005548:	3c57      	subs	r4, #87	; 0x57
 800554a:	e7db      	b.n	8005504 <_strtol_l.constprop.0+0x78>
 800554c:	f04f 3eff 	mov.w	lr, #4294967295
 8005550:	e7e6      	b.n	8005520 <_strtol_l.constprop.0+0x94>
 8005552:	f1be 3fff 	cmp.w	lr, #4294967295
 8005556:	d105      	bne.n	8005564 <_strtol_l.constprop.0+0xd8>
 8005558:	2322      	movs	r3, #34	; 0x22
 800555a:	6003      	str	r3, [r0, #0]
 800555c:	4646      	mov	r6, r8
 800555e:	b942      	cbnz	r2, 8005572 <_strtol_l.constprop.0+0xe6>
 8005560:	4630      	mov	r0, r6
 8005562:	e79e      	b.n	80054a2 <_strtol_l.constprop.0+0x16>
 8005564:	b107      	cbz	r7, 8005568 <_strtol_l.constprop.0+0xdc>
 8005566:	4276      	negs	r6, r6
 8005568:	2a00      	cmp	r2, #0
 800556a:	d0f9      	beq.n	8005560 <_strtol_l.constprop.0+0xd4>
 800556c:	f1be 0f00 	cmp.w	lr, #0
 8005570:	d000      	beq.n	8005574 <_strtol_l.constprop.0+0xe8>
 8005572:	1e69      	subs	r1, r5, #1
 8005574:	6011      	str	r1, [r2, #0]
 8005576:	e7f3      	b.n	8005560 <_strtol_l.constprop.0+0xd4>
 8005578:	2430      	movs	r4, #48	; 0x30
 800557a:	2b00      	cmp	r3, #0
 800557c:	d1b1      	bne.n	80054e2 <_strtol_l.constprop.0+0x56>
 800557e:	2308      	movs	r3, #8
 8005580:	e7af      	b.n	80054e2 <_strtol_l.constprop.0+0x56>
 8005582:	2c30      	cmp	r4, #48	; 0x30
 8005584:	d0a5      	beq.n	80054d2 <_strtol_l.constprop.0+0x46>
 8005586:	230a      	movs	r3, #10
 8005588:	e7ab      	b.n	80054e2 <_strtol_l.constprop.0+0x56>
 800558a:	bf00      	nop
 800558c:	08009d7d 	.word	0x08009d7d

08005590 <_strtol_r>:
 8005590:	f7ff bf7c 	b.w	800548c <_strtol_l.constprop.0>

08005594 <strtol>:
 8005594:	4613      	mov	r3, r2
 8005596:	460a      	mov	r2, r1
 8005598:	4601      	mov	r1, r0
 800559a:	4802      	ldr	r0, [pc, #8]	; (80055a4 <strtol+0x10>)
 800559c:	6800      	ldr	r0, [r0, #0]
 800559e:	f7ff bf75 	b.w	800548c <_strtol_l.constprop.0>
 80055a2:	bf00      	nop
 80055a4:	20000064 	.word	0x20000064

080055a8 <__cvt>:
 80055a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80055ac:	ec55 4b10 	vmov	r4, r5, d0
 80055b0:	2d00      	cmp	r5, #0
 80055b2:	460e      	mov	r6, r1
 80055b4:	4619      	mov	r1, r3
 80055b6:	462b      	mov	r3, r5
 80055b8:	bfbb      	ittet	lt
 80055ba:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80055be:	461d      	movlt	r5, r3
 80055c0:	2300      	movge	r3, #0
 80055c2:	232d      	movlt	r3, #45	; 0x2d
 80055c4:	700b      	strb	r3, [r1, #0]
 80055c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80055c8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80055cc:	4691      	mov	r9, r2
 80055ce:	f023 0820 	bic.w	r8, r3, #32
 80055d2:	bfbc      	itt	lt
 80055d4:	4622      	movlt	r2, r4
 80055d6:	4614      	movlt	r4, r2
 80055d8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80055dc:	d005      	beq.n	80055ea <__cvt+0x42>
 80055de:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80055e2:	d100      	bne.n	80055e6 <__cvt+0x3e>
 80055e4:	3601      	adds	r6, #1
 80055e6:	2102      	movs	r1, #2
 80055e8:	e000      	b.n	80055ec <__cvt+0x44>
 80055ea:	2103      	movs	r1, #3
 80055ec:	ab03      	add	r3, sp, #12
 80055ee:	9301      	str	r3, [sp, #4]
 80055f0:	ab02      	add	r3, sp, #8
 80055f2:	9300      	str	r3, [sp, #0]
 80055f4:	ec45 4b10 	vmov	d0, r4, r5
 80055f8:	4653      	mov	r3, sl
 80055fa:	4632      	mov	r2, r6
 80055fc:	f001 f880 	bl	8006700 <_dtoa_r>
 8005600:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005604:	4607      	mov	r7, r0
 8005606:	d102      	bne.n	800560e <__cvt+0x66>
 8005608:	f019 0f01 	tst.w	r9, #1
 800560c:	d022      	beq.n	8005654 <__cvt+0xac>
 800560e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005612:	eb07 0906 	add.w	r9, r7, r6
 8005616:	d110      	bne.n	800563a <__cvt+0x92>
 8005618:	783b      	ldrb	r3, [r7, #0]
 800561a:	2b30      	cmp	r3, #48	; 0x30
 800561c:	d10a      	bne.n	8005634 <__cvt+0x8c>
 800561e:	2200      	movs	r2, #0
 8005620:	2300      	movs	r3, #0
 8005622:	4620      	mov	r0, r4
 8005624:	4629      	mov	r1, r5
 8005626:	f7fb fa5f 	bl	8000ae8 <__aeabi_dcmpeq>
 800562a:	b918      	cbnz	r0, 8005634 <__cvt+0x8c>
 800562c:	f1c6 0601 	rsb	r6, r6, #1
 8005630:	f8ca 6000 	str.w	r6, [sl]
 8005634:	f8da 3000 	ldr.w	r3, [sl]
 8005638:	4499      	add	r9, r3
 800563a:	2200      	movs	r2, #0
 800563c:	2300      	movs	r3, #0
 800563e:	4620      	mov	r0, r4
 8005640:	4629      	mov	r1, r5
 8005642:	f7fb fa51 	bl	8000ae8 <__aeabi_dcmpeq>
 8005646:	b108      	cbz	r0, 800564c <__cvt+0xa4>
 8005648:	f8cd 900c 	str.w	r9, [sp, #12]
 800564c:	2230      	movs	r2, #48	; 0x30
 800564e:	9b03      	ldr	r3, [sp, #12]
 8005650:	454b      	cmp	r3, r9
 8005652:	d307      	bcc.n	8005664 <__cvt+0xbc>
 8005654:	9b03      	ldr	r3, [sp, #12]
 8005656:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005658:	1bdb      	subs	r3, r3, r7
 800565a:	4638      	mov	r0, r7
 800565c:	6013      	str	r3, [r2, #0]
 800565e:	b004      	add	sp, #16
 8005660:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005664:	1c59      	adds	r1, r3, #1
 8005666:	9103      	str	r1, [sp, #12]
 8005668:	701a      	strb	r2, [r3, #0]
 800566a:	e7f0      	b.n	800564e <__cvt+0xa6>

0800566c <__exponent>:
 800566c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800566e:	4603      	mov	r3, r0
 8005670:	2900      	cmp	r1, #0
 8005672:	bfb8      	it	lt
 8005674:	4249      	neglt	r1, r1
 8005676:	f803 2b02 	strb.w	r2, [r3], #2
 800567a:	bfb4      	ite	lt
 800567c:	222d      	movlt	r2, #45	; 0x2d
 800567e:	222b      	movge	r2, #43	; 0x2b
 8005680:	2909      	cmp	r1, #9
 8005682:	7042      	strb	r2, [r0, #1]
 8005684:	dd2a      	ble.n	80056dc <__exponent+0x70>
 8005686:	f10d 0207 	add.w	r2, sp, #7
 800568a:	4617      	mov	r7, r2
 800568c:	260a      	movs	r6, #10
 800568e:	4694      	mov	ip, r2
 8005690:	fb91 f5f6 	sdiv	r5, r1, r6
 8005694:	fb06 1415 	mls	r4, r6, r5, r1
 8005698:	3430      	adds	r4, #48	; 0x30
 800569a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800569e:	460c      	mov	r4, r1
 80056a0:	2c63      	cmp	r4, #99	; 0x63
 80056a2:	f102 32ff 	add.w	r2, r2, #4294967295
 80056a6:	4629      	mov	r1, r5
 80056a8:	dcf1      	bgt.n	800568e <__exponent+0x22>
 80056aa:	3130      	adds	r1, #48	; 0x30
 80056ac:	f1ac 0402 	sub.w	r4, ip, #2
 80056b0:	f802 1c01 	strb.w	r1, [r2, #-1]
 80056b4:	1c41      	adds	r1, r0, #1
 80056b6:	4622      	mov	r2, r4
 80056b8:	42ba      	cmp	r2, r7
 80056ba:	d30a      	bcc.n	80056d2 <__exponent+0x66>
 80056bc:	f10d 0209 	add.w	r2, sp, #9
 80056c0:	eba2 020c 	sub.w	r2, r2, ip
 80056c4:	42bc      	cmp	r4, r7
 80056c6:	bf88      	it	hi
 80056c8:	2200      	movhi	r2, #0
 80056ca:	4413      	add	r3, r2
 80056cc:	1a18      	subs	r0, r3, r0
 80056ce:	b003      	add	sp, #12
 80056d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056d2:	f812 5b01 	ldrb.w	r5, [r2], #1
 80056d6:	f801 5f01 	strb.w	r5, [r1, #1]!
 80056da:	e7ed      	b.n	80056b8 <__exponent+0x4c>
 80056dc:	2330      	movs	r3, #48	; 0x30
 80056de:	3130      	adds	r1, #48	; 0x30
 80056e0:	7083      	strb	r3, [r0, #2]
 80056e2:	70c1      	strb	r1, [r0, #3]
 80056e4:	1d03      	adds	r3, r0, #4
 80056e6:	e7f1      	b.n	80056cc <__exponent+0x60>

080056e8 <_printf_float>:
 80056e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056ec:	ed2d 8b02 	vpush	{d8}
 80056f0:	b08d      	sub	sp, #52	; 0x34
 80056f2:	460c      	mov	r4, r1
 80056f4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80056f8:	4616      	mov	r6, r2
 80056fa:	461f      	mov	r7, r3
 80056fc:	4605      	mov	r5, r0
 80056fe:	f000 fef7 	bl	80064f0 <_localeconv_r>
 8005702:	f8d0 a000 	ldr.w	sl, [r0]
 8005706:	4650      	mov	r0, sl
 8005708:	f7fa fdc2 	bl	8000290 <strlen>
 800570c:	2300      	movs	r3, #0
 800570e:	930a      	str	r3, [sp, #40]	; 0x28
 8005710:	6823      	ldr	r3, [r4, #0]
 8005712:	9305      	str	r3, [sp, #20]
 8005714:	f8d8 3000 	ldr.w	r3, [r8]
 8005718:	f894 b018 	ldrb.w	fp, [r4, #24]
 800571c:	3307      	adds	r3, #7
 800571e:	f023 0307 	bic.w	r3, r3, #7
 8005722:	f103 0208 	add.w	r2, r3, #8
 8005726:	f8c8 2000 	str.w	r2, [r8]
 800572a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800572e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005732:	9307      	str	r3, [sp, #28]
 8005734:	f8cd 8018 	str.w	r8, [sp, #24]
 8005738:	ee08 0a10 	vmov	s16, r0
 800573c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8005740:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005744:	4b9e      	ldr	r3, [pc, #632]	; (80059c0 <_printf_float+0x2d8>)
 8005746:	f04f 32ff 	mov.w	r2, #4294967295
 800574a:	f7fb f9ff 	bl	8000b4c <__aeabi_dcmpun>
 800574e:	bb88      	cbnz	r0, 80057b4 <_printf_float+0xcc>
 8005750:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005754:	4b9a      	ldr	r3, [pc, #616]	; (80059c0 <_printf_float+0x2d8>)
 8005756:	f04f 32ff 	mov.w	r2, #4294967295
 800575a:	f7fb f9d9 	bl	8000b10 <__aeabi_dcmple>
 800575e:	bb48      	cbnz	r0, 80057b4 <_printf_float+0xcc>
 8005760:	2200      	movs	r2, #0
 8005762:	2300      	movs	r3, #0
 8005764:	4640      	mov	r0, r8
 8005766:	4649      	mov	r1, r9
 8005768:	f7fb f9c8 	bl	8000afc <__aeabi_dcmplt>
 800576c:	b110      	cbz	r0, 8005774 <_printf_float+0x8c>
 800576e:	232d      	movs	r3, #45	; 0x2d
 8005770:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005774:	4a93      	ldr	r2, [pc, #588]	; (80059c4 <_printf_float+0x2dc>)
 8005776:	4b94      	ldr	r3, [pc, #592]	; (80059c8 <_printf_float+0x2e0>)
 8005778:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800577c:	bf94      	ite	ls
 800577e:	4690      	movls	r8, r2
 8005780:	4698      	movhi	r8, r3
 8005782:	2303      	movs	r3, #3
 8005784:	6123      	str	r3, [r4, #16]
 8005786:	9b05      	ldr	r3, [sp, #20]
 8005788:	f023 0304 	bic.w	r3, r3, #4
 800578c:	6023      	str	r3, [r4, #0]
 800578e:	f04f 0900 	mov.w	r9, #0
 8005792:	9700      	str	r7, [sp, #0]
 8005794:	4633      	mov	r3, r6
 8005796:	aa0b      	add	r2, sp, #44	; 0x2c
 8005798:	4621      	mov	r1, r4
 800579a:	4628      	mov	r0, r5
 800579c:	f000 f9da 	bl	8005b54 <_printf_common>
 80057a0:	3001      	adds	r0, #1
 80057a2:	f040 8090 	bne.w	80058c6 <_printf_float+0x1de>
 80057a6:	f04f 30ff 	mov.w	r0, #4294967295
 80057aa:	b00d      	add	sp, #52	; 0x34
 80057ac:	ecbd 8b02 	vpop	{d8}
 80057b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057b4:	4642      	mov	r2, r8
 80057b6:	464b      	mov	r3, r9
 80057b8:	4640      	mov	r0, r8
 80057ba:	4649      	mov	r1, r9
 80057bc:	f7fb f9c6 	bl	8000b4c <__aeabi_dcmpun>
 80057c0:	b140      	cbz	r0, 80057d4 <_printf_float+0xec>
 80057c2:	464b      	mov	r3, r9
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	bfbc      	itt	lt
 80057c8:	232d      	movlt	r3, #45	; 0x2d
 80057ca:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80057ce:	4a7f      	ldr	r2, [pc, #508]	; (80059cc <_printf_float+0x2e4>)
 80057d0:	4b7f      	ldr	r3, [pc, #508]	; (80059d0 <_printf_float+0x2e8>)
 80057d2:	e7d1      	b.n	8005778 <_printf_float+0x90>
 80057d4:	6863      	ldr	r3, [r4, #4]
 80057d6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80057da:	9206      	str	r2, [sp, #24]
 80057dc:	1c5a      	adds	r2, r3, #1
 80057de:	d13f      	bne.n	8005860 <_printf_float+0x178>
 80057e0:	2306      	movs	r3, #6
 80057e2:	6063      	str	r3, [r4, #4]
 80057e4:	9b05      	ldr	r3, [sp, #20]
 80057e6:	6861      	ldr	r1, [r4, #4]
 80057e8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80057ec:	2300      	movs	r3, #0
 80057ee:	9303      	str	r3, [sp, #12]
 80057f0:	ab0a      	add	r3, sp, #40	; 0x28
 80057f2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80057f6:	ab09      	add	r3, sp, #36	; 0x24
 80057f8:	ec49 8b10 	vmov	d0, r8, r9
 80057fc:	9300      	str	r3, [sp, #0]
 80057fe:	6022      	str	r2, [r4, #0]
 8005800:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005804:	4628      	mov	r0, r5
 8005806:	f7ff fecf 	bl	80055a8 <__cvt>
 800580a:	9b06      	ldr	r3, [sp, #24]
 800580c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800580e:	2b47      	cmp	r3, #71	; 0x47
 8005810:	4680      	mov	r8, r0
 8005812:	d108      	bne.n	8005826 <_printf_float+0x13e>
 8005814:	1cc8      	adds	r0, r1, #3
 8005816:	db02      	blt.n	800581e <_printf_float+0x136>
 8005818:	6863      	ldr	r3, [r4, #4]
 800581a:	4299      	cmp	r1, r3
 800581c:	dd41      	ble.n	80058a2 <_printf_float+0x1ba>
 800581e:	f1ab 0302 	sub.w	r3, fp, #2
 8005822:	fa5f fb83 	uxtb.w	fp, r3
 8005826:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800582a:	d820      	bhi.n	800586e <_printf_float+0x186>
 800582c:	3901      	subs	r1, #1
 800582e:	465a      	mov	r2, fp
 8005830:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005834:	9109      	str	r1, [sp, #36]	; 0x24
 8005836:	f7ff ff19 	bl	800566c <__exponent>
 800583a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800583c:	1813      	adds	r3, r2, r0
 800583e:	2a01      	cmp	r2, #1
 8005840:	4681      	mov	r9, r0
 8005842:	6123      	str	r3, [r4, #16]
 8005844:	dc02      	bgt.n	800584c <_printf_float+0x164>
 8005846:	6822      	ldr	r2, [r4, #0]
 8005848:	07d2      	lsls	r2, r2, #31
 800584a:	d501      	bpl.n	8005850 <_printf_float+0x168>
 800584c:	3301      	adds	r3, #1
 800584e:	6123      	str	r3, [r4, #16]
 8005850:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005854:	2b00      	cmp	r3, #0
 8005856:	d09c      	beq.n	8005792 <_printf_float+0xaa>
 8005858:	232d      	movs	r3, #45	; 0x2d
 800585a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800585e:	e798      	b.n	8005792 <_printf_float+0xaa>
 8005860:	9a06      	ldr	r2, [sp, #24]
 8005862:	2a47      	cmp	r2, #71	; 0x47
 8005864:	d1be      	bne.n	80057e4 <_printf_float+0xfc>
 8005866:	2b00      	cmp	r3, #0
 8005868:	d1bc      	bne.n	80057e4 <_printf_float+0xfc>
 800586a:	2301      	movs	r3, #1
 800586c:	e7b9      	b.n	80057e2 <_printf_float+0xfa>
 800586e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005872:	d118      	bne.n	80058a6 <_printf_float+0x1be>
 8005874:	2900      	cmp	r1, #0
 8005876:	6863      	ldr	r3, [r4, #4]
 8005878:	dd0b      	ble.n	8005892 <_printf_float+0x1aa>
 800587a:	6121      	str	r1, [r4, #16]
 800587c:	b913      	cbnz	r3, 8005884 <_printf_float+0x19c>
 800587e:	6822      	ldr	r2, [r4, #0]
 8005880:	07d0      	lsls	r0, r2, #31
 8005882:	d502      	bpl.n	800588a <_printf_float+0x1a2>
 8005884:	3301      	adds	r3, #1
 8005886:	440b      	add	r3, r1
 8005888:	6123      	str	r3, [r4, #16]
 800588a:	65a1      	str	r1, [r4, #88]	; 0x58
 800588c:	f04f 0900 	mov.w	r9, #0
 8005890:	e7de      	b.n	8005850 <_printf_float+0x168>
 8005892:	b913      	cbnz	r3, 800589a <_printf_float+0x1b2>
 8005894:	6822      	ldr	r2, [r4, #0]
 8005896:	07d2      	lsls	r2, r2, #31
 8005898:	d501      	bpl.n	800589e <_printf_float+0x1b6>
 800589a:	3302      	adds	r3, #2
 800589c:	e7f4      	b.n	8005888 <_printf_float+0x1a0>
 800589e:	2301      	movs	r3, #1
 80058a0:	e7f2      	b.n	8005888 <_printf_float+0x1a0>
 80058a2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80058a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058a8:	4299      	cmp	r1, r3
 80058aa:	db05      	blt.n	80058b8 <_printf_float+0x1d0>
 80058ac:	6823      	ldr	r3, [r4, #0]
 80058ae:	6121      	str	r1, [r4, #16]
 80058b0:	07d8      	lsls	r0, r3, #31
 80058b2:	d5ea      	bpl.n	800588a <_printf_float+0x1a2>
 80058b4:	1c4b      	adds	r3, r1, #1
 80058b6:	e7e7      	b.n	8005888 <_printf_float+0x1a0>
 80058b8:	2900      	cmp	r1, #0
 80058ba:	bfd4      	ite	le
 80058bc:	f1c1 0202 	rsble	r2, r1, #2
 80058c0:	2201      	movgt	r2, #1
 80058c2:	4413      	add	r3, r2
 80058c4:	e7e0      	b.n	8005888 <_printf_float+0x1a0>
 80058c6:	6823      	ldr	r3, [r4, #0]
 80058c8:	055a      	lsls	r2, r3, #21
 80058ca:	d407      	bmi.n	80058dc <_printf_float+0x1f4>
 80058cc:	6923      	ldr	r3, [r4, #16]
 80058ce:	4642      	mov	r2, r8
 80058d0:	4631      	mov	r1, r6
 80058d2:	4628      	mov	r0, r5
 80058d4:	47b8      	blx	r7
 80058d6:	3001      	adds	r0, #1
 80058d8:	d12c      	bne.n	8005934 <_printf_float+0x24c>
 80058da:	e764      	b.n	80057a6 <_printf_float+0xbe>
 80058dc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80058e0:	f240 80e0 	bls.w	8005aa4 <_printf_float+0x3bc>
 80058e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80058e8:	2200      	movs	r2, #0
 80058ea:	2300      	movs	r3, #0
 80058ec:	f7fb f8fc 	bl	8000ae8 <__aeabi_dcmpeq>
 80058f0:	2800      	cmp	r0, #0
 80058f2:	d034      	beq.n	800595e <_printf_float+0x276>
 80058f4:	4a37      	ldr	r2, [pc, #220]	; (80059d4 <_printf_float+0x2ec>)
 80058f6:	2301      	movs	r3, #1
 80058f8:	4631      	mov	r1, r6
 80058fa:	4628      	mov	r0, r5
 80058fc:	47b8      	blx	r7
 80058fe:	3001      	adds	r0, #1
 8005900:	f43f af51 	beq.w	80057a6 <_printf_float+0xbe>
 8005904:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005908:	429a      	cmp	r2, r3
 800590a:	db02      	blt.n	8005912 <_printf_float+0x22a>
 800590c:	6823      	ldr	r3, [r4, #0]
 800590e:	07d8      	lsls	r0, r3, #31
 8005910:	d510      	bpl.n	8005934 <_printf_float+0x24c>
 8005912:	ee18 3a10 	vmov	r3, s16
 8005916:	4652      	mov	r2, sl
 8005918:	4631      	mov	r1, r6
 800591a:	4628      	mov	r0, r5
 800591c:	47b8      	blx	r7
 800591e:	3001      	adds	r0, #1
 8005920:	f43f af41 	beq.w	80057a6 <_printf_float+0xbe>
 8005924:	f04f 0800 	mov.w	r8, #0
 8005928:	f104 091a 	add.w	r9, r4, #26
 800592c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800592e:	3b01      	subs	r3, #1
 8005930:	4543      	cmp	r3, r8
 8005932:	dc09      	bgt.n	8005948 <_printf_float+0x260>
 8005934:	6823      	ldr	r3, [r4, #0]
 8005936:	079b      	lsls	r3, r3, #30
 8005938:	f100 8107 	bmi.w	8005b4a <_printf_float+0x462>
 800593c:	68e0      	ldr	r0, [r4, #12]
 800593e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005940:	4298      	cmp	r0, r3
 8005942:	bfb8      	it	lt
 8005944:	4618      	movlt	r0, r3
 8005946:	e730      	b.n	80057aa <_printf_float+0xc2>
 8005948:	2301      	movs	r3, #1
 800594a:	464a      	mov	r2, r9
 800594c:	4631      	mov	r1, r6
 800594e:	4628      	mov	r0, r5
 8005950:	47b8      	blx	r7
 8005952:	3001      	adds	r0, #1
 8005954:	f43f af27 	beq.w	80057a6 <_printf_float+0xbe>
 8005958:	f108 0801 	add.w	r8, r8, #1
 800595c:	e7e6      	b.n	800592c <_printf_float+0x244>
 800595e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005960:	2b00      	cmp	r3, #0
 8005962:	dc39      	bgt.n	80059d8 <_printf_float+0x2f0>
 8005964:	4a1b      	ldr	r2, [pc, #108]	; (80059d4 <_printf_float+0x2ec>)
 8005966:	2301      	movs	r3, #1
 8005968:	4631      	mov	r1, r6
 800596a:	4628      	mov	r0, r5
 800596c:	47b8      	blx	r7
 800596e:	3001      	adds	r0, #1
 8005970:	f43f af19 	beq.w	80057a6 <_printf_float+0xbe>
 8005974:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005978:	4313      	orrs	r3, r2
 800597a:	d102      	bne.n	8005982 <_printf_float+0x29a>
 800597c:	6823      	ldr	r3, [r4, #0]
 800597e:	07d9      	lsls	r1, r3, #31
 8005980:	d5d8      	bpl.n	8005934 <_printf_float+0x24c>
 8005982:	ee18 3a10 	vmov	r3, s16
 8005986:	4652      	mov	r2, sl
 8005988:	4631      	mov	r1, r6
 800598a:	4628      	mov	r0, r5
 800598c:	47b8      	blx	r7
 800598e:	3001      	adds	r0, #1
 8005990:	f43f af09 	beq.w	80057a6 <_printf_float+0xbe>
 8005994:	f04f 0900 	mov.w	r9, #0
 8005998:	f104 0a1a 	add.w	sl, r4, #26
 800599c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800599e:	425b      	negs	r3, r3
 80059a0:	454b      	cmp	r3, r9
 80059a2:	dc01      	bgt.n	80059a8 <_printf_float+0x2c0>
 80059a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059a6:	e792      	b.n	80058ce <_printf_float+0x1e6>
 80059a8:	2301      	movs	r3, #1
 80059aa:	4652      	mov	r2, sl
 80059ac:	4631      	mov	r1, r6
 80059ae:	4628      	mov	r0, r5
 80059b0:	47b8      	blx	r7
 80059b2:	3001      	adds	r0, #1
 80059b4:	f43f aef7 	beq.w	80057a6 <_printf_float+0xbe>
 80059b8:	f109 0901 	add.w	r9, r9, #1
 80059bc:	e7ee      	b.n	800599c <_printf_float+0x2b4>
 80059be:	bf00      	nop
 80059c0:	7fefffff 	.word	0x7fefffff
 80059c4:	08009e7d 	.word	0x08009e7d
 80059c8:	08009e81 	.word	0x08009e81
 80059cc:	08009e85 	.word	0x08009e85
 80059d0:	08009e89 	.word	0x08009e89
 80059d4:	08009e8d 	.word	0x08009e8d
 80059d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80059da:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80059dc:	429a      	cmp	r2, r3
 80059de:	bfa8      	it	ge
 80059e0:	461a      	movge	r2, r3
 80059e2:	2a00      	cmp	r2, #0
 80059e4:	4691      	mov	r9, r2
 80059e6:	dc37      	bgt.n	8005a58 <_printf_float+0x370>
 80059e8:	f04f 0b00 	mov.w	fp, #0
 80059ec:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80059f0:	f104 021a 	add.w	r2, r4, #26
 80059f4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80059f6:	9305      	str	r3, [sp, #20]
 80059f8:	eba3 0309 	sub.w	r3, r3, r9
 80059fc:	455b      	cmp	r3, fp
 80059fe:	dc33      	bgt.n	8005a68 <_printf_float+0x380>
 8005a00:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a04:	429a      	cmp	r2, r3
 8005a06:	db3b      	blt.n	8005a80 <_printf_float+0x398>
 8005a08:	6823      	ldr	r3, [r4, #0]
 8005a0a:	07da      	lsls	r2, r3, #31
 8005a0c:	d438      	bmi.n	8005a80 <_printf_float+0x398>
 8005a0e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005a12:	eba2 0903 	sub.w	r9, r2, r3
 8005a16:	9b05      	ldr	r3, [sp, #20]
 8005a18:	1ad2      	subs	r2, r2, r3
 8005a1a:	4591      	cmp	r9, r2
 8005a1c:	bfa8      	it	ge
 8005a1e:	4691      	movge	r9, r2
 8005a20:	f1b9 0f00 	cmp.w	r9, #0
 8005a24:	dc35      	bgt.n	8005a92 <_printf_float+0x3aa>
 8005a26:	f04f 0800 	mov.w	r8, #0
 8005a2a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005a2e:	f104 0a1a 	add.w	sl, r4, #26
 8005a32:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a36:	1a9b      	subs	r3, r3, r2
 8005a38:	eba3 0309 	sub.w	r3, r3, r9
 8005a3c:	4543      	cmp	r3, r8
 8005a3e:	f77f af79 	ble.w	8005934 <_printf_float+0x24c>
 8005a42:	2301      	movs	r3, #1
 8005a44:	4652      	mov	r2, sl
 8005a46:	4631      	mov	r1, r6
 8005a48:	4628      	mov	r0, r5
 8005a4a:	47b8      	blx	r7
 8005a4c:	3001      	adds	r0, #1
 8005a4e:	f43f aeaa 	beq.w	80057a6 <_printf_float+0xbe>
 8005a52:	f108 0801 	add.w	r8, r8, #1
 8005a56:	e7ec      	b.n	8005a32 <_printf_float+0x34a>
 8005a58:	4613      	mov	r3, r2
 8005a5a:	4631      	mov	r1, r6
 8005a5c:	4642      	mov	r2, r8
 8005a5e:	4628      	mov	r0, r5
 8005a60:	47b8      	blx	r7
 8005a62:	3001      	adds	r0, #1
 8005a64:	d1c0      	bne.n	80059e8 <_printf_float+0x300>
 8005a66:	e69e      	b.n	80057a6 <_printf_float+0xbe>
 8005a68:	2301      	movs	r3, #1
 8005a6a:	4631      	mov	r1, r6
 8005a6c:	4628      	mov	r0, r5
 8005a6e:	9205      	str	r2, [sp, #20]
 8005a70:	47b8      	blx	r7
 8005a72:	3001      	adds	r0, #1
 8005a74:	f43f ae97 	beq.w	80057a6 <_printf_float+0xbe>
 8005a78:	9a05      	ldr	r2, [sp, #20]
 8005a7a:	f10b 0b01 	add.w	fp, fp, #1
 8005a7e:	e7b9      	b.n	80059f4 <_printf_float+0x30c>
 8005a80:	ee18 3a10 	vmov	r3, s16
 8005a84:	4652      	mov	r2, sl
 8005a86:	4631      	mov	r1, r6
 8005a88:	4628      	mov	r0, r5
 8005a8a:	47b8      	blx	r7
 8005a8c:	3001      	adds	r0, #1
 8005a8e:	d1be      	bne.n	8005a0e <_printf_float+0x326>
 8005a90:	e689      	b.n	80057a6 <_printf_float+0xbe>
 8005a92:	9a05      	ldr	r2, [sp, #20]
 8005a94:	464b      	mov	r3, r9
 8005a96:	4442      	add	r2, r8
 8005a98:	4631      	mov	r1, r6
 8005a9a:	4628      	mov	r0, r5
 8005a9c:	47b8      	blx	r7
 8005a9e:	3001      	adds	r0, #1
 8005aa0:	d1c1      	bne.n	8005a26 <_printf_float+0x33e>
 8005aa2:	e680      	b.n	80057a6 <_printf_float+0xbe>
 8005aa4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005aa6:	2a01      	cmp	r2, #1
 8005aa8:	dc01      	bgt.n	8005aae <_printf_float+0x3c6>
 8005aaa:	07db      	lsls	r3, r3, #31
 8005aac:	d53a      	bpl.n	8005b24 <_printf_float+0x43c>
 8005aae:	2301      	movs	r3, #1
 8005ab0:	4642      	mov	r2, r8
 8005ab2:	4631      	mov	r1, r6
 8005ab4:	4628      	mov	r0, r5
 8005ab6:	47b8      	blx	r7
 8005ab8:	3001      	adds	r0, #1
 8005aba:	f43f ae74 	beq.w	80057a6 <_printf_float+0xbe>
 8005abe:	ee18 3a10 	vmov	r3, s16
 8005ac2:	4652      	mov	r2, sl
 8005ac4:	4631      	mov	r1, r6
 8005ac6:	4628      	mov	r0, r5
 8005ac8:	47b8      	blx	r7
 8005aca:	3001      	adds	r0, #1
 8005acc:	f43f ae6b 	beq.w	80057a6 <_printf_float+0xbe>
 8005ad0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005adc:	f7fb f804 	bl	8000ae8 <__aeabi_dcmpeq>
 8005ae0:	b9d8      	cbnz	r0, 8005b1a <_printf_float+0x432>
 8005ae2:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005ae6:	f108 0201 	add.w	r2, r8, #1
 8005aea:	4631      	mov	r1, r6
 8005aec:	4628      	mov	r0, r5
 8005aee:	47b8      	blx	r7
 8005af0:	3001      	adds	r0, #1
 8005af2:	d10e      	bne.n	8005b12 <_printf_float+0x42a>
 8005af4:	e657      	b.n	80057a6 <_printf_float+0xbe>
 8005af6:	2301      	movs	r3, #1
 8005af8:	4652      	mov	r2, sl
 8005afa:	4631      	mov	r1, r6
 8005afc:	4628      	mov	r0, r5
 8005afe:	47b8      	blx	r7
 8005b00:	3001      	adds	r0, #1
 8005b02:	f43f ae50 	beq.w	80057a6 <_printf_float+0xbe>
 8005b06:	f108 0801 	add.w	r8, r8, #1
 8005b0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b0c:	3b01      	subs	r3, #1
 8005b0e:	4543      	cmp	r3, r8
 8005b10:	dcf1      	bgt.n	8005af6 <_printf_float+0x40e>
 8005b12:	464b      	mov	r3, r9
 8005b14:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005b18:	e6da      	b.n	80058d0 <_printf_float+0x1e8>
 8005b1a:	f04f 0800 	mov.w	r8, #0
 8005b1e:	f104 0a1a 	add.w	sl, r4, #26
 8005b22:	e7f2      	b.n	8005b0a <_printf_float+0x422>
 8005b24:	2301      	movs	r3, #1
 8005b26:	4642      	mov	r2, r8
 8005b28:	e7df      	b.n	8005aea <_printf_float+0x402>
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	464a      	mov	r2, r9
 8005b2e:	4631      	mov	r1, r6
 8005b30:	4628      	mov	r0, r5
 8005b32:	47b8      	blx	r7
 8005b34:	3001      	adds	r0, #1
 8005b36:	f43f ae36 	beq.w	80057a6 <_printf_float+0xbe>
 8005b3a:	f108 0801 	add.w	r8, r8, #1
 8005b3e:	68e3      	ldr	r3, [r4, #12]
 8005b40:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005b42:	1a5b      	subs	r3, r3, r1
 8005b44:	4543      	cmp	r3, r8
 8005b46:	dcf0      	bgt.n	8005b2a <_printf_float+0x442>
 8005b48:	e6f8      	b.n	800593c <_printf_float+0x254>
 8005b4a:	f04f 0800 	mov.w	r8, #0
 8005b4e:	f104 0919 	add.w	r9, r4, #25
 8005b52:	e7f4      	b.n	8005b3e <_printf_float+0x456>

08005b54 <_printf_common>:
 8005b54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b58:	4616      	mov	r6, r2
 8005b5a:	4699      	mov	r9, r3
 8005b5c:	688a      	ldr	r2, [r1, #8]
 8005b5e:	690b      	ldr	r3, [r1, #16]
 8005b60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005b64:	4293      	cmp	r3, r2
 8005b66:	bfb8      	it	lt
 8005b68:	4613      	movlt	r3, r2
 8005b6a:	6033      	str	r3, [r6, #0]
 8005b6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005b70:	4607      	mov	r7, r0
 8005b72:	460c      	mov	r4, r1
 8005b74:	b10a      	cbz	r2, 8005b7a <_printf_common+0x26>
 8005b76:	3301      	adds	r3, #1
 8005b78:	6033      	str	r3, [r6, #0]
 8005b7a:	6823      	ldr	r3, [r4, #0]
 8005b7c:	0699      	lsls	r1, r3, #26
 8005b7e:	bf42      	ittt	mi
 8005b80:	6833      	ldrmi	r3, [r6, #0]
 8005b82:	3302      	addmi	r3, #2
 8005b84:	6033      	strmi	r3, [r6, #0]
 8005b86:	6825      	ldr	r5, [r4, #0]
 8005b88:	f015 0506 	ands.w	r5, r5, #6
 8005b8c:	d106      	bne.n	8005b9c <_printf_common+0x48>
 8005b8e:	f104 0a19 	add.w	sl, r4, #25
 8005b92:	68e3      	ldr	r3, [r4, #12]
 8005b94:	6832      	ldr	r2, [r6, #0]
 8005b96:	1a9b      	subs	r3, r3, r2
 8005b98:	42ab      	cmp	r3, r5
 8005b9a:	dc26      	bgt.n	8005bea <_printf_common+0x96>
 8005b9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005ba0:	1e13      	subs	r3, r2, #0
 8005ba2:	6822      	ldr	r2, [r4, #0]
 8005ba4:	bf18      	it	ne
 8005ba6:	2301      	movne	r3, #1
 8005ba8:	0692      	lsls	r2, r2, #26
 8005baa:	d42b      	bmi.n	8005c04 <_printf_common+0xb0>
 8005bac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005bb0:	4649      	mov	r1, r9
 8005bb2:	4638      	mov	r0, r7
 8005bb4:	47c0      	blx	r8
 8005bb6:	3001      	adds	r0, #1
 8005bb8:	d01e      	beq.n	8005bf8 <_printf_common+0xa4>
 8005bba:	6823      	ldr	r3, [r4, #0]
 8005bbc:	6922      	ldr	r2, [r4, #16]
 8005bbe:	f003 0306 	and.w	r3, r3, #6
 8005bc2:	2b04      	cmp	r3, #4
 8005bc4:	bf02      	ittt	eq
 8005bc6:	68e5      	ldreq	r5, [r4, #12]
 8005bc8:	6833      	ldreq	r3, [r6, #0]
 8005bca:	1aed      	subeq	r5, r5, r3
 8005bcc:	68a3      	ldr	r3, [r4, #8]
 8005bce:	bf0c      	ite	eq
 8005bd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005bd4:	2500      	movne	r5, #0
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	bfc4      	itt	gt
 8005bda:	1a9b      	subgt	r3, r3, r2
 8005bdc:	18ed      	addgt	r5, r5, r3
 8005bde:	2600      	movs	r6, #0
 8005be0:	341a      	adds	r4, #26
 8005be2:	42b5      	cmp	r5, r6
 8005be4:	d11a      	bne.n	8005c1c <_printf_common+0xc8>
 8005be6:	2000      	movs	r0, #0
 8005be8:	e008      	b.n	8005bfc <_printf_common+0xa8>
 8005bea:	2301      	movs	r3, #1
 8005bec:	4652      	mov	r2, sl
 8005bee:	4649      	mov	r1, r9
 8005bf0:	4638      	mov	r0, r7
 8005bf2:	47c0      	blx	r8
 8005bf4:	3001      	adds	r0, #1
 8005bf6:	d103      	bne.n	8005c00 <_printf_common+0xac>
 8005bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8005bfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c00:	3501      	adds	r5, #1
 8005c02:	e7c6      	b.n	8005b92 <_printf_common+0x3e>
 8005c04:	18e1      	adds	r1, r4, r3
 8005c06:	1c5a      	adds	r2, r3, #1
 8005c08:	2030      	movs	r0, #48	; 0x30
 8005c0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c0e:	4422      	add	r2, r4
 8005c10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c18:	3302      	adds	r3, #2
 8005c1a:	e7c7      	b.n	8005bac <_printf_common+0x58>
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	4622      	mov	r2, r4
 8005c20:	4649      	mov	r1, r9
 8005c22:	4638      	mov	r0, r7
 8005c24:	47c0      	blx	r8
 8005c26:	3001      	adds	r0, #1
 8005c28:	d0e6      	beq.n	8005bf8 <_printf_common+0xa4>
 8005c2a:	3601      	adds	r6, #1
 8005c2c:	e7d9      	b.n	8005be2 <_printf_common+0x8e>
	...

08005c30 <_printf_i>:
 8005c30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c34:	7e0f      	ldrb	r7, [r1, #24]
 8005c36:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005c38:	2f78      	cmp	r7, #120	; 0x78
 8005c3a:	4691      	mov	r9, r2
 8005c3c:	4680      	mov	r8, r0
 8005c3e:	460c      	mov	r4, r1
 8005c40:	469a      	mov	sl, r3
 8005c42:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005c46:	d807      	bhi.n	8005c58 <_printf_i+0x28>
 8005c48:	2f62      	cmp	r7, #98	; 0x62
 8005c4a:	d80a      	bhi.n	8005c62 <_printf_i+0x32>
 8005c4c:	2f00      	cmp	r7, #0
 8005c4e:	f000 80d4 	beq.w	8005dfa <_printf_i+0x1ca>
 8005c52:	2f58      	cmp	r7, #88	; 0x58
 8005c54:	f000 80c0 	beq.w	8005dd8 <_printf_i+0x1a8>
 8005c58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005c60:	e03a      	b.n	8005cd8 <_printf_i+0xa8>
 8005c62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005c66:	2b15      	cmp	r3, #21
 8005c68:	d8f6      	bhi.n	8005c58 <_printf_i+0x28>
 8005c6a:	a101      	add	r1, pc, #4	; (adr r1, 8005c70 <_printf_i+0x40>)
 8005c6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005c70:	08005cc9 	.word	0x08005cc9
 8005c74:	08005cdd 	.word	0x08005cdd
 8005c78:	08005c59 	.word	0x08005c59
 8005c7c:	08005c59 	.word	0x08005c59
 8005c80:	08005c59 	.word	0x08005c59
 8005c84:	08005c59 	.word	0x08005c59
 8005c88:	08005cdd 	.word	0x08005cdd
 8005c8c:	08005c59 	.word	0x08005c59
 8005c90:	08005c59 	.word	0x08005c59
 8005c94:	08005c59 	.word	0x08005c59
 8005c98:	08005c59 	.word	0x08005c59
 8005c9c:	08005de1 	.word	0x08005de1
 8005ca0:	08005d09 	.word	0x08005d09
 8005ca4:	08005d9b 	.word	0x08005d9b
 8005ca8:	08005c59 	.word	0x08005c59
 8005cac:	08005c59 	.word	0x08005c59
 8005cb0:	08005e03 	.word	0x08005e03
 8005cb4:	08005c59 	.word	0x08005c59
 8005cb8:	08005d09 	.word	0x08005d09
 8005cbc:	08005c59 	.word	0x08005c59
 8005cc0:	08005c59 	.word	0x08005c59
 8005cc4:	08005da3 	.word	0x08005da3
 8005cc8:	682b      	ldr	r3, [r5, #0]
 8005cca:	1d1a      	adds	r2, r3, #4
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	602a      	str	r2, [r5, #0]
 8005cd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005cd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005cd8:	2301      	movs	r3, #1
 8005cda:	e09f      	b.n	8005e1c <_printf_i+0x1ec>
 8005cdc:	6820      	ldr	r0, [r4, #0]
 8005cde:	682b      	ldr	r3, [r5, #0]
 8005ce0:	0607      	lsls	r7, r0, #24
 8005ce2:	f103 0104 	add.w	r1, r3, #4
 8005ce6:	6029      	str	r1, [r5, #0]
 8005ce8:	d501      	bpl.n	8005cee <_printf_i+0xbe>
 8005cea:	681e      	ldr	r6, [r3, #0]
 8005cec:	e003      	b.n	8005cf6 <_printf_i+0xc6>
 8005cee:	0646      	lsls	r6, r0, #25
 8005cf0:	d5fb      	bpl.n	8005cea <_printf_i+0xba>
 8005cf2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005cf6:	2e00      	cmp	r6, #0
 8005cf8:	da03      	bge.n	8005d02 <_printf_i+0xd2>
 8005cfa:	232d      	movs	r3, #45	; 0x2d
 8005cfc:	4276      	negs	r6, r6
 8005cfe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d02:	485a      	ldr	r0, [pc, #360]	; (8005e6c <_printf_i+0x23c>)
 8005d04:	230a      	movs	r3, #10
 8005d06:	e012      	b.n	8005d2e <_printf_i+0xfe>
 8005d08:	682b      	ldr	r3, [r5, #0]
 8005d0a:	6820      	ldr	r0, [r4, #0]
 8005d0c:	1d19      	adds	r1, r3, #4
 8005d0e:	6029      	str	r1, [r5, #0]
 8005d10:	0605      	lsls	r5, r0, #24
 8005d12:	d501      	bpl.n	8005d18 <_printf_i+0xe8>
 8005d14:	681e      	ldr	r6, [r3, #0]
 8005d16:	e002      	b.n	8005d1e <_printf_i+0xee>
 8005d18:	0641      	lsls	r1, r0, #25
 8005d1a:	d5fb      	bpl.n	8005d14 <_printf_i+0xe4>
 8005d1c:	881e      	ldrh	r6, [r3, #0]
 8005d1e:	4853      	ldr	r0, [pc, #332]	; (8005e6c <_printf_i+0x23c>)
 8005d20:	2f6f      	cmp	r7, #111	; 0x6f
 8005d22:	bf0c      	ite	eq
 8005d24:	2308      	moveq	r3, #8
 8005d26:	230a      	movne	r3, #10
 8005d28:	2100      	movs	r1, #0
 8005d2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005d2e:	6865      	ldr	r5, [r4, #4]
 8005d30:	60a5      	str	r5, [r4, #8]
 8005d32:	2d00      	cmp	r5, #0
 8005d34:	bfa2      	ittt	ge
 8005d36:	6821      	ldrge	r1, [r4, #0]
 8005d38:	f021 0104 	bicge.w	r1, r1, #4
 8005d3c:	6021      	strge	r1, [r4, #0]
 8005d3e:	b90e      	cbnz	r6, 8005d44 <_printf_i+0x114>
 8005d40:	2d00      	cmp	r5, #0
 8005d42:	d04b      	beq.n	8005ddc <_printf_i+0x1ac>
 8005d44:	4615      	mov	r5, r2
 8005d46:	fbb6 f1f3 	udiv	r1, r6, r3
 8005d4a:	fb03 6711 	mls	r7, r3, r1, r6
 8005d4e:	5dc7      	ldrb	r7, [r0, r7]
 8005d50:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005d54:	4637      	mov	r7, r6
 8005d56:	42bb      	cmp	r3, r7
 8005d58:	460e      	mov	r6, r1
 8005d5a:	d9f4      	bls.n	8005d46 <_printf_i+0x116>
 8005d5c:	2b08      	cmp	r3, #8
 8005d5e:	d10b      	bne.n	8005d78 <_printf_i+0x148>
 8005d60:	6823      	ldr	r3, [r4, #0]
 8005d62:	07de      	lsls	r6, r3, #31
 8005d64:	d508      	bpl.n	8005d78 <_printf_i+0x148>
 8005d66:	6923      	ldr	r3, [r4, #16]
 8005d68:	6861      	ldr	r1, [r4, #4]
 8005d6a:	4299      	cmp	r1, r3
 8005d6c:	bfde      	ittt	le
 8005d6e:	2330      	movle	r3, #48	; 0x30
 8005d70:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005d74:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005d78:	1b52      	subs	r2, r2, r5
 8005d7a:	6122      	str	r2, [r4, #16]
 8005d7c:	f8cd a000 	str.w	sl, [sp]
 8005d80:	464b      	mov	r3, r9
 8005d82:	aa03      	add	r2, sp, #12
 8005d84:	4621      	mov	r1, r4
 8005d86:	4640      	mov	r0, r8
 8005d88:	f7ff fee4 	bl	8005b54 <_printf_common>
 8005d8c:	3001      	adds	r0, #1
 8005d8e:	d14a      	bne.n	8005e26 <_printf_i+0x1f6>
 8005d90:	f04f 30ff 	mov.w	r0, #4294967295
 8005d94:	b004      	add	sp, #16
 8005d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d9a:	6823      	ldr	r3, [r4, #0]
 8005d9c:	f043 0320 	orr.w	r3, r3, #32
 8005da0:	6023      	str	r3, [r4, #0]
 8005da2:	4833      	ldr	r0, [pc, #204]	; (8005e70 <_printf_i+0x240>)
 8005da4:	2778      	movs	r7, #120	; 0x78
 8005da6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005daa:	6823      	ldr	r3, [r4, #0]
 8005dac:	6829      	ldr	r1, [r5, #0]
 8005dae:	061f      	lsls	r7, r3, #24
 8005db0:	f851 6b04 	ldr.w	r6, [r1], #4
 8005db4:	d402      	bmi.n	8005dbc <_printf_i+0x18c>
 8005db6:	065f      	lsls	r7, r3, #25
 8005db8:	bf48      	it	mi
 8005dba:	b2b6      	uxthmi	r6, r6
 8005dbc:	07df      	lsls	r7, r3, #31
 8005dbe:	bf48      	it	mi
 8005dc0:	f043 0320 	orrmi.w	r3, r3, #32
 8005dc4:	6029      	str	r1, [r5, #0]
 8005dc6:	bf48      	it	mi
 8005dc8:	6023      	strmi	r3, [r4, #0]
 8005dca:	b91e      	cbnz	r6, 8005dd4 <_printf_i+0x1a4>
 8005dcc:	6823      	ldr	r3, [r4, #0]
 8005dce:	f023 0320 	bic.w	r3, r3, #32
 8005dd2:	6023      	str	r3, [r4, #0]
 8005dd4:	2310      	movs	r3, #16
 8005dd6:	e7a7      	b.n	8005d28 <_printf_i+0xf8>
 8005dd8:	4824      	ldr	r0, [pc, #144]	; (8005e6c <_printf_i+0x23c>)
 8005dda:	e7e4      	b.n	8005da6 <_printf_i+0x176>
 8005ddc:	4615      	mov	r5, r2
 8005dde:	e7bd      	b.n	8005d5c <_printf_i+0x12c>
 8005de0:	682b      	ldr	r3, [r5, #0]
 8005de2:	6826      	ldr	r6, [r4, #0]
 8005de4:	6961      	ldr	r1, [r4, #20]
 8005de6:	1d18      	adds	r0, r3, #4
 8005de8:	6028      	str	r0, [r5, #0]
 8005dea:	0635      	lsls	r5, r6, #24
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	d501      	bpl.n	8005df4 <_printf_i+0x1c4>
 8005df0:	6019      	str	r1, [r3, #0]
 8005df2:	e002      	b.n	8005dfa <_printf_i+0x1ca>
 8005df4:	0670      	lsls	r0, r6, #25
 8005df6:	d5fb      	bpl.n	8005df0 <_printf_i+0x1c0>
 8005df8:	8019      	strh	r1, [r3, #0]
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	6123      	str	r3, [r4, #16]
 8005dfe:	4615      	mov	r5, r2
 8005e00:	e7bc      	b.n	8005d7c <_printf_i+0x14c>
 8005e02:	682b      	ldr	r3, [r5, #0]
 8005e04:	1d1a      	adds	r2, r3, #4
 8005e06:	602a      	str	r2, [r5, #0]
 8005e08:	681d      	ldr	r5, [r3, #0]
 8005e0a:	6862      	ldr	r2, [r4, #4]
 8005e0c:	2100      	movs	r1, #0
 8005e0e:	4628      	mov	r0, r5
 8005e10:	f7fa f9ee 	bl	80001f0 <memchr>
 8005e14:	b108      	cbz	r0, 8005e1a <_printf_i+0x1ea>
 8005e16:	1b40      	subs	r0, r0, r5
 8005e18:	6060      	str	r0, [r4, #4]
 8005e1a:	6863      	ldr	r3, [r4, #4]
 8005e1c:	6123      	str	r3, [r4, #16]
 8005e1e:	2300      	movs	r3, #0
 8005e20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e24:	e7aa      	b.n	8005d7c <_printf_i+0x14c>
 8005e26:	6923      	ldr	r3, [r4, #16]
 8005e28:	462a      	mov	r2, r5
 8005e2a:	4649      	mov	r1, r9
 8005e2c:	4640      	mov	r0, r8
 8005e2e:	47d0      	blx	sl
 8005e30:	3001      	adds	r0, #1
 8005e32:	d0ad      	beq.n	8005d90 <_printf_i+0x160>
 8005e34:	6823      	ldr	r3, [r4, #0]
 8005e36:	079b      	lsls	r3, r3, #30
 8005e38:	d413      	bmi.n	8005e62 <_printf_i+0x232>
 8005e3a:	68e0      	ldr	r0, [r4, #12]
 8005e3c:	9b03      	ldr	r3, [sp, #12]
 8005e3e:	4298      	cmp	r0, r3
 8005e40:	bfb8      	it	lt
 8005e42:	4618      	movlt	r0, r3
 8005e44:	e7a6      	b.n	8005d94 <_printf_i+0x164>
 8005e46:	2301      	movs	r3, #1
 8005e48:	4632      	mov	r2, r6
 8005e4a:	4649      	mov	r1, r9
 8005e4c:	4640      	mov	r0, r8
 8005e4e:	47d0      	blx	sl
 8005e50:	3001      	adds	r0, #1
 8005e52:	d09d      	beq.n	8005d90 <_printf_i+0x160>
 8005e54:	3501      	adds	r5, #1
 8005e56:	68e3      	ldr	r3, [r4, #12]
 8005e58:	9903      	ldr	r1, [sp, #12]
 8005e5a:	1a5b      	subs	r3, r3, r1
 8005e5c:	42ab      	cmp	r3, r5
 8005e5e:	dcf2      	bgt.n	8005e46 <_printf_i+0x216>
 8005e60:	e7eb      	b.n	8005e3a <_printf_i+0x20a>
 8005e62:	2500      	movs	r5, #0
 8005e64:	f104 0619 	add.w	r6, r4, #25
 8005e68:	e7f5      	b.n	8005e56 <_printf_i+0x226>
 8005e6a:	bf00      	nop
 8005e6c:	08009e8f 	.word	0x08009e8f
 8005e70:	08009ea0 	.word	0x08009ea0

08005e74 <_scanf_float>:
 8005e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e78:	b087      	sub	sp, #28
 8005e7a:	4617      	mov	r7, r2
 8005e7c:	9303      	str	r3, [sp, #12]
 8005e7e:	688b      	ldr	r3, [r1, #8]
 8005e80:	1e5a      	subs	r2, r3, #1
 8005e82:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005e86:	bf83      	ittte	hi
 8005e88:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005e8c:	195b      	addhi	r3, r3, r5
 8005e8e:	9302      	strhi	r3, [sp, #8]
 8005e90:	2300      	movls	r3, #0
 8005e92:	bf86      	itte	hi
 8005e94:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005e98:	608b      	strhi	r3, [r1, #8]
 8005e9a:	9302      	strls	r3, [sp, #8]
 8005e9c:	680b      	ldr	r3, [r1, #0]
 8005e9e:	468b      	mov	fp, r1
 8005ea0:	2500      	movs	r5, #0
 8005ea2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005ea6:	f84b 3b1c 	str.w	r3, [fp], #28
 8005eaa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005eae:	4680      	mov	r8, r0
 8005eb0:	460c      	mov	r4, r1
 8005eb2:	465e      	mov	r6, fp
 8005eb4:	46aa      	mov	sl, r5
 8005eb6:	46a9      	mov	r9, r5
 8005eb8:	9501      	str	r5, [sp, #4]
 8005eba:	68a2      	ldr	r2, [r4, #8]
 8005ebc:	b152      	cbz	r2, 8005ed4 <_scanf_float+0x60>
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	2b4e      	cmp	r3, #78	; 0x4e
 8005ec4:	d864      	bhi.n	8005f90 <_scanf_float+0x11c>
 8005ec6:	2b40      	cmp	r3, #64	; 0x40
 8005ec8:	d83c      	bhi.n	8005f44 <_scanf_float+0xd0>
 8005eca:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8005ece:	b2c8      	uxtb	r0, r1
 8005ed0:	280e      	cmp	r0, #14
 8005ed2:	d93a      	bls.n	8005f4a <_scanf_float+0xd6>
 8005ed4:	f1b9 0f00 	cmp.w	r9, #0
 8005ed8:	d003      	beq.n	8005ee2 <_scanf_float+0x6e>
 8005eda:	6823      	ldr	r3, [r4, #0]
 8005edc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ee0:	6023      	str	r3, [r4, #0]
 8005ee2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005ee6:	f1ba 0f01 	cmp.w	sl, #1
 8005eea:	f200 8113 	bhi.w	8006114 <_scanf_float+0x2a0>
 8005eee:	455e      	cmp	r6, fp
 8005ef0:	f200 8105 	bhi.w	80060fe <_scanf_float+0x28a>
 8005ef4:	2501      	movs	r5, #1
 8005ef6:	4628      	mov	r0, r5
 8005ef8:	b007      	add	sp, #28
 8005efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005efe:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005f02:	2a0d      	cmp	r2, #13
 8005f04:	d8e6      	bhi.n	8005ed4 <_scanf_float+0x60>
 8005f06:	a101      	add	r1, pc, #4	; (adr r1, 8005f0c <_scanf_float+0x98>)
 8005f08:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005f0c:	0800604b 	.word	0x0800604b
 8005f10:	08005ed5 	.word	0x08005ed5
 8005f14:	08005ed5 	.word	0x08005ed5
 8005f18:	08005ed5 	.word	0x08005ed5
 8005f1c:	080060ab 	.word	0x080060ab
 8005f20:	08006083 	.word	0x08006083
 8005f24:	08005ed5 	.word	0x08005ed5
 8005f28:	08005ed5 	.word	0x08005ed5
 8005f2c:	08006059 	.word	0x08006059
 8005f30:	08005ed5 	.word	0x08005ed5
 8005f34:	08005ed5 	.word	0x08005ed5
 8005f38:	08005ed5 	.word	0x08005ed5
 8005f3c:	08005ed5 	.word	0x08005ed5
 8005f40:	08006011 	.word	0x08006011
 8005f44:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005f48:	e7db      	b.n	8005f02 <_scanf_float+0x8e>
 8005f4a:	290e      	cmp	r1, #14
 8005f4c:	d8c2      	bhi.n	8005ed4 <_scanf_float+0x60>
 8005f4e:	a001      	add	r0, pc, #4	; (adr r0, 8005f54 <_scanf_float+0xe0>)
 8005f50:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005f54:	08006003 	.word	0x08006003
 8005f58:	08005ed5 	.word	0x08005ed5
 8005f5c:	08006003 	.word	0x08006003
 8005f60:	08006097 	.word	0x08006097
 8005f64:	08005ed5 	.word	0x08005ed5
 8005f68:	08005fb1 	.word	0x08005fb1
 8005f6c:	08005fed 	.word	0x08005fed
 8005f70:	08005fed 	.word	0x08005fed
 8005f74:	08005fed 	.word	0x08005fed
 8005f78:	08005fed 	.word	0x08005fed
 8005f7c:	08005fed 	.word	0x08005fed
 8005f80:	08005fed 	.word	0x08005fed
 8005f84:	08005fed 	.word	0x08005fed
 8005f88:	08005fed 	.word	0x08005fed
 8005f8c:	08005fed 	.word	0x08005fed
 8005f90:	2b6e      	cmp	r3, #110	; 0x6e
 8005f92:	d809      	bhi.n	8005fa8 <_scanf_float+0x134>
 8005f94:	2b60      	cmp	r3, #96	; 0x60
 8005f96:	d8b2      	bhi.n	8005efe <_scanf_float+0x8a>
 8005f98:	2b54      	cmp	r3, #84	; 0x54
 8005f9a:	d077      	beq.n	800608c <_scanf_float+0x218>
 8005f9c:	2b59      	cmp	r3, #89	; 0x59
 8005f9e:	d199      	bne.n	8005ed4 <_scanf_float+0x60>
 8005fa0:	2d07      	cmp	r5, #7
 8005fa2:	d197      	bne.n	8005ed4 <_scanf_float+0x60>
 8005fa4:	2508      	movs	r5, #8
 8005fa6:	e029      	b.n	8005ffc <_scanf_float+0x188>
 8005fa8:	2b74      	cmp	r3, #116	; 0x74
 8005faa:	d06f      	beq.n	800608c <_scanf_float+0x218>
 8005fac:	2b79      	cmp	r3, #121	; 0x79
 8005fae:	e7f6      	b.n	8005f9e <_scanf_float+0x12a>
 8005fb0:	6821      	ldr	r1, [r4, #0]
 8005fb2:	05c8      	lsls	r0, r1, #23
 8005fb4:	d51a      	bpl.n	8005fec <_scanf_float+0x178>
 8005fb6:	9b02      	ldr	r3, [sp, #8]
 8005fb8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005fbc:	6021      	str	r1, [r4, #0]
 8005fbe:	f109 0901 	add.w	r9, r9, #1
 8005fc2:	b11b      	cbz	r3, 8005fcc <_scanf_float+0x158>
 8005fc4:	3b01      	subs	r3, #1
 8005fc6:	3201      	adds	r2, #1
 8005fc8:	9302      	str	r3, [sp, #8]
 8005fca:	60a2      	str	r2, [r4, #8]
 8005fcc:	68a3      	ldr	r3, [r4, #8]
 8005fce:	3b01      	subs	r3, #1
 8005fd0:	60a3      	str	r3, [r4, #8]
 8005fd2:	6923      	ldr	r3, [r4, #16]
 8005fd4:	3301      	adds	r3, #1
 8005fd6:	6123      	str	r3, [r4, #16]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	3b01      	subs	r3, #1
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	607b      	str	r3, [r7, #4]
 8005fe0:	f340 8084 	ble.w	80060ec <_scanf_float+0x278>
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	3301      	adds	r3, #1
 8005fe8:	603b      	str	r3, [r7, #0]
 8005fea:	e766      	b.n	8005eba <_scanf_float+0x46>
 8005fec:	eb1a 0f05 	cmn.w	sl, r5
 8005ff0:	f47f af70 	bne.w	8005ed4 <_scanf_float+0x60>
 8005ff4:	6822      	ldr	r2, [r4, #0]
 8005ff6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005ffa:	6022      	str	r2, [r4, #0]
 8005ffc:	f806 3b01 	strb.w	r3, [r6], #1
 8006000:	e7e4      	b.n	8005fcc <_scanf_float+0x158>
 8006002:	6822      	ldr	r2, [r4, #0]
 8006004:	0610      	lsls	r0, r2, #24
 8006006:	f57f af65 	bpl.w	8005ed4 <_scanf_float+0x60>
 800600a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800600e:	e7f4      	b.n	8005ffa <_scanf_float+0x186>
 8006010:	f1ba 0f00 	cmp.w	sl, #0
 8006014:	d10e      	bne.n	8006034 <_scanf_float+0x1c0>
 8006016:	f1b9 0f00 	cmp.w	r9, #0
 800601a:	d10e      	bne.n	800603a <_scanf_float+0x1c6>
 800601c:	6822      	ldr	r2, [r4, #0]
 800601e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006022:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006026:	d108      	bne.n	800603a <_scanf_float+0x1c6>
 8006028:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800602c:	6022      	str	r2, [r4, #0]
 800602e:	f04f 0a01 	mov.w	sl, #1
 8006032:	e7e3      	b.n	8005ffc <_scanf_float+0x188>
 8006034:	f1ba 0f02 	cmp.w	sl, #2
 8006038:	d055      	beq.n	80060e6 <_scanf_float+0x272>
 800603a:	2d01      	cmp	r5, #1
 800603c:	d002      	beq.n	8006044 <_scanf_float+0x1d0>
 800603e:	2d04      	cmp	r5, #4
 8006040:	f47f af48 	bne.w	8005ed4 <_scanf_float+0x60>
 8006044:	3501      	adds	r5, #1
 8006046:	b2ed      	uxtb	r5, r5
 8006048:	e7d8      	b.n	8005ffc <_scanf_float+0x188>
 800604a:	f1ba 0f01 	cmp.w	sl, #1
 800604e:	f47f af41 	bne.w	8005ed4 <_scanf_float+0x60>
 8006052:	f04f 0a02 	mov.w	sl, #2
 8006056:	e7d1      	b.n	8005ffc <_scanf_float+0x188>
 8006058:	b97d      	cbnz	r5, 800607a <_scanf_float+0x206>
 800605a:	f1b9 0f00 	cmp.w	r9, #0
 800605e:	f47f af3c 	bne.w	8005eda <_scanf_float+0x66>
 8006062:	6822      	ldr	r2, [r4, #0]
 8006064:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006068:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800606c:	f47f af39 	bne.w	8005ee2 <_scanf_float+0x6e>
 8006070:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006074:	6022      	str	r2, [r4, #0]
 8006076:	2501      	movs	r5, #1
 8006078:	e7c0      	b.n	8005ffc <_scanf_float+0x188>
 800607a:	2d03      	cmp	r5, #3
 800607c:	d0e2      	beq.n	8006044 <_scanf_float+0x1d0>
 800607e:	2d05      	cmp	r5, #5
 8006080:	e7de      	b.n	8006040 <_scanf_float+0x1cc>
 8006082:	2d02      	cmp	r5, #2
 8006084:	f47f af26 	bne.w	8005ed4 <_scanf_float+0x60>
 8006088:	2503      	movs	r5, #3
 800608a:	e7b7      	b.n	8005ffc <_scanf_float+0x188>
 800608c:	2d06      	cmp	r5, #6
 800608e:	f47f af21 	bne.w	8005ed4 <_scanf_float+0x60>
 8006092:	2507      	movs	r5, #7
 8006094:	e7b2      	b.n	8005ffc <_scanf_float+0x188>
 8006096:	6822      	ldr	r2, [r4, #0]
 8006098:	0591      	lsls	r1, r2, #22
 800609a:	f57f af1b 	bpl.w	8005ed4 <_scanf_float+0x60>
 800609e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80060a2:	6022      	str	r2, [r4, #0]
 80060a4:	f8cd 9004 	str.w	r9, [sp, #4]
 80060a8:	e7a8      	b.n	8005ffc <_scanf_float+0x188>
 80060aa:	6822      	ldr	r2, [r4, #0]
 80060ac:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80060b0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80060b4:	d006      	beq.n	80060c4 <_scanf_float+0x250>
 80060b6:	0550      	lsls	r0, r2, #21
 80060b8:	f57f af0c 	bpl.w	8005ed4 <_scanf_float+0x60>
 80060bc:	f1b9 0f00 	cmp.w	r9, #0
 80060c0:	f43f af0f 	beq.w	8005ee2 <_scanf_float+0x6e>
 80060c4:	0591      	lsls	r1, r2, #22
 80060c6:	bf58      	it	pl
 80060c8:	9901      	ldrpl	r1, [sp, #4]
 80060ca:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80060ce:	bf58      	it	pl
 80060d0:	eba9 0101 	subpl.w	r1, r9, r1
 80060d4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80060d8:	bf58      	it	pl
 80060da:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80060de:	6022      	str	r2, [r4, #0]
 80060e0:	f04f 0900 	mov.w	r9, #0
 80060e4:	e78a      	b.n	8005ffc <_scanf_float+0x188>
 80060e6:	f04f 0a03 	mov.w	sl, #3
 80060ea:	e787      	b.n	8005ffc <_scanf_float+0x188>
 80060ec:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80060f0:	4639      	mov	r1, r7
 80060f2:	4640      	mov	r0, r8
 80060f4:	4798      	blx	r3
 80060f6:	2800      	cmp	r0, #0
 80060f8:	f43f aedf 	beq.w	8005eba <_scanf_float+0x46>
 80060fc:	e6ea      	b.n	8005ed4 <_scanf_float+0x60>
 80060fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006102:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006106:	463a      	mov	r2, r7
 8006108:	4640      	mov	r0, r8
 800610a:	4798      	blx	r3
 800610c:	6923      	ldr	r3, [r4, #16]
 800610e:	3b01      	subs	r3, #1
 8006110:	6123      	str	r3, [r4, #16]
 8006112:	e6ec      	b.n	8005eee <_scanf_float+0x7a>
 8006114:	1e6b      	subs	r3, r5, #1
 8006116:	2b06      	cmp	r3, #6
 8006118:	d825      	bhi.n	8006166 <_scanf_float+0x2f2>
 800611a:	2d02      	cmp	r5, #2
 800611c:	d836      	bhi.n	800618c <_scanf_float+0x318>
 800611e:	455e      	cmp	r6, fp
 8006120:	f67f aee8 	bls.w	8005ef4 <_scanf_float+0x80>
 8006124:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006128:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800612c:	463a      	mov	r2, r7
 800612e:	4640      	mov	r0, r8
 8006130:	4798      	blx	r3
 8006132:	6923      	ldr	r3, [r4, #16]
 8006134:	3b01      	subs	r3, #1
 8006136:	6123      	str	r3, [r4, #16]
 8006138:	e7f1      	b.n	800611e <_scanf_float+0x2aa>
 800613a:	9802      	ldr	r0, [sp, #8]
 800613c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006140:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006144:	9002      	str	r0, [sp, #8]
 8006146:	463a      	mov	r2, r7
 8006148:	4640      	mov	r0, r8
 800614a:	4798      	blx	r3
 800614c:	6923      	ldr	r3, [r4, #16]
 800614e:	3b01      	subs	r3, #1
 8006150:	6123      	str	r3, [r4, #16]
 8006152:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006156:	fa5f fa8a 	uxtb.w	sl, sl
 800615a:	f1ba 0f02 	cmp.w	sl, #2
 800615e:	d1ec      	bne.n	800613a <_scanf_float+0x2c6>
 8006160:	3d03      	subs	r5, #3
 8006162:	b2ed      	uxtb	r5, r5
 8006164:	1b76      	subs	r6, r6, r5
 8006166:	6823      	ldr	r3, [r4, #0]
 8006168:	05da      	lsls	r2, r3, #23
 800616a:	d52f      	bpl.n	80061cc <_scanf_float+0x358>
 800616c:	055b      	lsls	r3, r3, #21
 800616e:	d510      	bpl.n	8006192 <_scanf_float+0x31e>
 8006170:	455e      	cmp	r6, fp
 8006172:	f67f aebf 	bls.w	8005ef4 <_scanf_float+0x80>
 8006176:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800617a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800617e:	463a      	mov	r2, r7
 8006180:	4640      	mov	r0, r8
 8006182:	4798      	blx	r3
 8006184:	6923      	ldr	r3, [r4, #16]
 8006186:	3b01      	subs	r3, #1
 8006188:	6123      	str	r3, [r4, #16]
 800618a:	e7f1      	b.n	8006170 <_scanf_float+0x2fc>
 800618c:	46aa      	mov	sl, r5
 800618e:	9602      	str	r6, [sp, #8]
 8006190:	e7df      	b.n	8006152 <_scanf_float+0x2de>
 8006192:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006196:	6923      	ldr	r3, [r4, #16]
 8006198:	2965      	cmp	r1, #101	; 0x65
 800619a:	f103 33ff 	add.w	r3, r3, #4294967295
 800619e:	f106 35ff 	add.w	r5, r6, #4294967295
 80061a2:	6123      	str	r3, [r4, #16]
 80061a4:	d00c      	beq.n	80061c0 <_scanf_float+0x34c>
 80061a6:	2945      	cmp	r1, #69	; 0x45
 80061a8:	d00a      	beq.n	80061c0 <_scanf_float+0x34c>
 80061aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80061ae:	463a      	mov	r2, r7
 80061b0:	4640      	mov	r0, r8
 80061b2:	4798      	blx	r3
 80061b4:	6923      	ldr	r3, [r4, #16]
 80061b6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80061ba:	3b01      	subs	r3, #1
 80061bc:	1eb5      	subs	r5, r6, #2
 80061be:	6123      	str	r3, [r4, #16]
 80061c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80061c4:	463a      	mov	r2, r7
 80061c6:	4640      	mov	r0, r8
 80061c8:	4798      	blx	r3
 80061ca:	462e      	mov	r6, r5
 80061cc:	6825      	ldr	r5, [r4, #0]
 80061ce:	f015 0510 	ands.w	r5, r5, #16
 80061d2:	d158      	bne.n	8006286 <_scanf_float+0x412>
 80061d4:	7035      	strb	r5, [r6, #0]
 80061d6:	6823      	ldr	r3, [r4, #0]
 80061d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80061dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061e0:	d11c      	bne.n	800621c <_scanf_float+0x3a8>
 80061e2:	9b01      	ldr	r3, [sp, #4]
 80061e4:	454b      	cmp	r3, r9
 80061e6:	eba3 0209 	sub.w	r2, r3, r9
 80061ea:	d124      	bne.n	8006236 <_scanf_float+0x3c2>
 80061ec:	2200      	movs	r2, #0
 80061ee:	4659      	mov	r1, fp
 80061f0:	4640      	mov	r0, r8
 80061f2:	f002 fc31 	bl	8008a58 <_strtod_r>
 80061f6:	9b03      	ldr	r3, [sp, #12]
 80061f8:	6821      	ldr	r1, [r4, #0]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f011 0f02 	tst.w	r1, #2
 8006200:	ec57 6b10 	vmov	r6, r7, d0
 8006204:	f103 0204 	add.w	r2, r3, #4
 8006208:	d020      	beq.n	800624c <_scanf_float+0x3d8>
 800620a:	9903      	ldr	r1, [sp, #12]
 800620c:	600a      	str	r2, [r1, #0]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	e9c3 6700 	strd	r6, r7, [r3]
 8006214:	68e3      	ldr	r3, [r4, #12]
 8006216:	3301      	adds	r3, #1
 8006218:	60e3      	str	r3, [r4, #12]
 800621a:	e66c      	b.n	8005ef6 <_scanf_float+0x82>
 800621c:	9b04      	ldr	r3, [sp, #16]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d0e4      	beq.n	80061ec <_scanf_float+0x378>
 8006222:	9905      	ldr	r1, [sp, #20]
 8006224:	230a      	movs	r3, #10
 8006226:	462a      	mov	r2, r5
 8006228:	3101      	adds	r1, #1
 800622a:	4640      	mov	r0, r8
 800622c:	f7ff f9b0 	bl	8005590 <_strtol_r>
 8006230:	9b04      	ldr	r3, [sp, #16]
 8006232:	9e05      	ldr	r6, [sp, #20]
 8006234:	1ac2      	subs	r2, r0, r3
 8006236:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800623a:	429e      	cmp	r6, r3
 800623c:	bf28      	it	cs
 800623e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006242:	4912      	ldr	r1, [pc, #72]	; (800628c <_scanf_float+0x418>)
 8006244:	4630      	mov	r0, r6
 8006246:	f000 f8e7 	bl	8006418 <siprintf>
 800624a:	e7cf      	b.n	80061ec <_scanf_float+0x378>
 800624c:	f011 0f04 	tst.w	r1, #4
 8006250:	9903      	ldr	r1, [sp, #12]
 8006252:	600a      	str	r2, [r1, #0]
 8006254:	d1db      	bne.n	800620e <_scanf_float+0x39a>
 8006256:	f8d3 8000 	ldr.w	r8, [r3]
 800625a:	ee10 2a10 	vmov	r2, s0
 800625e:	ee10 0a10 	vmov	r0, s0
 8006262:	463b      	mov	r3, r7
 8006264:	4639      	mov	r1, r7
 8006266:	f7fa fc71 	bl	8000b4c <__aeabi_dcmpun>
 800626a:	b128      	cbz	r0, 8006278 <_scanf_float+0x404>
 800626c:	4808      	ldr	r0, [pc, #32]	; (8006290 <_scanf_float+0x41c>)
 800626e:	f000 f9b7 	bl	80065e0 <nanf>
 8006272:	ed88 0a00 	vstr	s0, [r8]
 8006276:	e7cd      	b.n	8006214 <_scanf_float+0x3a0>
 8006278:	4630      	mov	r0, r6
 800627a:	4639      	mov	r1, r7
 800627c:	f7fa fcc4 	bl	8000c08 <__aeabi_d2f>
 8006280:	f8c8 0000 	str.w	r0, [r8]
 8006284:	e7c6      	b.n	8006214 <_scanf_float+0x3a0>
 8006286:	2500      	movs	r5, #0
 8006288:	e635      	b.n	8005ef6 <_scanf_float+0x82>
 800628a:	bf00      	nop
 800628c:	08009eb1 	.word	0x08009eb1
 8006290:	0800a144 	.word	0x0800a144

08006294 <std>:
 8006294:	2300      	movs	r3, #0
 8006296:	b510      	push	{r4, lr}
 8006298:	4604      	mov	r4, r0
 800629a:	e9c0 3300 	strd	r3, r3, [r0]
 800629e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80062a2:	6083      	str	r3, [r0, #8]
 80062a4:	8181      	strh	r1, [r0, #12]
 80062a6:	6643      	str	r3, [r0, #100]	; 0x64
 80062a8:	81c2      	strh	r2, [r0, #14]
 80062aa:	6183      	str	r3, [r0, #24]
 80062ac:	4619      	mov	r1, r3
 80062ae:	2208      	movs	r2, #8
 80062b0:	305c      	adds	r0, #92	; 0x5c
 80062b2:	f000 f914 	bl	80064de <memset>
 80062b6:	4b0d      	ldr	r3, [pc, #52]	; (80062ec <std+0x58>)
 80062b8:	6263      	str	r3, [r4, #36]	; 0x24
 80062ba:	4b0d      	ldr	r3, [pc, #52]	; (80062f0 <std+0x5c>)
 80062bc:	62a3      	str	r3, [r4, #40]	; 0x28
 80062be:	4b0d      	ldr	r3, [pc, #52]	; (80062f4 <std+0x60>)
 80062c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80062c2:	4b0d      	ldr	r3, [pc, #52]	; (80062f8 <std+0x64>)
 80062c4:	6323      	str	r3, [r4, #48]	; 0x30
 80062c6:	4b0d      	ldr	r3, [pc, #52]	; (80062fc <std+0x68>)
 80062c8:	6224      	str	r4, [r4, #32]
 80062ca:	429c      	cmp	r4, r3
 80062cc:	d006      	beq.n	80062dc <std+0x48>
 80062ce:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80062d2:	4294      	cmp	r4, r2
 80062d4:	d002      	beq.n	80062dc <std+0x48>
 80062d6:	33d0      	adds	r3, #208	; 0xd0
 80062d8:	429c      	cmp	r4, r3
 80062da:	d105      	bne.n	80062e8 <std+0x54>
 80062dc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80062e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062e4:	f000 b978 	b.w	80065d8 <__retarget_lock_init_recursive>
 80062e8:	bd10      	pop	{r4, pc}
 80062ea:	bf00      	nop
 80062ec:	08006459 	.word	0x08006459
 80062f0:	0800647b 	.word	0x0800647b
 80062f4:	080064b3 	.word	0x080064b3
 80062f8:	080064d7 	.word	0x080064d7
 80062fc:	200007d4 	.word	0x200007d4

08006300 <stdio_exit_handler>:
 8006300:	4a02      	ldr	r2, [pc, #8]	; (800630c <stdio_exit_handler+0xc>)
 8006302:	4903      	ldr	r1, [pc, #12]	; (8006310 <stdio_exit_handler+0x10>)
 8006304:	4803      	ldr	r0, [pc, #12]	; (8006314 <stdio_exit_handler+0x14>)
 8006306:	f000 b869 	b.w	80063dc <_fwalk_sglue>
 800630a:	bf00      	nop
 800630c:	2000000c 	.word	0x2000000c
 8006310:	08008e21 	.word	0x08008e21
 8006314:	20000018 	.word	0x20000018

08006318 <cleanup_stdio>:
 8006318:	6841      	ldr	r1, [r0, #4]
 800631a:	4b0c      	ldr	r3, [pc, #48]	; (800634c <cleanup_stdio+0x34>)
 800631c:	4299      	cmp	r1, r3
 800631e:	b510      	push	{r4, lr}
 8006320:	4604      	mov	r4, r0
 8006322:	d001      	beq.n	8006328 <cleanup_stdio+0x10>
 8006324:	f002 fd7c 	bl	8008e20 <_fflush_r>
 8006328:	68a1      	ldr	r1, [r4, #8]
 800632a:	4b09      	ldr	r3, [pc, #36]	; (8006350 <cleanup_stdio+0x38>)
 800632c:	4299      	cmp	r1, r3
 800632e:	d002      	beq.n	8006336 <cleanup_stdio+0x1e>
 8006330:	4620      	mov	r0, r4
 8006332:	f002 fd75 	bl	8008e20 <_fflush_r>
 8006336:	68e1      	ldr	r1, [r4, #12]
 8006338:	4b06      	ldr	r3, [pc, #24]	; (8006354 <cleanup_stdio+0x3c>)
 800633a:	4299      	cmp	r1, r3
 800633c:	d004      	beq.n	8006348 <cleanup_stdio+0x30>
 800633e:	4620      	mov	r0, r4
 8006340:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006344:	f002 bd6c 	b.w	8008e20 <_fflush_r>
 8006348:	bd10      	pop	{r4, pc}
 800634a:	bf00      	nop
 800634c:	200007d4 	.word	0x200007d4
 8006350:	2000083c 	.word	0x2000083c
 8006354:	200008a4 	.word	0x200008a4

08006358 <global_stdio_init.part.0>:
 8006358:	b510      	push	{r4, lr}
 800635a:	4b0b      	ldr	r3, [pc, #44]	; (8006388 <global_stdio_init.part.0+0x30>)
 800635c:	4c0b      	ldr	r4, [pc, #44]	; (800638c <global_stdio_init.part.0+0x34>)
 800635e:	4a0c      	ldr	r2, [pc, #48]	; (8006390 <global_stdio_init.part.0+0x38>)
 8006360:	601a      	str	r2, [r3, #0]
 8006362:	4620      	mov	r0, r4
 8006364:	2200      	movs	r2, #0
 8006366:	2104      	movs	r1, #4
 8006368:	f7ff ff94 	bl	8006294 <std>
 800636c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006370:	2201      	movs	r2, #1
 8006372:	2109      	movs	r1, #9
 8006374:	f7ff ff8e 	bl	8006294 <std>
 8006378:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800637c:	2202      	movs	r2, #2
 800637e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006382:	2112      	movs	r1, #18
 8006384:	f7ff bf86 	b.w	8006294 <std>
 8006388:	2000090c 	.word	0x2000090c
 800638c:	200007d4 	.word	0x200007d4
 8006390:	08006301 	.word	0x08006301

08006394 <__sfp_lock_acquire>:
 8006394:	4801      	ldr	r0, [pc, #4]	; (800639c <__sfp_lock_acquire+0x8>)
 8006396:	f000 b920 	b.w	80065da <__retarget_lock_acquire_recursive>
 800639a:	bf00      	nop
 800639c:	20000915 	.word	0x20000915

080063a0 <__sfp_lock_release>:
 80063a0:	4801      	ldr	r0, [pc, #4]	; (80063a8 <__sfp_lock_release+0x8>)
 80063a2:	f000 b91b 	b.w	80065dc <__retarget_lock_release_recursive>
 80063a6:	bf00      	nop
 80063a8:	20000915 	.word	0x20000915

080063ac <__sinit>:
 80063ac:	b510      	push	{r4, lr}
 80063ae:	4604      	mov	r4, r0
 80063b0:	f7ff fff0 	bl	8006394 <__sfp_lock_acquire>
 80063b4:	6a23      	ldr	r3, [r4, #32]
 80063b6:	b11b      	cbz	r3, 80063c0 <__sinit+0x14>
 80063b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063bc:	f7ff bff0 	b.w	80063a0 <__sfp_lock_release>
 80063c0:	4b04      	ldr	r3, [pc, #16]	; (80063d4 <__sinit+0x28>)
 80063c2:	6223      	str	r3, [r4, #32]
 80063c4:	4b04      	ldr	r3, [pc, #16]	; (80063d8 <__sinit+0x2c>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d1f5      	bne.n	80063b8 <__sinit+0xc>
 80063cc:	f7ff ffc4 	bl	8006358 <global_stdio_init.part.0>
 80063d0:	e7f2      	b.n	80063b8 <__sinit+0xc>
 80063d2:	bf00      	nop
 80063d4:	08006319 	.word	0x08006319
 80063d8:	2000090c 	.word	0x2000090c

080063dc <_fwalk_sglue>:
 80063dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063e0:	4607      	mov	r7, r0
 80063e2:	4688      	mov	r8, r1
 80063e4:	4614      	mov	r4, r2
 80063e6:	2600      	movs	r6, #0
 80063e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80063ec:	f1b9 0901 	subs.w	r9, r9, #1
 80063f0:	d505      	bpl.n	80063fe <_fwalk_sglue+0x22>
 80063f2:	6824      	ldr	r4, [r4, #0]
 80063f4:	2c00      	cmp	r4, #0
 80063f6:	d1f7      	bne.n	80063e8 <_fwalk_sglue+0xc>
 80063f8:	4630      	mov	r0, r6
 80063fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063fe:	89ab      	ldrh	r3, [r5, #12]
 8006400:	2b01      	cmp	r3, #1
 8006402:	d907      	bls.n	8006414 <_fwalk_sglue+0x38>
 8006404:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006408:	3301      	adds	r3, #1
 800640a:	d003      	beq.n	8006414 <_fwalk_sglue+0x38>
 800640c:	4629      	mov	r1, r5
 800640e:	4638      	mov	r0, r7
 8006410:	47c0      	blx	r8
 8006412:	4306      	orrs	r6, r0
 8006414:	3568      	adds	r5, #104	; 0x68
 8006416:	e7e9      	b.n	80063ec <_fwalk_sglue+0x10>

08006418 <siprintf>:
 8006418:	b40e      	push	{r1, r2, r3}
 800641a:	b500      	push	{lr}
 800641c:	b09c      	sub	sp, #112	; 0x70
 800641e:	ab1d      	add	r3, sp, #116	; 0x74
 8006420:	9002      	str	r0, [sp, #8]
 8006422:	9006      	str	r0, [sp, #24]
 8006424:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006428:	4809      	ldr	r0, [pc, #36]	; (8006450 <siprintf+0x38>)
 800642a:	9107      	str	r1, [sp, #28]
 800642c:	9104      	str	r1, [sp, #16]
 800642e:	4909      	ldr	r1, [pc, #36]	; (8006454 <siprintf+0x3c>)
 8006430:	f853 2b04 	ldr.w	r2, [r3], #4
 8006434:	9105      	str	r1, [sp, #20]
 8006436:	6800      	ldr	r0, [r0, #0]
 8006438:	9301      	str	r3, [sp, #4]
 800643a:	a902      	add	r1, sp, #8
 800643c:	f002 fb6c 	bl	8008b18 <_svfiprintf_r>
 8006440:	9b02      	ldr	r3, [sp, #8]
 8006442:	2200      	movs	r2, #0
 8006444:	701a      	strb	r2, [r3, #0]
 8006446:	b01c      	add	sp, #112	; 0x70
 8006448:	f85d eb04 	ldr.w	lr, [sp], #4
 800644c:	b003      	add	sp, #12
 800644e:	4770      	bx	lr
 8006450:	20000064 	.word	0x20000064
 8006454:	ffff0208 	.word	0xffff0208

08006458 <__sread>:
 8006458:	b510      	push	{r4, lr}
 800645a:	460c      	mov	r4, r1
 800645c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006460:	f000 f86c 	bl	800653c <_read_r>
 8006464:	2800      	cmp	r0, #0
 8006466:	bfab      	itete	ge
 8006468:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800646a:	89a3      	ldrhlt	r3, [r4, #12]
 800646c:	181b      	addge	r3, r3, r0
 800646e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006472:	bfac      	ite	ge
 8006474:	6563      	strge	r3, [r4, #84]	; 0x54
 8006476:	81a3      	strhlt	r3, [r4, #12]
 8006478:	bd10      	pop	{r4, pc}

0800647a <__swrite>:
 800647a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800647e:	461f      	mov	r7, r3
 8006480:	898b      	ldrh	r3, [r1, #12]
 8006482:	05db      	lsls	r3, r3, #23
 8006484:	4605      	mov	r5, r0
 8006486:	460c      	mov	r4, r1
 8006488:	4616      	mov	r6, r2
 800648a:	d505      	bpl.n	8006498 <__swrite+0x1e>
 800648c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006490:	2302      	movs	r3, #2
 8006492:	2200      	movs	r2, #0
 8006494:	f000 f840 	bl	8006518 <_lseek_r>
 8006498:	89a3      	ldrh	r3, [r4, #12]
 800649a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800649e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80064a2:	81a3      	strh	r3, [r4, #12]
 80064a4:	4632      	mov	r2, r6
 80064a6:	463b      	mov	r3, r7
 80064a8:	4628      	mov	r0, r5
 80064aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80064ae:	f000 b857 	b.w	8006560 <_write_r>

080064b2 <__sseek>:
 80064b2:	b510      	push	{r4, lr}
 80064b4:	460c      	mov	r4, r1
 80064b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064ba:	f000 f82d 	bl	8006518 <_lseek_r>
 80064be:	1c43      	adds	r3, r0, #1
 80064c0:	89a3      	ldrh	r3, [r4, #12]
 80064c2:	bf15      	itete	ne
 80064c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80064c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80064ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80064ce:	81a3      	strheq	r3, [r4, #12]
 80064d0:	bf18      	it	ne
 80064d2:	81a3      	strhne	r3, [r4, #12]
 80064d4:	bd10      	pop	{r4, pc}

080064d6 <__sclose>:
 80064d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064da:	f000 b80d 	b.w	80064f8 <_close_r>

080064de <memset>:
 80064de:	4402      	add	r2, r0
 80064e0:	4603      	mov	r3, r0
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d100      	bne.n	80064e8 <memset+0xa>
 80064e6:	4770      	bx	lr
 80064e8:	f803 1b01 	strb.w	r1, [r3], #1
 80064ec:	e7f9      	b.n	80064e2 <memset+0x4>
	...

080064f0 <_localeconv_r>:
 80064f0:	4800      	ldr	r0, [pc, #0]	; (80064f4 <_localeconv_r+0x4>)
 80064f2:	4770      	bx	lr
 80064f4:	20000158 	.word	0x20000158

080064f8 <_close_r>:
 80064f8:	b538      	push	{r3, r4, r5, lr}
 80064fa:	4d06      	ldr	r5, [pc, #24]	; (8006514 <_close_r+0x1c>)
 80064fc:	2300      	movs	r3, #0
 80064fe:	4604      	mov	r4, r0
 8006500:	4608      	mov	r0, r1
 8006502:	602b      	str	r3, [r5, #0]
 8006504:	f7fb fd23 	bl	8001f4e <_close>
 8006508:	1c43      	adds	r3, r0, #1
 800650a:	d102      	bne.n	8006512 <_close_r+0x1a>
 800650c:	682b      	ldr	r3, [r5, #0]
 800650e:	b103      	cbz	r3, 8006512 <_close_r+0x1a>
 8006510:	6023      	str	r3, [r4, #0]
 8006512:	bd38      	pop	{r3, r4, r5, pc}
 8006514:	20000910 	.word	0x20000910

08006518 <_lseek_r>:
 8006518:	b538      	push	{r3, r4, r5, lr}
 800651a:	4d07      	ldr	r5, [pc, #28]	; (8006538 <_lseek_r+0x20>)
 800651c:	4604      	mov	r4, r0
 800651e:	4608      	mov	r0, r1
 8006520:	4611      	mov	r1, r2
 8006522:	2200      	movs	r2, #0
 8006524:	602a      	str	r2, [r5, #0]
 8006526:	461a      	mov	r2, r3
 8006528:	f7fb fd38 	bl	8001f9c <_lseek>
 800652c:	1c43      	adds	r3, r0, #1
 800652e:	d102      	bne.n	8006536 <_lseek_r+0x1e>
 8006530:	682b      	ldr	r3, [r5, #0]
 8006532:	b103      	cbz	r3, 8006536 <_lseek_r+0x1e>
 8006534:	6023      	str	r3, [r4, #0]
 8006536:	bd38      	pop	{r3, r4, r5, pc}
 8006538:	20000910 	.word	0x20000910

0800653c <_read_r>:
 800653c:	b538      	push	{r3, r4, r5, lr}
 800653e:	4d07      	ldr	r5, [pc, #28]	; (800655c <_read_r+0x20>)
 8006540:	4604      	mov	r4, r0
 8006542:	4608      	mov	r0, r1
 8006544:	4611      	mov	r1, r2
 8006546:	2200      	movs	r2, #0
 8006548:	602a      	str	r2, [r5, #0]
 800654a:	461a      	mov	r2, r3
 800654c:	f7fb fcc6 	bl	8001edc <_read>
 8006550:	1c43      	adds	r3, r0, #1
 8006552:	d102      	bne.n	800655a <_read_r+0x1e>
 8006554:	682b      	ldr	r3, [r5, #0]
 8006556:	b103      	cbz	r3, 800655a <_read_r+0x1e>
 8006558:	6023      	str	r3, [r4, #0]
 800655a:	bd38      	pop	{r3, r4, r5, pc}
 800655c:	20000910 	.word	0x20000910

08006560 <_write_r>:
 8006560:	b538      	push	{r3, r4, r5, lr}
 8006562:	4d07      	ldr	r5, [pc, #28]	; (8006580 <_write_r+0x20>)
 8006564:	4604      	mov	r4, r0
 8006566:	4608      	mov	r0, r1
 8006568:	4611      	mov	r1, r2
 800656a:	2200      	movs	r2, #0
 800656c:	602a      	str	r2, [r5, #0]
 800656e:	461a      	mov	r2, r3
 8006570:	f7fb fcd1 	bl	8001f16 <_write>
 8006574:	1c43      	adds	r3, r0, #1
 8006576:	d102      	bne.n	800657e <_write_r+0x1e>
 8006578:	682b      	ldr	r3, [r5, #0]
 800657a:	b103      	cbz	r3, 800657e <_write_r+0x1e>
 800657c:	6023      	str	r3, [r4, #0]
 800657e:	bd38      	pop	{r3, r4, r5, pc}
 8006580:	20000910 	.word	0x20000910

08006584 <__errno>:
 8006584:	4b01      	ldr	r3, [pc, #4]	; (800658c <__errno+0x8>)
 8006586:	6818      	ldr	r0, [r3, #0]
 8006588:	4770      	bx	lr
 800658a:	bf00      	nop
 800658c:	20000064 	.word	0x20000064

08006590 <__libc_init_array>:
 8006590:	b570      	push	{r4, r5, r6, lr}
 8006592:	4d0d      	ldr	r5, [pc, #52]	; (80065c8 <__libc_init_array+0x38>)
 8006594:	4c0d      	ldr	r4, [pc, #52]	; (80065cc <__libc_init_array+0x3c>)
 8006596:	1b64      	subs	r4, r4, r5
 8006598:	10a4      	asrs	r4, r4, #2
 800659a:	2600      	movs	r6, #0
 800659c:	42a6      	cmp	r6, r4
 800659e:	d109      	bne.n	80065b4 <__libc_init_array+0x24>
 80065a0:	4d0b      	ldr	r5, [pc, #44]	; (80065d0 <__libc_init_array+0x40>)
 80065a2:	4c0c      	ldr	r4, [pc, #48]	; (80065d4 <__libc_init_array+0x44>)
 80065a4:	f003 fbc0 	bl	8009d28 <_init>
 80065a8:	1b64      	subs	r4, r4, r5
 80065aa:	10a4      	asrs	r4, r4, #2
 80065ac:	2600      	movs	r6, #0
 80065ae:	42a6      	cmp	r6, r4
 80065b0:	d105      	bne.n	80065be <__libc_init_array+0x2e>
 80065b2:	bd70      	pop	{r4, r5, r6, pc}
 80065b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80065b8:	4798      	blx	r3
 80065ba:	3601      	adds	r6, #1
 80065bc:	e7ee      	b.n	800659c <__libc_init_array+0xc>
 80065be:	f855 3b04 	ldr.w	r3, [r5], #4
 80065c2:	4798      	blx	r3
 80065c4:	3601      	adds	r6, #1
 80065c6:	e7f2      	b.n	80065ae <__libc_init_array+0x1e>
 80065c8:	0800a1b0 	.word	0x0800a1b0
 80065cc:	0800a1b0 	.word	0x0800a1b0
 80065d0:	0800a1b0 	.word	0x0800a1b0
 80065d4:	0800a1b4 	.word	0x0800a1b4

080065d8 <__retarget_lock_init_recursive>:
 80065d8:	4770      	bx	lr

080065da <__retarget_lock_acquire_recursive>:
 80065da:	4770      	bx	lr

080065dc <__retarget_lock_release_recursive>:
 80065dc:	4770      	bx	lr
	...

080065e0 <nanf>:
 80065e0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80065e8 <nanf+0x8>
 80065e4:	4770      	bx	lr
 80065e6:	bf00      	nop
 80065e8:	7fc00000 	.word	0x7fc00000

080065ec <quorem>:
 80065ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065f0:	6903      	ldr	r3, [r0, #16]
 80065f2:	690c      	ldr	r4, [r1, #16]
 80065f4:	42a3      	cmp	r3, r4
 80065f6:	4607      	mov	r7, r0
 80065f8:	db7e      	blt.n	80066f8 <quorem+0x10c>
 80065fa:	3c01      	subs	r4, #1
 80065fc:	f101 0814 	add.w	r8, r1, #20
 8006600:	f100 0514 	add.w	r5, r0, #20
 8006604:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006608:	9301      	str	r3, [sp, #4]
 800660a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800660e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006612:	3301      	adds	r3, #1
 8006614:	429a      	cmp	r2, r3
 8006616:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800661a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800661e:	fbb2 f6f3 	udiv	r6, r2, r3
 8006622:	d331      	bcc.n	8006688 <quorem+0x9c>
 8006624:	f04f 0e00 	mov.w	lr, #0
 8006628:	4640      	mov	r0, r8
 800662a:	46ac      	mov	ip, r5
 800662c:	46f2      	mov	sl, lr
 800662e:	f850 2b04 	ldr.w	r2, [r0], #4
 8006632:	b293      	uxth	r3, r2
 8006634:	fb06 e303 	mla	r3, r6, r3, lr
 8006638:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800663c:	0c1a      	lsrs	r2, r3, #16
 800663e:	b29b      	uxth	r3, r3
 8006640:	ebaa 0303 	sub.w	r3, sl, r3
 8006644:	f8dc a000 	ldr.w	sl, [ip]
 8006648:	fa13 f38a 	uxtah	r3, r3, sl
 800664c:	fb06 220e 	mla	r2, r6, lr, r2
 8006650:	9300      	str	r3, [sp, #0]
 8006652:	9b00      	ldr	r3, [sp, #0]
 8006654:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006658:	b292      	uxth	r2, r2
 800665a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800665e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006662:	f8bd 3000 	ldrh.w	r3, [sp]
 8006666:	4581      	cmp	r9, r0
 8006668:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800666c:	f84c 3b04 	str.w	r3, [ip], #4
 8006670:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006674:	d2db      	bcs.n	800662e <quorem+0x42>
 8006676:	f855 300b 	ldr.w	r3, [r5, fp]
 800667a:	b92b      	cbnz	r3, 8006688 <quorem+0x9c>
 800667c:	9b01      	ldr	r3, [sp, #4]
 800667e:	3b04      	subs	r3, #4
 8006680:	429d      	cmp	r5, r3
 8006682:	461a      	mov	r2, r3
 8006684:	d32c      	bcc.n	80066e0 <quorem+0xf4>
 8006686:	613c      	str	r4, [r7, #16]
 8006688:	4638      	mov	r0, r7
 800668a:	f001 f9f1 	bl	8007a70 <__mcmp>
 800668e:	2800      	cmp	r0, #0
 8006690:	db22      	blt.n	80066d8 <quorem+0xec>
 8006692:	3601      	adds	r6, #1
 8006694:	4629      	mov	r1, r5
 8006696:	2000      	movs	r0, #0
 8006698:	f858 2b04 	ldr.w	r2, [r8], #4
 800669c:	f8d1 c000 	ldr.w	ip, [r1]
 80066a0:	b293      	uxth	r3, r2
 80066a2:	1ac3      	subs	r3, r0, r3
 80066a4:	0c12      	lsrs	r2, r2, #16
 80066a6:	fa13 f38c 	uxtah	r3, r3, ip
 80066aa:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80066ae:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80066b8:	45c1      	cmp	r9, r8
 80066ba:	f841 3b04 	str.w	r3, [r1], #4
 80066be:	ea4f 4022 	mov.w	r0, r2, asr #16
 80066c2:	d2e9      	bcs.n	8006698 <quorem+0xac>
 80066c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80066c8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80066cc:	b922      	cbnz	r2, 80066d8 <quorem+0xec>
 80066ce:	3b04      	subs	r3, #4
 80066d0:	429d      	cmp	r5, r3
 80066d2:	461a      	mov	r2, r3
 80066d4:	d30a      	bcc.n	80066ec <quorem+0x100>
 80066d6:	613c      	str	r4, [r7, #16]
 80066d8:	4630      	mov	r0, r6
 80066da:	b003      	add	sp, #12
 80066dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066e0:	6812      	ldr	r2, [r2, #0]
 80066e2:	3b04      	subs	r3, #4
 80066e4:	2a00      	cmp	r2, #0
 80066e6:	d1ce      	bne.n	8006686 <quorem+0x9a>
 80066e8:	3c01      	subs	r4, #1
 80066ea:	e7c9      	b.n	8006680 <quorem+0x94>
 80066ec:	6812      	ldr	r2, [r2, #0]
 80066ee:	3b04      	subs	r3, #4
 80066f0:	2a00      	cmp	r2, #0
 80066f2:	d1f0      	bne.n	80066d6 <quorem+0xea>
 80066f4:	3c01      	subs	r4, #1
 80066f6:	e7eb      	b.n	80066d0 <quorem+0xe4>
 80066f8:	2000      	movs	r0, #0
 80066fa:	e7ee      	b.n	80066da <quorem+0xee>
 80066fc:	0000      	movs	r0, r0
	...

08006700 <_dtoa_r>:
 8006700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006704:	ed2d 8b04 	vpush	{d8-d9}
 8006708:	69c5      	ldr	r5, [r0, #28]
 800670a:	b093      	sub	sp, #76	; 0x4c
 800670c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006710:	ec57 6b10 	vmov	r6, r7, d0
 8006714:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006718:	9107      	str	r1, [sp, #28]
 800671a:	4604      	mov	r4, r0
 800671c:	920a      	str	r2, [sp, #40]	; 0x28
 800671e:	930d      	str	r3, [sp, #52]	; 0x34
 8006720:	b975      	cbnz	r5, 8006740 <_dtoa_r+0x40>
 8006722:	2010      	movs	r0, #16
 8006724:	f000 fe2a 	bl	800737c <malloc>
 8006728:	4602      	mov	r2, r0
 800672a:	61e0      	str	r0, [r4, #28]
 800672c:	b920      	cbnz	r0, 8006738 <_dtoa_r+0x38>
 800672e:	4bae      	ldr	r3, [pc, #696]	; (80069e8 <_dtoa_r+0x2e8>)
 8006730:	21ef      	movs	r1, #239	; 0xef
 8006732:	48ae      	ldr	r0, [pc, #696]	; (80069ec <_dtoa_r+0x2ec>)
 8006734:	f002 fbf0 	bl	8008f18 <__assert_func>
 8006738:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800673c:	6005      	str	r5, [r0, #0]
 800673e:	60c5      	str	r5, [r0, #12]
 8006740:	69e3      	ldr	r3, [r4, #28]
 8006742:	6819      	ldr	r1, [r3, #0]
 8006744:	b151      	cbz	r1, 800675c <_dtoa_r+0x5c>
 8006746:	685a      	ldr	r2, [r3, #4]
 8006748:	604a      	str	r2, [r1, #4]
 800674a:	2301      	movs	r3, #1
 800674c:	4093      	lsls	r3, r2
 800674e:	608b      	str	r3, [r1, #8]
 8006750:	4620      	mov	r0, r4
 8006752:	f000 ff07 	bl	8007564 <_Bfree>
 8006756:	69e3      	ldr	r3, [r4, #28]
 8006758:	2200      	movs	r2, #0
 800675a:	601a      	str	r2, [r3, #0]
 800675c:	1e3b      	subs	r3, r7, #0
 800675e:	bfbb      	ittet	lt
 8006760:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006764:	9303      	strlt	r3, [sp, #12]
 8006766:	2300      	movge	r3, #0
 8006768:	2201      	movlt	r2, #1
 800676a:	bfac      	ite	ge
 800676c:	f8c8 3000 	strge.w	r3, [r8]
 8006770:	f8c8 2000 	strlt.w	r2, [r8]
 8006774:	4b9e      	ldr	r3, [pc, #632]	; (80069f0 <_dtoa_r+0x2f0>)
 8006776:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800677a:	ea33 0308 	bics.w	r3, r3, r8
 800677e:	d11b      	bne.n	80067b8 <_dtoa_r+0xb8>
 8006780:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006782:	f242 730f 	movw	r3, #9999	; 0x270f
 8006786:	6013      	str	r3, [r2, #0]
 8006788:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800678c:	4333      	orrs	r3, r6
 800678e:	f000 8593 	beq.w	80072b8 <_dtoa_r+0xbb8>
 8006792:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006794:	b963      	cbnz	r3, 80067b0 <_dtoa_r+0xb0>
 8006796:	4b97      	ldr	r3, [pc, #604]	; (80069f4 <_dtoa_r+0x2f4>)
 8006798:	e027      	b.n	80067ea <_dtoa_r+0xea>
 800679a:	4b97      	ldr	r3, [pc, #604]	; (80069f8 <_dtoa_r+0x2f8>)
 800679c:	9300      	str	r3, [sp, #0]
 800679e:	3308      	adds	r3, #8
 80067a0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80067a2:	6013      	str	r3, [r2, #0]
 80067a4:	9800      	ldr	r0, [sp, #0]
 80067a6:	b013      	add	sp, #76	; 0x4c
 80067a8:	ecbd 8b04 	vpop	{d8-d9}
 80067ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067b0:	4b90      	ldr	r3, [pc, #576]	; (80069f4 <_dtoa_r+0x2f4>)
 80067b2:	9300      	str	r3, [sp, #0]
 80067b4:	3303      	adds	r3, #3
 80067b6:	e7f3      	b.n	80067a0 <_dtoa_r+0xa0>
 80067b8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80067bc:	2200      	movs	r2, #0
 80067be:	ec51 0b17 	vmov	r0, r1, d7
 80067c2:	eeb0 8a47 	vmov.f32	s16, s14
 80067c6:	eef0 8a67 	vmov.f32	s17, s15
 80067ca:	2300      	movs	r3, #0
 80067cc:	f7fa f98c 	bl	8000ae8 <__aeabi_dcmpeq>
 80067d0:	4681      	mov	r9, r0
 80067d2:	b160      	cbz	r0, 80067ee <_dtoa_r+0xee>
 80067d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80067d6:	2301      	movs	r3, #1
 80067d8:	6013      	str	r3, [r2, #0]
 80067da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80067dc:	2b00      	cmp	r3, #0
 80067de:	f000 8568 	beq.w	80072b2 <_dtoa_r+0xbb2>
 80067e2:	4b86      	ldr	r3, [pc, #536]	; (80069fc <_dtoa_r+0x2fc>)
 80067e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80067e6:	6013      	str	r3, [r2, #0]
 80067e8:	3b01      	subs	r3, #1
 80067ea:	9300      	str	r3, [sp, #0]
 80067ec:	e7da      	b.n	80067a4 <_dtoa_r+0xa4>
 80067ee:	aa10      	add	r2, sp, #64	; 0x40
 80067f0:	a911      	add	r1, sp, #68	; 0x44
 80067f2:	4620      	mov	r0, r4
 80067f4:	eeb0 0a48 	vmov.f32	s0, s16
 80067f8:	eef0 0a68 	vmov.f32	s1, s17
 80067fc:	f001 fa4e 	bl	8007c9c <__d2b>
 8006800:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006804:	4682      	mov	sl, r0
 8006806:	2d00      	cmp	r5, #0
 8006808:	d07f      	beq.n	800690a <_dtoa_r+0x20a>
 800680a:	ee18 3a90 	vmov	r3, s17
 800680e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006812:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006816:	ec51 0b18 	vmov	r0, r1, d8
 800681a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800681e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006822:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006826:	4619      	mov	r1, r3
 8006828:	2200      	movs	r2, #0
 800682a:	4b75      	ldr	r3, [pc, #468]	; (8006a00 <_dtoa_r+0x300>)
 800682c:	f7f9 fd3c 	bl	80002a8 <__aeabi_dsub>
 8006830:	a367      	add	r3, pc, #412	; (adr r3, 80069d0 <_dtoa_r+0x2d0>)
 8006832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006836:	f7f9 feef 	bl	8000618 <__aeabi_dmul>
 800683a:	a367      	add	r3, pc, #412	; (adr r3, 80069d8 <_dtoa_r+0x2d8>)
 800683c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006840:	f7f9 fd34 	bl	80002ac <__adddf3>
 8006844:	4606      	mov	r6, r0
 8006846:	4628      	mov	r0, r5
 8006848:	460f      	mov	r7, r1
 800684a:	f7f9 fe7b 	bl	8000544 <__aeabi_i2d>
 800684e:	a364      	add	r3, pc, #400	; (adr r3, 80069e0 <_dtoa_r+0x2e0>)
 8006850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006854:	f7f9 fee0 	bl	8000618 <__aeabi_dmul>
 8006858:	4602      	mov	r2, r0
 800685a:	460b      	mov	r3, r1
 800685c:	4630      	mov	r0, r6
 800685e:	4639      	mov	r1, r7
 8006860:	f7f9 fd24 	bl	80002ac <__adddf3>
 8006864:	4606      	mov	r6, r0
 8006866:	460f      	mov	r7, r1
 8006868:	f7fa f986 	bl	8000b78 <__aeabi_d2iz>
 800686c:	2200      	movs	r2, #0
 800686e:	4683      	mov	fp, r0
 8006870:	2300      	movs	r3, #0
 8006872:	4630      	mov	r0, r6
 8006874:	4639      	mov	r1, r7
 8006876:	f7fa f941 	bl	8000afc <__aeabi_dcmplt>
 800687a:	b148      	cbz	r0, 8006890 <_dtoa_r+0x190>
 800687c:	4658      	mov	r0, fp
 800687e:	f7f9 fe61 	bl	8000544 <__aeabi_i2d>
 8006882:	4632      	mov	r2, r6
 8006884:	463b      	mov	r3, r7
 8006886:	f7fa f92f 	bl	8000ae8 <__aeabi_dcmpeq>
 800688a:	b908      	cbnz	r0, 8006890 <_dtoa_r+0x190>
 800688c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006890:	f1bb 0f16 	cmp.w	fp, #22
 8006894:	d857      	bhi.n	8006946 <_dtoa_r+0x246>
 8006896:	4b5b      	ldr	r3, [pc, #364]	; (8006a04 <_dtoa_r+0x304>)
 8006898:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800689c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068a0:	ec51 0b18 	vmov	r0, r1, d8
 80068a4:	f7fa f92a 	bl	8000afc <__aeabi_dcmplt>
 80068a8:	2800      	cmp	r0, #0
 80068aa:	d04e      	beq.n	800694a <_dtoa_r+0x24a>
 80068ac:	f10b 3bff 	add.w	fp, fp, #4294967295
 80068b0:	2300      	movs	r3, #0
 80068b2:	930c      	str	r3, [sp, #48]	; 0x30
 80068b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80068b6:	1b5b      	subs	r3, r3, r5
 80068b8:	1e5a      	subs	r2, r3, #1
 80068ba:	bf45      	ittet	mi
 80068bc:	f1c3 0301 	rsbmi	r3, r3, #1
 80068c0:	9305      	strmi	r3, [sp, #20]
 80068c2:	2300      	movpl	r3, #0
 80068c4:	2300      	movmi	r3, #0
 80068c6:	9206      	str	r2, [sp, #24]
 80068c8:	bf54      	ite	pl
 80068ca:	9305      	strpl	r3, [sp, #20]
 80068cc:	9306      	strmi	r3, [sp, #24]
 80068ce:	f1bb 0f00 	cmp.w	fp, #0
 80068d2:	db3c      	blt.n	800694e <_dtoa_r+0x24e>
 80068d4:	9b06      	ldr	r3, [sp, #24]
 80068d6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80068da:	445b      	add	r3, fp
 80068dc:	9306      	str	r3, [sp, #24]
 80068de:	2300      	movs	r3, #0
 80068e0:	9308      	str	r3, [sp, #32]
 80068e2:	9b07      	ldr	r3, [sp, #28]
 80068e4:	2b09      	cmp	r3, #9
 80068e6:	d868      	bhi.n	80069ba <_dtoa_r+0x2ba>
 80068e8:	2b05      	cmp	r3, #5
 80068ea:	bfc4      	itt	gt
 80068ec:	3b04      	subgt	r3, #4
 80068ee:	9307      	strgt	r3, [sp, #28]
 80068f0:	9b07      	ldr	r3, [sp, #28]
 80068f2:	f1a3 0302 	sub.w	r3, r3, #2
 80068f6:	bfcc      	ite	gt
 80068f8:	2500      	movgt	r5, #0
 80068fa:	2501      	movle	r5, #1
 80068fc:	2b03      	cmp	r3, #3
 80068fe:	f200 8085 	bhi.w	8006a0c <_dtoa_r+0x30c>
 8006902:	e8df f003 	tbb	[pc, r3]
 8006906:	3b2e      	.short	0x3b2e
 8006908:	5839      	.short	0x5839
 800690a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800690e:	441d      	add	r5, r3
 8006910:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006914:	2b20      	cmp	r3, #32
 8006916:	bfc1      	itttt	gt
 8006918:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800691c:	fa08 f803 	lslgt.w	r8, r8, r3
 8006920:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8006924:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006928:	bfd6      	itet	le
 800692a:	f1c3 0320 	rsble	r3, r3, #32
 800692e:	ea48 0003 	orrgt.w	r0, r8, r3
 8006932:	fa06 f003 	lslle.w	r0, r6, r3
 8006936:	f7f9 fdf5 	bl	8000524 <__aeabi_ui2d>
 800693a:	2201      	movs	r2, #1
 800693c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006940:	3d01      	subs	r5, #1
 8006942:	920e      	str	r2, [sp, #56]	; 0x38
 8006944:	e76f      	b.n	8006826 <_dtoa_r+0x126>
 8006946:	2301      	movs	r3, #1
 8006948:	e7b3      	b.n	80068b2 <_dtoa_r+0x1b2>
 800694a:	900c      	str	r0, [sp, #48]	; 0x30
 800694c:	e7b2      	b.n	80068b4 <_dtoa_r+0x1b4>
 800694e:	9b05      	ldr	r3, [sp, #20]
 8006950:	eba3 030b 	sub.w	r3, r3, fp
 8006954:	9305      	str	r3, [sp, #20]
 8006956:	f1cb 0300 	rsb	r3, fp, #0
 800695a:	9308      	str	r3, [sp, #32]
 800695c:	2300      	movs	r3, #0
 800695e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006960:	e7bf      	b.n	80068e2 <_dtoa_r+0x1e2>
 8006962:	2300      	movs	r3, #0
 8006964:	9309      	str	r3, [sp, #36]	; 0x24
 8006966:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006968:	2b00      	cmp	r3, #0
 800696a:	dc52      	bgt.n	8006a12 <_dtoa_r+0x312>
 800696c:	2301      	movs	r3, #1
 800696e:	9301      	str	r3, [sp, #4]
 8006970:	9304      	str	r3, [sp, #16]
 8006972:	461a      	mov	r2, r3
 8006974:	920a      	str	r2, [sp, #40]	; 0x28
 8006976:	e00b      	b.n	8006990 <_dtoa_r+0x290>
 8006978:	2301      	movs	r3, #1
 800697a:	e7f3      	b.n	8006964 <_dtoa_r+0x264>
 800697c:	2300      	movs	r3, #0
 800697e:	9309      	str	r3, [sp, #36]	; 0x24
 8006980:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006982:	445b      	add	r3, fp
 8006984:	9301      	str	r3, [sp, #4]
 8006986:	3301      	adds	r3, #1
 8006988:	2b01      	cmp	r3, #1
 800698a:	9304      	str	r3, [sp, #16]
 800698c:	bfb8      	it	lt
 800698e:	2301      	movlt	r3, #1
 8006990:	69e0      	ldr	r0, [r4, #28]
 8006992:	2100      	movs	r1, #0
 8006994:	2204      	movs	r2, #4
 8006996:	f102 0614 	add.w	r6, r2, #20
 800699a:	429e      	cmp	r6, r3
 800699c:	d93d      	bls.n	8006a1a <_dtoa_r+0x31a>
 800699e:	6041      	str	r1, [r0, #4]
 80069a0:	4620      	mov	r0, r4
 80069a2:	f000 fd9f 	bl	80074e4 <_Balloc>
 80069a6:	9000      	str	r0, [sp, #0]
 80069a8:	2800      	cmp	r0, #0
 80069aa:	d139      	bne.n	8006a20 <_dtoa_r+0x320>
 80069ac:	4b16      	ldr	r3, [pc, #88]	; (8006a08 <_dtoa_r+0x308>)
 80069ae:	4602      	mov	r2, r0
 80069b0:	f240 11af 	movw	r1, #431	; 0x1af
 80069b4:	e6bd      	b.n	8006732 <_dtoa_r+0x32>
 80069b6:	2301      	movs	r3, #1
 80069b8:	e7e1      	b.n	800697e <_dtoa_r+0x27e>
 80069ba:	2501      	movs	r5, #1
 80069bc:	2300      	movs	r3, #0
 80069be:	9307      	str	r3, [sp, #28]
 80069c0:	9509      	str	r5, [sp, #36]	; 0x24
 80069c2:	f04f 33ff 	mov.w	r3, #4294967295
 80069c6:	9301      	str	r3, [sp, #4]
 80069c8:	9304      	str	r3, [sp, #16]
 80069ca:	2200      	movs	r2, #0
 80069cc:	2312      	movs	r3, #18
 80069ce:	e7d1      	b.n	8006974 <_dtoa_r+0x274>
 80069d0:	636f4361 	.word	0x636f4361
 80069d4:	3fd287a7 	.word	0x3fd287a7
 80069d8:	8b60c8b3 	.word	0x8b60c8b3
 80069dc:	3fc68a28 	.word	0x3fc68a28
 80069e0:	509f79fb 	.word	0x509f79fb
 80069e4:	3fd34413 	.word	0x3fd34413
 80069e8:	08009ec3 	.word	0x08009ec3
 80069ec:	08009eda 	.word	0x08009eda
 80069f0:	7ff00000 	.word	0x7ff00000
 80069f4:	08009ebf 	.word	0x08009ebf
 80069f8:	08009eb6 	.word	0x08009eb6
 80069fc:	08009e8e 	.word	0x08009e8e
 8006a00:	3ff80000 	.word	0x3ff80000
 8006a04:	08009fc8 	.word	0x08009fc8
 8006a08:	08009f32 	.word	0x08009f32
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	9309      	str	r3, [sp, #36]	; 0x24
 8006a10:	e7d7      	b.n	80069c2 <_dtoa_r+0x2c2>
 8006a12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a14:	9301      	str	r3, [sp, #4]
 8006a16:	9304      	str	r3, [sp, #16]
 8006a18:	e7ba      	b.n	8006990 <_dtoa_r+0x290>
 8006a1a:	3101      	adds	r1, #1
 8006a1c:	0052      	lsls	r2, r2, #1
 8006a1e:	e7ba      	b.n	8006996 <_dtoa_r+0x296>
 8006a20:	69e3      	ldr	r3, [r4, #28]
 8006a22:	9a00      	ldr	r2, [sp, #0]
 8006a24:	601a      	str	r2, [r3, #0]
 8006a26:	9b04      	ldr	r3, [sp, #16]
 8006a28:	2b0e      	cmp	r3, #14
 8006a2a:	f200 80a8 	bhi.w	8006b7e <_dtoa_r+0x47e>
 8006a2e:	2d00      	cmp	r5, #0
 8006a30:	f000 80a5 	beq.w	8006b7e <_dtoa_r+0x47e>
 8006a34:	f1bb 0f00 	cmp.w	fp, #0
 8006a38:	dd38      	ble.n	8006aac <_dtoa_r+0x3ac>
 8006a3a:	4bc0      	ldr	r3, [pc, #768]	; (8006d3c <_dtoa_r+0x63c>)
 8006a3c:	f00b 020f 	and.w	r2, fp, #15
 8006a40:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006a44:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006a48:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006a4c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006a50:	d019      	beq.n	8006a86 <_dtoa_r+0x386>
 8006a52:	4bbb      	ldr	r3, [pc, #748]	; (8006d40 <_dtoa_r+0x640>)
 8006a54:	ec51 0b18 	vmov	r0, r1, d8
 8006a58:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006a5c:	f7f9 ff06 	bl	800086c <__aeabi_ddiv>
 8006a60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a64:	f008 080f 	and.w	r8, r8, #15
 8006a68:	2503      	movs	r5, #3
 8006a6a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006d40 <_dtoa_r+0x640>
 8006a6e:	f1b8 0f00 	cmp.w	r8, #0
 8006a72:	d10a      	bne.n	8006a8a <_dtoa_r+0x38a>
 8006a74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a78:	4632      	mov	r2, r6
 8006a7a:	463b      	mov	r3, r7
 8006a7c:	f7f9 fef6 	bl	800086c <__aeabi_ddiv>
 8006a80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a84:	e02b      	b.n	8006ade <_dtoa_r+0x3de>
 8006a86:	2502      	movs	r5, #2
 8006a88:	e7ef      	b.n	8006a6a <_dtoa_r+0x36a>
 8006a8a:	f018 0f01 	tst.w	r8, #1
 8006a8e:	d008      	beq.n	8006aa2 <_dtoa_r+0x3a2>
 8006a90:	4630      	mov	r0, r6
 8006a92:	4639      	mov	r1, r7
 8006a94:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006a98:	f7f9 fdbe 	bl	8000618 <__aeabi_dmul>
 8006a9c:	3501      	adds	r5, #1
 8006a9e:	4606      	mov	r6, r0
 8006aa0:	460f      	mov	r7, r1
 8006aa2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006aa6:	f109 0908 	add.w	r9, r9, #8
 8006aaa:	e7e0      	b.n	8006a6e <_dtoa_r+0x36e>
 8006aac:	f000 809f 	beq.w	8006bee <_dtoa_r+0x4ee>
 8006ab0:	f1cb 0600 	rsb	r6, fp, #0
 8006ab4:	4ba1      	ldr	r3, [pc, #644]	; (8006d3c <_dtoa_r+0x63c>)
 8006ab6:	4fa2      	ldr	r7, [pc, #648]	; (8006d40 <_dtoa_r+0x640>)
 8006ab8:	f006 020f 	and.w	r2, r6, #15
 8006abc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ac4:	ec51 0b18 	vmov	r0, r1, d8
 8006ac8:	f7f9 fda6 	bl	8000618 <__aeabi_dmul>
 8006acc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ad0:	1136      	asrs	r6, r6, #4
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	2502      	movs	r5, #2
 8006ad6:	2e00      	cmp	r6, #0
 8006ad8:	d17e      	bne.n	8006bd8 <_dtoa_r+0x4d8>
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d1d0      	bne.n	8006a80 <_dtoa_r+0x380>
 8006ade:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006ae0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	f000 8084 	beq.w	8006bf2 <_dtoa_r+0x4f2>
 8006aea:	4b96      	ldr	r3, [pc, #600]	; (8006d44 <_dtoa_r+0x644>)
 8006aec:	2200      	movs	r2, #0
 8006aee:	4640      	mov	r0, r8
 8006af0:	4649      	mov	r1, r9
 8006af2:	f7fa f803 	bl	8000afc <__aeabi_dcmplt>
 8006af6:	2800      	cmp	r0, #0
 8006af8:	d07b      	beq.n	8006bf2 <_dtoa_r+0x4f2>
 8006afa:	9b04      	ldr	r3, [sp, #16]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d078      	beq.n	8006bf2 <_dtoa_r+0x4f2>
 8006b00:	9b01      	ldr	r3, [sp, #4]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	dd39      	ble.n	8006b7a <_dtoa_r+0x47a>
 8006b06:	4b90      	ldr	r3, [pc, #576]	; (8006d48 <_dtoa_r+0x648>)
 8006b08:	2200      	movs	r2, #0
 8006b0a:	4640      	mov	r0, r8
 8006b0c:	4649      	mov	r1, r9
 8006b0e:	f7f9 fd83 	bl	8000618 <__aeabi_dmul>
 8006b12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b16:	9e01      	ldr	r6, [sp, #4]
 8006b18:	f10b 37ff 	add.w	r7, fp, #4294967295
 8006b1c:	3501      	adds	r5, #1
 8006b1e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006b22:	4628      	mov	r0, r5
 8006b24:	f7f9 fd0e 	bl	8000544 <__aeabi_i2d>
 8006b28:	4642      	mov	r2, r8
 8006b2a:	464b      	mov	r3, r9
 8006b2c:	f7f9 fd74 	bl	8000618 <__aeabi_dmul>
 8006b30:	4b86      	ldr	r3, [pc, #536]	; (8006d4c <_dtoa_r+0x64c>)
 8006b32:	2200      	movs	r2, #0
 8006b34:	f7f9 fbba 	bl	80002ac <__adddf3>
 8006b38:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006b3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b40:	9303      	str	r3, [sp, #12]
 8006b42:	2e00      	cmp	r6, #0
 8006b44:	d158      	bne.n	8006bf8 <_dtoa_r+0x4f8>
 8006b46:	4b82      	ldr	r3, [pc, #520]	; (8006d50 <_dtoa_r+0x650>)
 8006b48:	2200      	movs	r2, #0
 8006b4a:	4640      	mov	r0, r8
 8006b4c:	4649      	mov	r1, r9
 8006b4e:	f7f9 fbab 	bl	80002a8 <__aeabi_dsub>
 8006b52:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006b56:	4680      	mov	r8, r0
 8006b58:	4689      	mov	r9, r1
 8006b5a:	f7f9 ffed 	bl	8000b38 <__aeabi_dcmpgt>
 8006b5e:	2800      	cmp	r0, #0
 8006b60:	f040 8296 	bne.w	8007090 <_dtoa_r+0x990>
 8006b64:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006b68:	4640      	mov	r0, r8
 8006b6a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006b6e:	4649      	mov	r1, r9
 8006b70:	f7f9 ffc4 	bl	8000afc <__aeabi_dcmplt>
 8006b74:	2800      	cmp	r0, #0
 8006b76:	f040 8289 	bne.w	800708c <_dtoa_r+0x98c>
 8006b7a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006b7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	f2c0 814e 	blt.w	8006e22 <_dtoa_r+0x722>
 8006b86:	f1bb 0f0e 	cmp.w	fp, #14
 8006b8a:	f300 814a 	bgt.w	8006e22 <_dtoa_r+0x722>
 8006b8e:	4b6b      	ldr	r3, [pc, #428]	; (8006d3c <_dtoa_r+0x63c>)
 8006b90:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006b94:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006b98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	f280 80dc 	bge.w	8006d58 <_dtoa_r+0x658>
 8006ba0:	9b04      	ldr	r3, [sp, #16]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	f300 80d8 	bgt.w	8006d58 <_dtoa_r+0x658>
 8006ba8:	f040 826f 	bne.w	800708a <_dtoa_r+0x98a>
 8006bac:	4b68      	ldr	r3, [pc, #416]	; (8006d50 <_dtoa_r+0x650>)
 8006bae:	2200      	movs	r2, #0
 8006bb0:	4640      	mov	r0, r8
 8006bb2:	4649      	mov	r1, r9
 8006bb4:	f7f9 fd30 	bl	8000618 <__aeabi_dmul>
 8006bb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006bbc:	f7f9 ffb2 	bl	8000b24 <__aeabi_dcmpge>
 8006bc0:	9e04      	ldr	r6, [sp, #16]
 8006bc2:	4637      	mov	r7, r6
 8006bc4:	2800      	cmp	r0, #0
 8006bc6:	f040 8245 	bne.w	8007054 <_dtoa_r+0x954>
 8006bca:	9d00      	ldr	r5, [sp, #0]
 8006bcc:	2331      	movs	r3, #49	; 0x31
 8006bce:	f805 3b01 	strb.w	r3, [r5], #1
 8006bd2:	f10b 0b01 	add.w	fp, fp, #1
 8006bd6:	e241      	b.n	800705c <_dtoa_r+0x95c>
 8006bd8:	07f2      	lsls	r2, r6, #31
 8006bda:	d505      	bpl.n	8006be8 <_dtoa_r+0x4e8>
 8006bdc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006be0:	f7f9 fd1a 	bl	8000618 <__aeabi_dmul>
 8006be4:	3501      	adds	r5, #1
 8006be6:	2301      	movs	r3, #1
 8006be8:	1076      	asrs	r6, r6, #1
 8006bea:	3708      	adds	r7, #8
 8006bec:	e773      	b.n	8006ad6 <_dtoa_r+0x3d6>
 8006bee:	2502      	movs	r5, #2
 8006bf0:	e775      	b.n	8006ade <_dtoa_r+0x3de>
 8006bf2:	9e04      	ldr	r6, [sp, #16]
 8006bf4:	465f      	mov	r7, fp
 8006bf6:	e792      	b.n	8006b1e <_dtoa_r+0x41e>
 8006bf8:	9900      	ldr	r1, [sp, #0]
 8006bfa:	4b50      	ldr	r3, [pc, #320]	; (8006d3c <_dtoa_r+0x63c>)
 8006bfc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006c00:	4431      	add	r1, r6
 8006c02:	9102      	str	r1, [sp, #8]
 8006c04:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c06:	eeb0 9a47 	vmov.f32	s18, s14
 8006c0a:	eef0 9a67 	vmov.f32	s19, s15
 8006c0e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006c12:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006c16:	2900      	cmp	r1, #0
 8006c18:	d044      	beq.n	8006ca4 <_dtoa_r+0x5a4>
 8006c1a:	494e      	ldr	r1, [pc, #312]	; (8006d54 <_dtoa_r+0x654>)
 8006c1c:	2000      	movs	r0, #0
 8006c1e:	f7f9 fe25 	bl	800086c <__aeabi_ddiv>
 8006c22:	ec53 2b19 	vmov	r2, r3, d9
 8006c26:	f7f9 fb3f 	bl	80002a8 <__aeabi_dsub>
 8006c2a:	9d00      	ldr	r5, [sp, #0]
 8006c2c:	ec41 0b19 	vmov	d9, r0, r1
 8006c30:	4649      	mov	r1, r9
 8006c32:	4640      	mov	r0, r8
 8006c34:	f7f9 ffa0 	bl	8000b78 <__aeabi_d2iz>
 8006c38:	4606      	mov	r6, r0
 8006c3a:	f7f9 fc83 	bl	8000544 <__aeabi_i2d>
 8006c3e:	4602      	mov	r2, r0
 8006c40:	460b      	mov	r3, r1
 8006c42:	4640      	mov	r0, r8
 8006c44:	4649      	mov	r1, r9
 8006c46:	f7f9 fb2f 	bl	80002a8 <__aeabi_dsub>
 8006c4a:	3630      	adds	r6, #48	; 0x30
 8006c4c:	f805 6b01 	strb.w	r6, [r5], #1
 8006c50:	ec53 2b19 	vmov	r2, r3, d9
 8006c54:	4680      	mov	r8, r0
 8006c56:	4689      	mov	r9, r1
 8006c58:	f7f9 ff50 	bl	8000afc <__aeabi_dcmplt>
 8006c5c:	2800      	cmp	r0, #0
 8006c5e:	d164      	bne.n	8006d2a <_dtoa_r+0x62a>
 8006c60:	4642      	mov	r2, r8
 8006c62:	464b      	mov	r3, r9
 8006c64:	4937      	ldr	r1, [pc, #220]	; (8006d44 <_dtoa_r+0x644>)
 8006c66:	2000      	movs	r0, #0
 8006c68:	f7f9 fb1e 	bl	80002a8 <__aeabi_dsub>
 8006c6c:	ec53 2b19 	vmov	r2, r3, d9
 8006c70:	f7f9 ff44 	bl	8000afc <__aeabi_dcmplt>
 8006c74:	2800      	cmp	r0, #0
 8006c76:	f040 80b6 	bne.w	8006de6 <_dtoa_r+0x6e6>
 8006c7a:	9b02      	ldr	r3, [sp, #8]
 8006c7c:	429d      	cmp	r5, r3
 8006c7e:	f43f af7c 	beq.w	8006b7a <_dtoa_r+0x47a>
 8006c82:	4b31      	ldr	r3, [pc, #196]	; (8006d48 <_dtoa_r+0x648>)
 8006c84:	ec51 0b19 	vmov	r0, r1, d9
 8006c88:	2200      	movs	r2, #0
 8006c8a:	f7f9 fcc5 	bl	8000618 <__aeabi_dmul>
 8006c8e:	4b2e      	ldr	r3, [pc, #184]	; (8006d48 <_dtoa_r+0x648>)
 8006c90:	ec41 0b19 	vmov	d9, r0, r1
 8006c94:	2200      	movs	r2, #0
 8006c96:	4640      	mov	r0, r8
 8006c98:	4649      	mov	r1, r9
 8006c9a:	f7f9 fcbd 	bl	8000618 <__aeabi_dmul>
 8006c9e:	4680      	mov	r8, r0
 8006ca0:	4689      	mov	r9, r1
 8006ca2:	e7c5      	b.n	8006c30 <_dtoa_r+0x530>
 8006ca4:	ec51 0b17 	vmov	r0, r1, d7
 8006ca8:	f7f9 fcb6 	bl	8000618 <__aeabi_dmul>
 8006cac:	9b02      	ldr	r3, [sp, #8]
 8006cae:	9d00      	ldr	r5, [sp, #0]
 8006cb0:	930f      	str	r3, [sp, #60]	; 0x3c
 8006cb2:	ec41 0b19 	vmov	d9, r0, r1
 8006cb6:	4649      	mov	r1, r9
 8006cb8:	4640      	mov	r0, r8
 8006cba:	f7f9 ff5d 	bl	8000b78 <__aeabi_d2iz>
 8006cbe:	4606      	mov	r6, r0
 8006cc0:	f7f9 fc40 	bl	8000544 <__aeabi_i2d>
 8006cc4:	3630      	adds	r6, #48	; 0x30
 8006cc6:	4602      	mov	r2, r0
 8006cc8:	460b      	mov	r3, r1
 8006cca:	4640      	mov	r0, r8
 8006ccc:	4649      	mov	r1, r9
 8006cce:	f7f9 faeb 	bl	80002a8 <__aeabi_dsub>
 8006cd2:	f805 6b01 	strb.w	r6, [r5], #1
 8006cd6:	9b02      	ldr	r3, [sp, #8]
 8006cd8:	429d      	cmp	r5, r3
 8006cda:	4680      	mov	r8, r0
 8006cdc:	4689      	mov	r9, r1
 8006cde:	f04f 0200 	mov.w	r2, #0
 8006ce2:	d124      	bne.n	8006d2e <_dtoa_r+0x62e>
 8006ce4:	4b1b      	ldr	r3, [pc, #108]	; (8006d54 <_dtoa_r+0x654>)
 8006ce6:	ec51 0b19 	vmov	r0, r1, d9
 8006cea:	f7f9 fadf 	bl	80002ac <__adddf3>
 8006cee:	4602      	mov	r2, r0
 8006cf0:	460b      	mov	r3, r1
 8006cf2:	4640      	mov	r0, r8
 8006cf4:	4649      	mov	r1, r9
 8006cf6:	f7f9 ff1f 	bl	8000b38 <__aeabi_dcmpgt>
 8006cfa:	2800      	cmp	r0, #0
 8006cfc:	d173      	bne.n	8006de6 <_dtoa_r+0x6e6>
 8006cfe:	ec53 2b19 	vmov	r2, r3, d9
 8006d02:	4914      	ldr	r1, [pc, #80]	; (8006d54 <_dtoa_r+0x654>)
 8006d04:	2000      	movs	r0, #0
 8006d06:	f7f9 facf 	bl	80002a8 <__aeabi_dsub>
 8006d0a:	4602      	mov	r2, r0
 8006d0c:	460b      	mov	r3, r1
 8006d0e:	4640      	mov	r0, r8
 8006d10:	4649      	mov	r1, r9
 8006d12:	f7f9 fef3 	bl	8000afc <__aeabi_dcmplt>
 8006d16:	2800      	cmp	r0, #0
 8006d18:	f43f af2f 	beq.w	8006b7a <_dtoa_r+0x47a>
 8006d1c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006d1e:	1e6b      	subs	r3, r5, #1
 8006d20:	930f      	str	r3, [sp, #60]	; 0x3c
 8006d22:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006d26:	2b30      	cmp	r3, #48	; 0x30
 8006d28:	d0f8      	beq.n	8006d1c <_dtoa_r+0x61c>
 8006d2a:	46bb      	mov	fp, r7
 8006d2c:	e04a      	b.n	8006dc4 <_dtoa_r+0x6c4>
 8006d2e:	4b06      	ldr	r3, [pc, #24]	; (8006d48 <_dtoa_r+0x648>)
 8006d30:	f7f9 fc72 	bl	8000618 <__aeabi_dmul>
 8006d34:	4680      	mov	r8, r0
 8006d36:	4689      	mov	r9, r1
 8006d38:	e7bd      	b.n	8006cb6 <_dtoa_r+0x5b6>
 8006d3a:	bf00      	nop
 8006d3c:	08009fc8 	.word	0x08009fc8
 8006d40:	08009fa0 	.word	0x08009fa0
 8006d44:	3ff00000 	.word	0x3ff00000
 8006d48:	40240000 	.word	0x40240000
 8006d4c:	401c0000 	.word	0x401c0000
 8006d50:	40140000 	.word	0x40140000
 8006d54:	3fe00000 	.word	0x3fe00000
 8006d58:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006d5c:	9d00      	ldr	r5, [sp, #0]
 8006d5e:	4642      	mov	r2, r8
 8006d60:	464b      	mov	r3, r9
 8006d62:	4630      	mov	r0, r6
 8006d64:	4639      	mov	r1, r7
 8006d66:	f7f9 fd81 	bl	800086c <__aeabi_ddiv>
 8006d6a:	f7f9 ff05 	bl	8000b78 <__aeabi_d2iz>
 8006d6e:	9001      	str	r0, [sp, #4]
 8006d70:	f7f9 fbe8 	bl	8000544 <__aeabi_i2d>
 8006d74:	4642      	mov	r2, r8
 8006d76:	464b      	mov	r3, r9
 8006d78:	f7f9 fc4e 	bl	8000618 <__aeabi_dmul>
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	460b      	mov	r3, r1
 8006d80:	4630      	mov	r0, r6
 8006d82:	4639      	mov	r1, r7
 8006d84:	f7f9 fa90 	bl	80002a8 <__aeabi_dsub>
 8006d88:	9e01      	ldr	r6, [sp, #4]
 8006d8a:	9f04      	ldr	r7, [sp, #16]
 8006d8c:	3630      	adds	r6, #48	; 0x30
 8006d8e:	f805 6b01 	strb.w	r6, [r5], #1
 8006d92:	9e00      	ldr	r6, [sp, #0]
 8006d94:	1bae      	subs	r6, r5, r6
 8006d96:	42b7      	cmp	r7, r6
 8006d98:	4602      	mov	r2, r0
 8006d9a:	460b      	mov	r3, r1
 8006d9c:	d134      	bne.n	8006e08 <_dtoa_r+0x708>
 8006d9e:	f7f9 fa85 	bl	80002ac <__adddf3>
 8006da2:	4642      	mov	r2, r8
 8006da4:	464b      	mov	r3, r9
 8006da6:	4606      	mov	r6, r0
 8006da8:	460f      	mov	r7, r1
 8006daa:	f7f9 fec5 	bl	8000b38 <__aeabi_dcmpgt>
 8006dae:	b9c8      	cbnz	r0, 8006de4 <_dtoa_r+0x6e4>
 8006db0:	4642      	mov	r2, r8
 8006db2:	464b      	mov	r3, r9
 8006db4:	4630      	mov	r0, r6
 8006db6:	4639      	mov	r1, r7
 8006db8:	f7f9 fe96 	bl	8000ae8 <__aeabi_dcmpeq>
 8006dbc:	b110      	cbz	r0, 8006dc4 <_dtoa_r+0x6c4>
 8006dbe:	9b01      	ldr	r3, [sp, #4]
 8006dc0:	07db      	lsls	r3, r3, #31
 8006dc2:	d40f      	bmi.n	8006de4 <_dtoa_r+0x6e4>
 8006dc4:	4651      	mov	r1, sl
 8006dc6:	4620      	mov	r0, r4
 8006dc8:	f000 fbcc 	bl	8007564 <_Bfree>
 8006dcc:	2300      	movs	r3, #0
 8006dce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006dd0:	702b      	strb	r3, [r5, #0]
 8006dd2:	f10b 0301 	add.w	r3, fp, #1
 8006dd6:	6013      	str	r3, [r2, #0]
 8006dd8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	f43f ace2 	beq.w	80067a4 <_dtoa_r+0xa4>
 8006de0:	601d      	str	r5, [r3, #0]
 8006de2:	e4df      	b.n	80067a4 <_dtoa_r+0xa4>
 8006de4:	465f      	mov	r7, fp
 8006de6:	462b      	mov	r3, r5
 8006de8:	461d      	mov	r5, r3
 8006dea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006dee:	2a39      	cmp	r2, #57	; 0x39
 8006df0:	d106      	bne.n	8006e00 <_dtoa_r+0x700>
 8006df2:	9a00      	ldr	r2, [sp, #0]
 8006df4:	429a      	cmp	r2, r3
 8006df6:	d1f7      	bne.n	8006de8 <_dtoa_r+0x6e8>
 8006df8:	9900      	ldr	r1, [sp, #0]
 8006dfa:	2230      	movs	r2, #48	; 0x30
 8006dfc:	3701      	adds	r7, #1
 8006dfe:	700a      	strb	r2, [r1, #0]
 8006e00:	781a      	ldrb	r2, [r3, #0]
 8006e02:	3201      	adds	r2, #1
 8006e04:	701a      	strb	r2, [r3, #0]
 8006e06:	e790      	b.n	8006d2a <_dtoa_r+0x62a>
 8006e08:	4ba3      	ldr	r3, [pc, #652]	; (8007098 <_dtoa_r+0x998>)
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	f7f9 fc04 	bl	8000618 <__aeabi_dmul>
 8006e10:	2200      	movs	r2, #0
 8006e12:	2300      	movs	r3, #0
 8006e14:	4606      	mov	r6, r0
 8006e16:	460f      	mov	r7, r1
 8006e18:	f7f9 fe66 	bl	8000ae8 <__aeabi_dcmpeq>
 8006e1c:	2800      	cmp	r0, #0
 8006e1e:	d09e      	beq.n	8006d5e <_dtoa_r+0x65e>
 8006e20:	e7d0      	b.n	8006dc4 <_dtoa_r+0x6c4>
 8006e22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e24:	2a00      	cmp	r2, #0
 8006e26:	f000 80ca 	beq.w	8006fbe <_dtoa_r+0x8be>
 8006e2a:	9a07      	ldr	r2, [sp, #28]
 8006e2c:	2a01      	cmp	r2, #1
 8006e2e:	f300 80ad 	bgt.w	8006f8c <_dtoa_r+0x88c>
 8006e32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006e34:	2a00      	cmp	r2, #0
 8006e36:	f000 80a5 	beq.w	8006f84 <_dtoa_r+0x884>
 8006e3a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006e3e:	9e08      	ldr	r6, [sp, #32]
 8006e40:	9d05      	ldr	r5, [sp, #20]
 8006e42:	9a05      	ldr	r2, [sp, #20]
 8006e44:	441a      	add	r2, r3
 8006e46:	9205      	str	r2, [sp, #20]
 8006e48:	9a06      	ldr	r2, [sp, #24]
 8006e4a:	2101      	movs	r1, #1
 8006e4c:	441a      	add	r2, r3
 8006e4e:	4620      	mov	r0, r4
 8006e50:	9206      	str	r2, [sp, #24]
 8006e52:	f000 fc87 	bl	8007764 <__i2b>
 8006e56:	4607      	mov	r7, r0
 8006e58:	b165      	cbz	r5, 8006e74 <_dtoa_r+0x774>
 8006e5a:	9b06      	ldr	r3, [sp, #24]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	dd09      	ble.n	8006e74 <_dtoa_r+0x774>
 8006e60:	42ab      	cmp	r3, r5
 8006e62:	9a05      	ldr	r2, [sp, #20]
 8006e64:	bfa8      	it	ge
 8006e66:	462b      	movge	r3, r5
 8006e68:	1ad2      	subs	r2, r2, r3
 8006e6a:	9205      	str	r2, [sp, #20]
 8006e6c:	9a06      	ldr	r2, [sp, #24]
 8006e6e:	1aed      	subs	r5, r5, r3
 8006e70:	1ad3      	subs	r3, r2, r3
 8006e72:	9306      	str	r3, [sp, #24]
 8006e74:	9b08      	ldr	r3, [sp, #32]
 8006e76:	b1f3      	cbz	r3, 8006eb6 <_dtoa_r+0x7b6>
 8006e78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	f000 80a3 	beq.w	8006fc6 <_dtoa_r+0x8c6>
 8006e80:	2e00      	cmp	r6, #0
 8006e82:	dd10      	ble.n	8006ea6 <_dtoa_r+0x7a6>
 8006e84:	4639      	mov	r1, r7
 8006e86:	4632      	mov	r2, r6
 8006e88:	4620      	mov	r0, r4
 8006e8a:	f000 fd2b 	bl	80078e4 <__pow5mult>
 8006e8e:	4652      	mov	r2, sl
 8006e90:	4601      	mov	r1, r0
 8006e92:	4607      	mov	r7, r0
 8006e94:	4620      	mov	r0, r4
 8006e96:	f000 fc7b 	bl	8007790 <__multiply>
 8006e9a:	4651      	mov	r1, sl
 8006e9c:	4680      	mov	r8, r0
 8006e9e:	4620      	mov	r0, r4
 8006ea0:	f000 fb60 	bl	8007564 <_Bfree>
 8006ea4:	46c2      	mov	sl, r8
 8006ea6:	9b08      	ldr	r3, [sp, #32]
 8006ea8:	1b9a      	subs	r2, r3, r6
 8006eaa:	d004      	beq.n	8006eb6 <_dtoa_r+0x7b6>
 8006eac:	4651      	mov	r1, sl
 8006eae:	4620      	mov	r0, r4
 8006eb0:	f000 fd18 	bl	80078e4 <__pow5mult>
 8006eb4:	4682      	mov	sl, r0
 8006eb6:	2101      	movs	r1, #1
 8006eb8:	4620      	mov	r0, r4
 8006eba:	f000 fc53 	bl	8007764 <__i2b>
 8006ebe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	4606      	mov	r6, r0
 8006ec4:	f340 8081 	ble.w	8006fca <_dtoa_r+0x8ca>
 8006ec8:	461a      	mov	r2, r3
 8006eca:	4601      	mov	r1, r0
 8006ecc:	4620      	mov	r0, r4
 8006ece:	f000 fd09 	bl	80078e4 <__pow5mult>
 8006ed2:	9b07      	ldr	r3, [sp, #28]
 8006ed4:	2b01      	cmp	r3, #1
 8006ed6:	4606      	mov	r6, r0
 8006ed8:	dd7a      	ble.n	8006fd0 <_dtoa_r+0x8d0>
 8006eda:	f04f 0800 	mov.w	r8, #0
 8006ede:	6933      	ldr	r3, [r6, #16]
 8006ee0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006ee4:	6918      	ldr	r0, [r3, #16]
 8006ee6:	f000 fbef 	bl	80076c8 <__hi0bits>
 8006eea:	f1c0 0020 	rsb	r0, r0, #32
 8006eee:	9b06      	ldr	r3, [sp, #24]
 8006ef0:	4418      	add	r0, r3
 8006ef2:	f010 001f 	ands.w	r0, r0, #31
 8006ef6:	f000 8094 	beq.w	8007022 <_dtoa_r+0x922>
 8006efa:	f1c0 0320 	rsb	r3, r0, #32
 8006efe:	2b04      	cmp	r3, #4
 8006f00:	f340 8085 	ble.w	800700e <_dtoa_r+0x90e>
 8006f04:	9b05      	ldr	r3, [sp, #20]
 8006f06:	f1c0 001c 	rsb	r0, r0, #28
 8006f0a:	4403      	add	r3, r0
 8006f0c:	9305      	str	r3, [sp, #20]
 8006f0e:	9b06      	ldr	r3, [sp, #24]
 8006f10:	4403      	add	r3, r0
 8006f12:	4405      	add	r5, r0
 8006f14:	9306      	str	r3, [sp, #24]
 8006f16:	9b05      	ldr	r3, [sp, #20]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	dd05      	ble.n	8006f28 <_dtoa_r+0x828>
 8006f1c:	4651      	mov	r1, sl
 8006f1e:	461a      	mov	r2, r3
 8006f20:	4620      	mov	r0, r4
 8006f22:	f000 fd39 	bl	8007998 <__lshift>
 8006f26:	4682      	mov	sl, r0
 8006f28:	9b06      	ldr	r3, [sp, #24]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	dd05      	ble.n	8006f3a <_dtoa_r+0x83a>
 8006f2e:	4631      	mov	r1, r6
 8006f30:	461a      	mov	r2, r3
 8006f32:	4620      	mov	r0, r4
 8006f34:	f000 fd30 	bl	8007998 <__lshift>
 8006f38:	4606      	mov	r6, r0
 8006f3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d072      	beq.n	8007026 <_dtoa_r+0x926>
 8006f40:	4631      	mov	r1, r6
 8006f42:	4650      	mov	r0, sl
 8006f44:	f000 fd94 	bl	8007a70 <__mcmp>
 8006f48:	2800      	cmp	r0, #0
 8006f4a:	da6c      	bge.n	8007026 <_dtoa_r+0x926>
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	4651      	mov	r1, sl
 8006f50:	220a      	movs	r2, #10
 8006f52:	4620      	mov	r0, r4
 8006f54:	f000 fb28 	bl	80075a8 <__multadd>
 8006f58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f5a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006f5e:	4682      	mov	sl, r0
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	f000 81b0 	beq.w	80072c6 <_dtoa_r+0xbc6>
 8006f66:	2300      	movs	r3, #0
 8006f68:	4639      	mov	r1, r7
 8006f6a:	220a      	movs	r2, #10
 8006f6c:	4620      	mov	r0, r4
 8006f6e:	f000 fb1b 	bl	80075a8 <__multadd>
 8006f72:	9b01      	ldr	r3, [sp, #4]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	4607      	mov	r7, r0
 8006f78:	f300 8096 	bgt.w	80070a8 <_dtoa_r+0x9a8>
 8006f7c:	9b07      	ldr	r3, [sp, #28]
 8006f7e:	2b02      	cmp	r3, #2
 8006f80:	dc59      	bgt.n	8007036 <_dtoa_r+0x936>
 8006f82:	e091      	b.n	80070a8 <_dtoa_r+0x9a8>
 8006f84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006f86:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006f8a:	e758      	b.n	8006e3e <_dtoa_r+0x73e>
 8006f8c:	9b04      	ldr	r3, [sp, #16]
 8006f8e:	1e5e      	subs	r6, r3, #1
 8006f90:	9b08      	ldr	r3, [sp, #32]
 8006f92:	42b3      	cmp	r3, r6
 8006f94:	bfbf      	itttt	lt
 8006f96:	9b08      	ldrlt	r3, [sp, #32]
 8006f98:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8006f9a:	9608      	strlt	r6, [sp, #32]
 8006f9c:	1af3      	sublt	r3, r6, r3
 8006f9e:	bfb4      	ite	lt
 8006fa0:	18d2      	addlt	r2, r2, r3
 8006fa2:	1b9e      	subge	r6, r3, r6
 8006fa4:	9b04      	ldr	r3, [sp, #16]
 8006fa6:	bfbc      	itt	lt
 8006fa8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8006faa:	2600      	movlt	r6, #0
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	bfb7      	itett	lt
 8006fb0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8006fb4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006fb8:	1a9d      	sublt	r5, r3, r2
 8006fba:	2300      	movlt	r3, #0
 8006fbc:	e741      	b.n	8006e42 <_dtoa_r+0x742>
 8006fbe:	9e08      	ldr	r6, [sp, #32]
 8006fc0:	9d05      	ldr	r5, [sp, #20]
 8006fc2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006fc4:	e748      	b.n	8006e58 <_dtoa_r+0x758>
 8006fc6:	9a08      	ldr	r2, [sp, #32]
 8006fc8:	e770      	b.n	8006eac <_dtoa_r+0x7ac>
 8006fca:	9b07      	ldr	r3, [sp, #28]
 8006fcc:	2b01      	cmp	r3, #1
 8006fce:	dc19      	bgt.n	8007004 <_dtoa_r+0x904>
 8006fd0:	9b02      	ldr	r3, [sp, #8]
 8006fd2:	b9bb      	cbnz	r3, 8007004 <_dtoa_r+0x904>
 8006fd4:	9b03      	ldr	r3, [sp, #12]
 8006fd6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006fda:	b99b      	cbnz	r3, 8007004 <_dtoa_r+0x904>
 8006fdc:	9b03      	ldr	r3, [sp, #12]
 8006fde:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006fe2:	0d1b      	lsrs	r3, r3, #20
 8006fe4:	051b      	lsls	r3, r3, #20
 8006fe6:	b183      	cbz	r3, 800700a <_dtoa_r+0x90a>
 8006fe8:	9b05      	ldr	r3, [sp, #20]
 8006fea:	3301      	adds	r3, #1
 8006fec:	9305      	str	r3, [sp, #20]
 8006fee:	9b06      	ldr	r3, [sp, #24]
 8006ff0:	3301      	adds	r3, #1
 8006ff2:	9306      	str	r3, [sp, #24]
 8006ff4:	f04f 0801 	mov.w	r8, #1
 8006ff8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	f47f af6f 	bne.w	8006ede <_dtoa_r+0x7de>
 8007000:	2001      	movs	r0, #1
 8007002:	e774      	b.n	8006eee <_dtoa_r+0x7ee>
 8007004:	f04f 0800 	mov.w	r8, #0
 8007008:	e7f6      	b.n	8006ff8 <_dtoa_r+0x8f8>
 800700a:	4698      	mov	r8, r3
 800700c:	e7f4      	b.n	8006ff8 <_dtoa_r+0x8f8>
 800700e:	d082      	beq.n	8006f16 <_dtoa_r+0x816>
 8007010:	9a05      	ldr	r2, [sp, #20]
 8007012:	331c      	adds	r3, #28
 8007014:	441a      	add	r2, r3
 8007016:	9205      	str	r2, [sp, #20]
 8007018:	9a06      	ldr	r2, [sp, #24]
 800701a:	441a      	add	r2, r3
 800701c:	441d      	add	r5, r3
 800701e:	9206      	str	r2, [sp, #24]
 8007020:	e779      	b.n	8006f16 <_dtoa_r+0x816>
 8007022:	4603      	mov	r3, r0
 8007024:	e7f4      	b.n	8007010 <_dtoa_r+0x910>
 8007026:	9b04      	ldr	r3, [sp, #16]
 8007028:	2b00      	cmp	r3, #0
 800702a:	dc37      	bgt.n	800709c <_dtoa_r+0x99c>
 800702c:	9b07      	ldr	r3, [sp, #28]
 800702e:	2b02      	cmp	r3, #2
 8007030:	dd34      	ble.n	800709c <_dtoa_r+0x99c>
 8007032:	9b04      	ldr	r3, [sp, #16]
 8007034:	9301      	str	r3, [sp, #4]
 8007036:	9b01      	ldr	r3, [sp, #4]
 8007038:	b963      	cbnz	r3, 8007054 <_dtoa_r+0x954>
 800703a:	4631      	mov	r1, r6
 800703c:	2205      	movs	r2, #5
 800703e:	4620      	mov	r0, r4
 8007040:	f000 fab2 	bl	80075a8 <__multadd>
 8007044:	4601      	mov	r1, r0
 8007046:	4606      	mov	r6, r0
 8007048:	4650      	mov	r0, sl
 800704a:	f000 fd11 	bl	8007a70 <__mcmp>
 800704e:	2800      	cmp	r0, #0
 8007050:	f73f adbb 	bgt.w	8006bca <_dtoa_r+0x4ca>
 8007054:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007056:	9d00      	ldr	r5, [sp, #0]
 8007058:	ea6f 0b03 	mvn.w	fp, r3
 800705c:	f04f 0800 	mov.w	r8, #0
 8007060:	4631      	mov	r1, r6
 8007062:	4620      	mov	r0, r4
 8007064:	f000 fa7e 	bl	8007564 <_Bfree>
 8007068:	2f00      	cmp	r7, #0
 800706a:	f43f aeab 	beq.w	8006dc4 <_dtoa_r+0x6c4>
 800706e:	f1b8 0f00 	cmp.w	r8, #0
 8007072:	d005      	beq.n	8007080 <_dtoa_r+0x980>
 8007074:	45b8      	cmp	r8, r7
 8007076:	d003      	beq.n	8007080 <_dtoa_r+0x980>
 8007078:	4641      	mov	r1, r8
 800707a:	4620      	mov	r0, r4
 800707c:	f000 fa72 	bl	8007564 <_Bfree>
 8007080:	4639      	mov	r1, r7
 8007082:	4620      	mov	r0, r4
 8007084:	f000 fa6e 	bl	8007564 <_Bfree>
 8007088:	e69c      	b.n	8006dc4 <_dtoa_r+0x6c4>
 800708a:	2600      	movs	r6, #0
 800708c:	4637      	mov	r7, r6
 800708e:	e7e1      	b.n	8007054 <_dtoa_r+0x954>
 8007090:	46bb      	mov	fp, r7
 8007092:	4637      	mov	r7, r6
 8007094:	e599      	b.n	8006bca <_dtoa_r+0x4ca>
 8007096:	bf00      	nop
 8007098:	40240000 	.word	0x40240000
 800709c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800709e:	2b00      	cmp	r3, #0
 80070a0:	f000 80c8 	beq.w	8007234 <_dtoa_r+0xb34>
 80070a4:	9b04      	ldr	r3, [sp, #16]
 80070a6:	9301      	str	r3, [sp, #4]
 80070a8:	2d00      	cmp	r5, #0
 80070aa:	dd05      	ble.n	80070b8 <_dtoa_r+0x9b8>
 80070ac:	4639      	mov	r1, r7
 80070ae:	462a      	mov	r2, r5
 80070b0:	4620      	mov	r0, r4
 80070b2:	f000 fc71 	bl	8007998 <__lshift>
 80070b6:	4607      	mov	r7, r0
 80070b8:	f1b8 0f00 	cmp.w	r8, #0
 80070bc:	d05b      	beq.n	8007176 <_dtoa_r+0xa76>
 80070be:	6879      	ldr	r1, [r7, #4]
 80070c0:	4620      	mov	r0, r4
 80070c2:	f000 fa0f 	bl	80074e4 <_Balloc>
 80070c6:	4605      	mov	r5, r0
 80070c8:	b928      	cbnz	r0, 80070d6 <_dtoa_r+0x9d6>
 80070ca:	4b83      	ldr	r3, [pc, #524]	; (80072d8 <_dtoa_r+0xbd8>)
 80070cc:	4602      	mov	r2, r0
 80070ce:	f240 21ef 	movw	r1, #751	; 0x2ef
 80070d2:	f7ff bb2e 	b.w	8006732 <_dtoa_r+0x32>
 80070d6:	693a      	ldr	r2, [r7, #16]
 80070d8:	3202      	adds	r2, #2
 80070da:	0092      	lsls	r2, r2, #2
 80070dc:	f107 010c 	add.w	r1, r7, #12
 80070e0:	300c      	adds	r0, #12
 80070e2:	f001 ff01 	bl	8008ee8 <memcpy>
 80070e6:	2201      	movs	r2, #1
 80070e8:	4629      	mov	r1, r5
 80070ea:	4620      	mov	r0, r4
 80070ec:	f000 fc54 	bl	8007998 <__lshift>
 80070f0:	9b00      	ldr	r3, [sp, #0]
 80070f2:	3301      	adds	r3, #1
 80070f4:	9304      	str	r3, [sp, #16]
 80070f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80070fa:	4413      	add	r3, r2
 80070fc:	9308      	str	r3, [sp, #32]
 80070fe:	9b02      	ldr	r3, [sp, #8]
 8007100:	f003 0301 	and.w	r3, r3, #1
 8007104:	46b8      	mov	r8, r7
 8007106:	9306      	str	r3, [sp, #24]
 8007108:	4607      	mov	r7, r0
 800710a:	9b04      	ldr	r3, [sp, #16]
 800710c:	4631      	mov	r1, r6
 800710e:	3b01      	subs	r3, #1
 8007110:	4650      	mov	r0, sl
 8007112:	9301      	str	r3, [sp, #4]
 8007114:	f7ff fa6a 	bl	80065ec <quorem>
 8007118:	4641      	mov	r1, r8
 800711a:	9002      	str	r0, [sp, #8]
 800711c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007120:	4650      	mov	r0, sl
 8007122:	f000 fca5 	bl	8007a70 <__mcmp>
 8007126:	463a      	mov	r2, r7
 8007128:	9005      	str	r0, [sp, #20]
 800712a:	4631      	mov	r1, r6
 800712c:	4620      	mov	r0, r4
 800712e:	f000 fcbb 	bl	8007aa8 <__mdiff>
 8007132:	68c2      	ldr	r2, [r0, #12]
 8007134:	4605      	mov	r5, r0
 8007136:	bb02      	cbnz	r2, 800717a <_dtoa_r+0xa7a>
 8007138:	4601      	mov	r1, r0
 800713a:	4650      	mov	r0, sl
 800713c:	f000 fc98 	bl	8007a70 <__mcmp>
 8007140:	4602      	mov	r2, r0
 8007142:	4629      	mov	r1, r5
 8007144:	4620      	mov	r0, r4
 8007146:	9209      	str	r2, [sp, #36]	; 0x24
 8007148:	f000 fa0c 	bl	8007564 <_Bfree>
 800714c:	9b07      	ldr	r3, [sp, #28]
 800714e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007150:	9d04      	ldr	r5, [sp, #16]
 8007152:	ea43 0102 	orr.w	r1, r3, r2
 8007156:	9b06      	ldr	r3, [sp, #24]
 8007158:	4319      	orrs	r1, r3
 800715a:	d110      	bne.n	800717e <_dtoa_r+0xa7e>
 800715c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007160:	d029      	beq.n	80071b6 <_dtoa_r+0xab6>
 8007162:	9b05      	ldr	r3, [sp, #20]
 8007164:	2b00      	cmp	r3, #0
 8007166:	dd02      	ble.n	800716e <_dtoa_r+0xa6e>
 8007168:	9b02      	ldr	r3, [sp, #8]
 800716a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800716e:	9b01      	ldr	r3, [sp, #4]
 8007170:	f883 9000 	strb.w	r9, [r3]
 8007174:	e774      	b.n	8007060 <_dtoa_r+0x960>
 8007176:	4638      	mov	r0, r7
 8007178:	e7ba      	b.n	80070f0 <_dtoa_r+0x9f0>
 800717a:	2201      	movs	r2, #1
 800717c:	e7e1      	b.n	8007142 <_dtoa_r+0xa42>
 800717e:	9b05      	ldr	r3, [sp, #20]
 8007180:	2b00      	cmp	r3, #0
 8007182:	db04      	blt.n	800718e <_dtoa_r+0xa8e>
 8007184:	9907      	ldr	r1, [sp, #28]
 8007186:	430b      	orrs	r3, r1
 8007188:	9906      	ldr	r1, [sp, #24]
 800718a:	430b      	orrs	r3, r1
 800718c:	d120      	bne.n	80071d0 <_dtoa_r+0xad0>
 800718e:	2a00      	cmp	r2, #0
 8007190:	dded      	ble.n	800716e <_dtoa_r+0xa6e>
 8007192:	4651      	mov	r1, sl
 8007194:	2201      	movs	r2, #1
 8007196:	4620      	mov	r0, r4
 8007198:	f000 fbfe 	bl	8007998 <__lshift>
 800719c:	4631      	mov	r1, r6
 800719e:	4682      	mov	sl, r0
 80071a0:	f000 fc66 	bl	8007a70 <__mcmp>
 80071a4:	2800      	cmp	r0, #0
 80071a6:	dc03      	bgt.n	80071b0 <_dtoa_r+0xab0>
 80071a8:	d1e1      	bne.n	800716e <_dtoa_r+0xa6e>
 80071aa:	f019 0f01 	tst.w	r9, #1
 80071ae:	d0de      	beq.n	800716e <_dtoa_r+0xa6e>
 80071b0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80071b4:	d1d8      	bne.n	8007168 <_dtoa_r+0xa68>
 80071b6:	9a01      	ldr	r2, [sp, #4]
 80071b8:	2339      	movs	r3, #57	; 0x39
 80071ba:	7013      	strb	r3, [r2, #0]
 80071bc:	462b      	mov	r3, r5
 80071be:	461d      	mov	r5, r3
 80071c0:	3b01      	subs	r3, #1
 80071c2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80071c6:	2a39      	cmp	r2, #57	; 0x39
 80071c8:	d06c      	beq.n	80072a4 <_dtoa_r+0xba4>
 80071ca:	3201      	adds	r2, #1
 80071cc:	701a      	strb	r2, [r3, #0]
 80071ce:	e747      	b.n	8007060 <_dtoa_r+0x960>
 80071d0:	2a00      	cmp	r2, #0
 80071d2:	dd07      	ble.n	80071e4 <_dtoa_r+0xae4>
 80071d4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80071d8:	d0ed      	beq.n	80071b6 <_dtoa_r+0xab6>
 80071da:	9a01      	ldr	r2, [sp, #4]
 80071dc:	f109 0301 	add.w	r3, r9, #1
 80071e0:	7013      	strb	r3, [r2, #0]
 80071e2:	e73d      	b.n	8007060 <_dtoa_r+0x960>
 80071e4:	9b04      	ldr	r3, [sp, #16]
 80071e6:	9a08      	ldr	r2, [sp, #32]
 80071e8:	f803 9c01 	strb.w	r9, [r3, #-1]
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d043      	beq.n	8007278 <_dtoa_r+0xb78>
 80071f0:	4651      	mov	r1, sl
 80071f2:	2300      	movs	r3, #0
 80071f4:	220a      	movs	r2, #10
 80071f6:	4620      	mov	r0, r4
 80071f8:	f000 f9d6 	bl	80075a8 <__multadd>
 80071fc:	45b8      	cmp	r8, r7
 80071fe:	4682      	mov	sl, r0
 8007200:	f04f 0300 	mov.w	r3, #0
 8007204:	f04f 020a 	mov.w	r2, #10
 8007208:	4641      	mov	r1, r8
 800720a:	4620      	mov	r0, r4
 800720c:	d107      	bne.n	800721e <_dtoa_r+0xb1e>
 800720e:	f000 f9cb 	bl	80075a8 <__multadd>
 8007212:	4680      	mov	r8, r0
 8007214:	4607      	mov	r7, r0
 8007216:	9b04      	ldr	r3, [sp, #16]
 8007218:	3301      	adds	r3, #1
 800721a:	9304      	str	r3, [sp, #16]
 800721c:	e775      	b.n	800710a <_dtoa_r+0xa0a>
 800721e:	f000 f9c3 	bl	80075a8 <__multadd>
 8007222:	4639      	mov	r1, r7
 8007224:	4680      	mov	r8, r0
 8007226:	2300      	movs	r3, #0
 8007228:	220a      	movs	r2, #10
 800722a:	4620      	mov	r0, r4
 800722c:	f000 f9bc 	bl	80075a8 <__multadd>
 8007230:	4607      	mov	r7, r0
 8007232:	e7f0      	b.n	8007216 <_dtoa_r+0xb16>
 8007234:	9b04      	ldr	r3, [sp, #16]
 8007236:	9301      	str	r3, [sp, #4]
 8007238:	9d00      	ldr	r5, [sp, #0]
 800723a:	4631      	mov	r1, r6
 800723c:	4650      	mov	r0, sl
 800723e:	f7ff f9d5 	bl	80065ec <quorem>
 8007242:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007246:	9b00      	ldr	r3, [sp, #0]
 8007248:	f805 9b01 	strb.w	r9, [r5], #1
 800724c:	1aea      	subs	r2, r5, r3
 800724e:	9b01      	ldr	r3, [sp, #4]
 8007250:	4293      	cmp	r3, r2
 8007252:	dd07      	ble.n	8007264 <_dtoa_r+0xb64>
 8007254:	4651      	mov	r1, sl
 8007256:	2300      	movs	r3, #0
 8007258:	220a      	movs	r2, #10
 800725a:	4620      	mov	r0, r4
 800725c:	f000 f9a4 	bl	80075a8 <__multadd>
 8007260:	4682      	mov	sl, r0
 8007262:	e7ea      	b.n	800723a <_dtoa_r+0xb3a>
 8007264:	9b01      	ldr	r3, [sp, #4]
 8007266:	2b00      	cmp	r3, #0
 8007268:	bfc8      	it	gt
 800726a:	461d      	movgt	r5, r3
 800726c:	9b00      	ldr	r3, [sp, #0]
 800726e:	bfd8      	it	le
 8007270:	2501      	movle	r5, #1
 8007272:	441d      	add	r5, r3
 8007274:	f04f 0800 	mov.w	r8, #0
 8007278:	4651      	mov	r1, sl
 800727a:	2201      	movs	r2, #1
 800727c:	4620      	mov	r0, r4
 800727e:	f000 fb8b 	bl	8007998 <__lshift>
 8007282:	4631      	mov	r1, r6
 8007284:	4682      	mov	sl, r0
 8007286:	f000 fbf3 	bl	8007a70 <__mcmp>
 800728a:	2800      	cmp	r0, #0
 800728c:	dc96      	bgt.n	80071bc <_dtoa_r+0xabc>
 800728e:	d102      	bne.n	8007296 <_dtoa_r+0xb96>
 8007290:	f019 0f01 	tst.w	r9, #1
 8007294:	d192      	bne.n	80071bc <_dtoa_r+0xabc>
 8007296:	462b      	mov	r3, r5
 8007298:	461d      	mov	r5, r3
 800729a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800729e:	2a30      	cmp	r2, #48	; 0x30
 80072a0:	d0fa      	beq.n	8007298 <_dtoa_r+0xb98>
 80072a2:	e6dd      	b.n	8007060 <_dtoa_r+0x960>
 80072a4:	9a00      	ldr	r2, [sp, #0]
 80072a6:	429a      	cmp	r2, r3
 80072a8:	d189      	bne.n	80071be <_dtoa_r+0xabe>
 80072aa:	f10b 0b01 	add.w	fp, fp, #1
 80072ae:	2331      	movs	r3, #49	; 0x31
 80072b0:	e796      	b.n	80071e0 <_dtoa_r+0xae0>
 80072b2:	4b0a      	ldr	r3, [pc, #40]	; (80072dc <_dtoa_r+0xbdc>)
 80072b4:	f7ff ba99 	b.w	80067ea <_dtoa_r+0xea>
 80072b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	f47f aa6d 	bne.w	800679a <_dtoa_r+0x9a>
 80072c0:	4b07      	ldr	r3, [pc, #28]	; (80072e0 <_dtoa_r+0xbe0>)
 80072c2:	f7ff ba92 	b.w	80067ea <_dtoa_r+0xea>
 80072c6:	9b01      	ldr	r3, [sp, #4]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	dcb5      	bgt.n	8007238 <_dtoa_r+0xb38>
 80072cc:	9b07      	ldr	r3, [sp, #28]
 80072ce:	2b02      	cmp	r3, #2
 80072d0:	f73f aeb1 	bgt.w	8007036 <_dtoa_r+0x936>
 80072d4:	e7b0      	b.n	8007238 <_dtoa_r+0xb38>
 80072d6:	bf00      	nop
 80072d8:	08009f32 	.word	0x08009f32
 80072dc:	08009e8d 	.word	0x08009e8d
 80072e0:	08009eb6 	.word	0x08009eb6

080072e4 <_free_r>:
 80072e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80072e6:	2900      	cmp	r1, #0
 80072e8:	d044      	beq.n	8007374 <_free_r+0x90>
 80072ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072ee:	9001      	str	r0, [sp, #4]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	f1a1 0404 	sub.w	r4, r1, #4
 80072f6:	bfb8      	it	lt
 80072f8:	18e4      	addlt	r4, r4, r3
 80072fa:	f000 f8e7 	bl	80074cc <__malloc_lock>
 80072fe:	4a1e      	ldr	r2, [pc, #120]	; (8007378 <_free_r+0x94>)
 8007300:	9801      	ldr	r0, [sp, #4]
 8007302:	6813      	ldr	r3, [r2, #0]
 8007304:	b933      	cbnz	r3, 8007314 <_free_r+0x30>
 8007306:	6063      	str	r3, [r4, #4]
 8007308:	6014      	str	r4, [r2, #0]
 800730a:	b003      	add	sp, #12
 800730c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007310:	f000 b8e2 	b.w	80074d8 <__malloc_unlock>
 8007314:	42a3      	cmp	r3, r4
 8007316:	d908      	bls.n	800732a <_free_r+0x46>
 8007318:	6825      	ldr	r5, [r4, #0]
 800731a:	1961      	adds	r1, r4, r5
 800731c:	428b      	cmp	r3, r1
 800731e:	bf01      	itttt	eq
 8007320:	6819      	ldreq	r1, [r3, #0]
 8007322:	685b      	ldreq	r3, [r3, #4]
 8007324:	1949      	addeq	r1, r1, r5
 8007326:	6021      	streq	r1, [r4, #0]
 8007328:	e7ed      	b.n	8007306 <_free_r+0x22>
 800732a:	461a      	mov	r2, r3
 800732c:	685b      	ldr	r3, [r3, #4]
 800732e:	b10b      	cbz	r3, 8007334 <_free_r+0x50>
 8007330:	42a3      	cmp	r3, r4
 8007332:	d9fa      	bls.n	800732a <_free_r+0x46>
 8007334:	6811      	ldr	r1, [r2, #0]
 8007336:	1855      	adds	r5, r2, r1
 8007338:	42a5      	cmp	r5, r4
 800733a:	d10b      	bne.n	8007354 <_free_r+0x70>
 800733c:	6824      	ldr	r4, [r4, #0]
 800733e:	4421      	add	r1, r4
 8007340:	1854      	adds	r4, r2, r1
 8007342:	42a3      	cmp	r3, r4
 8007344:	6011      	str	r1, [r2, #0]
 8007346:	d1e0      	bne.n	800730a <_free_r+0x26>
 8007348:	681c      	ldr	r4, [r3, #0]
 800734a:	685b      	ldr	r3, [r3, #4]
 800734c:	6053      	str	r3, [r2, #4]
 800734e:	440c      	add	r4, r1
 8007350:	6014      	str	r4, [r2, #0]
 8007352:	e7da      	b.n	800730a <_free_r+0x26>
 8007354:	d902      	bls.n	800735c <_free_r+0x78>
 8007356:	230c      	movs	r3, #12
 8007358:	6003      	str	r3, [r0, #0]
 800735a:	e7d6      	b.n	800730a <_free_r+0x26>
 800735c:	6825      	ldr	r5, [r4, #0]
 800735e:	1961      	adds	r1, r4, r5
 8007360:	428b      	cmp	r3, r1
 8007362:	bf04      	itt	eq
 8007364:	6819      	ldreq	r1, [r3, #0]
 8007366:	685b      	ldreq	r3, [r3, #4]
 8007368:	6063      	str	r3, [r4, #4]
 800736a:	bf04      	itt	eq
 800736c:	1949      	addeq	r1, r1, r5
 800736e:	6021      	streq	r1, [r4, #0]
 8007370:	6054      	str	r4, [r2, #4]
 8007372:	e7ca      	b.n	800730a <_free_r+0x26>
 8007374:	b003      	add	sp, #12
 8007376:	bd30      	pop	{r4, r5, pc}
 8007378:	20000918 	.word	0x20000918

0800737c <malloc>:
 800737c:	4b02      	ldr	r3, [pc, #8]	; (8007388 <malloc+0xc>)
 800737e:	4601      	mov	r1, r0
 8007380:	6818      	ldr	r0, [r3, #0]
 8007382:	f000 b823 	b.w	80073cc <_malloc_r>
 8007386:	bf00      	nop
 8007388:	20000064 	.word	0x20000064

0800738c <sbrk_aligned>:
 800738c:	b570      	push	{r4, r5, r6, lr}
 800738e:	4e0e      	ldr	r6, [pc, #56]	; (80073c8 <sbrk_aligned+0x3c>)
 8007390:	460c      	mov	r4, r1
 8007392:	6831      	ldr	r1, [r6, #0]
 8007394:	4605      	mov	r5, r0
 8007396:	b911      	cbnz	r1, 800739e <sbrk_aligned+0x12>
 8007398:	f001 fd96 	bl	8008ec8 <_sbrk_r>
 800739c:	6030      	str	r0, [r6, #0]
 800739e:	4621      	mov	r1, r4
 80073a0:	4628      	mov	r0, r5
 80073a2:	f001 fd91 	bl	8008ec8 <_sbrk_r>
 80073a6:	1c43      	adds	r3, r0, #1
 80073a8:	d00a      	beq.n	80073c0 <sbrk_aligned+0x34>
 80073aa:	1cc4      	adds	r4, r0, #3
 80073ac:	f024 0403 	bic.w	r4, r4, #3
 80073b0:	42a0      	cmp	r0, r4
 80073b2:	d007      	beq.n	80073c4 <sbrk_aligned+0x38>
 80073b4:	1a21      	subs	r1, r4, r0
 80073b6:	4628      	mov	r0, r5
 80073b8:	f001 fd86 	bl	8008ec8 <_sbrk_r>
 80073bc:	3001      	adds	r0, #1
 80073be:	d101      	bne.n	80073c4 <sbrk_aligned+0x38>
 80073c0:	f04f 34ff 	mov.w	r4, #4294967295
 80073c4:	4620      	mov	r0, r4
 80073c6:	bd70      	pop	{r4, r5, r6, pc}
 80073c8:	2000091c 	.word	0x2000091c

080073cc <_malloc_r>:
 80073cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073d0:	1ccd      	adds	r5, r1, #3
 80073d2:	f025 0503 	bic.w	r5, r5, #3
 80073d6:	3508      	adds	r5, #8
 80073d8:	2d0c      	cmp	r5, #12
 80073da:	bf38      	it	cc
 80073dc:	250c      	movcc	r5, #12
 80073de:	2d00      	cmp	r5, #0
 80073e0:	4607      	mov	r7, r0
 80073e2:	db01      	blt.n	80073e8 <_malloc_r+0x1c>
 80073e4:	42a9      	cmp	r1, r5
 80073e6:	d905      	bls.n	80073f4 <_malloc_r+0x28>
 80073e8:	230c      	movs	r3, #12
 80073ea:	603b      	str	r3, [r7, #0]
 80073ec:	2600      	movs	r6, #0
 80073ee:	4630      	mov	r0, r6
 80073f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073f4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80074c8 <_malloc_r+0xfc>
 80073f8:	f000 f868 	bl	80074cc <__malloc_lock>
 80073fc:	f8d8 3000 	ldr.w	r3, [r8]
 8007400:	461c      	mov	r4, r3
 8007402:	bb5c      	cbnz	r4, 800745c <_malloc_r+0x90>
 8007404:	4629      	mov	r1, r5
 8007406:	4638      	mov	r0, r7
 8007408:	f7ff ffc0 	bl	800738c <sbrk_aligned>
 800740c:	1c43      	adds	r3, r0, #1
 800740e:	4604      	mov	r4, r0
 8007410:	d155      	bne.n	80074be <_malloc_r+0xf2>
 8007412:	f8d8 4000 	ldr.w	r4, [r8]
 8007416:	4626      	mov	r6, r4
 8007418:	2e00      	cmp	r6, #0
 800741a:	d145      	bne.n	80074a8 <_malloc_r+0xdc>
 800741c:	2c00      	cmp	r4, #0
 800741e:	d048      	beq.n	80074b2 <_malloc_r+0xe6>
 8007420:	6823      	ldr	r3, [r4, #0]
 8007422:	4631      	mov	r1, r6
 8007424:	4638      	mov	r0, r7
 8007426:	eb04 0903 	add.w	r9, r4, r3
 800742a:	f001 fd4d 	bl	8008ec8 <_sbrk_r>
 800742e:	4581      	cmp	r9, r0
 8007430:	d13f      	bne.n	80074b2 <_malloc_r+0xe6>
 8007432:	6821      	ldr	r1, [r4, #0]
 8007434:	1a6d      	subs	r5, r5, r1
 8007436:	4629      	mov	r1, r5
 8007438:	4638      	mov	r0, r7
 800743a:	f7ff ffa7 	bl	800738c <sbrk_aligned>
 800743e:	3001      	adds	r0, #1
 8007440:	d037      	beq.n	80074b2 <_malloc_r+0xe6>
 8007442:	6823      	ldr	r3, [r4, #0]
 8007444:	442b      	add	r3, r5
 8007446:	6023      	str	r3, [r4, #0]
 8007448:	f8d8 3000 	ldr.w	r3, [r8]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d038      	beq.n	80074c2 <_malloc_r+0xf6>
 8007450:	685a      	ldr	r2, [r3, #4]
 8007452:	42a2      	cmp	r2, r4
 8007454:	d12b      	bne.n	80074ae <_malloc_r+0xe2>
 8007456:	2200      	movs	r2, #0
 8007458:	605a      	str	r2, [r3, #4]
 800745a:	e00f      	b.n	800747c <_malloc_r+0xb0>
 800745c:	6822      	ldr	r2, [r4, #0]
 800745e:	1b52      	subs	r2, r2, r5
 8007460:	d41f      	bmi.n	80074a2 <_malloc_r+0xd6>
 8007462:	2a0b      	cmp	r2, #11
 8007464:	d917      	bls.n	8007496 <_malloc_r+0xca>
 8007466:	1961      	adds	r1, r4, r5
 8007468:	42a3      	cmp	r3, r4
 800746a:	6025      	str	r5, [r4, #0]
 800746c:	bf18      	it	ne
 800746e:	6059      	strne	r1, [r3, #4]
 8007470:	6863      	ldr	r3, [r4, #4]
 8007472:	bf08      	it	eq
 8007474:	f8c8 1000 	streq.w	r1, [r8]
 8007478:	5162      	str	r2, [r4, r5]
 800747a:	604b      	str	r3, [r1, #4]
 800747c:	4638      	mov	r0, r7
 800747e:	f104 060b 	add.w	r6, r4, #11
 8007482:	f000 f829 	bl	80074d8 <__malloc_unlock>
 8007486:	f026 0607 	bic.w	r6, r6, #7
 800748a:	1d23      	adds	r3, r4, #4
 800748c:	1af2      	subs	r2, r6, r3
 800748e:	d0ae      	beq.n	80073ee <_malloc_r+0x22>
 8007490:	1b9b      	subs	r3, r3, r6
 8007492:	50a3      	str	r3, [r4, r2]
 8007494:	e7ab      	b.n	80073ee <_malloc_r+0x22>
 8007496:	42a3      	cmp	r3, r4
 8007498:	6862      	ldr	r2, [r4, #4]
 800749a:	d1dd      	bne.n	8007458 <_malloc_r+0x8c>
 800749c:	f8c8 2000 	str.w	r2, [r8]
 80074a0:	e7ec      	b.n	800747c <_malloc_r+0xb0>
 80074a2:	4623      	mov	r3, r4
 80074a4:	6864      	ldr	r4, [r4, #4]
 80074a6:	e7ac      	b.n	8007402 <_malloc_r+0x36>
 80074a8:	4634      	mov	r4, r6
 80074aa:	6876      	ldr	r6, [r6, #4]
 80074ac:	e7b4      	b.n	8007418 <_malloc_r+0x4c>
 80074ae:	4613      	mov	r3, r2
 80074b0:	e7cc      	b.n	800744c <_malloc_r+0x80>
 80074b2:	230c      	movs	r3, #12
 80074b4:	603b      	str	r3, [r7, #0]
 80074b6:	4638      	mov	r0, r7
 80074b8:	f000 f80e 	bl	80074d8 <__malloc_unlock>
 80074bc:	e797      	b.n	80073ee <_malloc_r+0x22>
 80074be:	6025      	str	r5, [r4, #0]
 80074c0:	e7dc      	b.n	800747c <_malloc_r+0xb0>
 80074c2:	605b      	str	r3, [r3, #4]
 80074c4:	deff      	udf	#255	; 0xff
 80074c6:	bf00      	nop
 80074c8:	20000918 	.word	0x20000918

080074cc <__malloc_lock>:
 80074cc:	4801      	ldr	r0, [pc, #4]	; (80074d4 <__malloc_lock+0x8>)
 80074ce:	f7ff b884 	b.w	80065da <__retarget_lock_acquire_recursive>
 80074d2:	bf00      	nop
 80074d4:	20000914 	.word	0x20000914

080074d8 <__malloc_unlock>:
 80074d8:	4801      	ldr	r0, [pc, #4]	; (80074e0 <__malloc_unlock+0x8>)
 80074da:	f7ff b87f 	b.w	80065dc <__retarget_lock_release_recursive>
 80074de:	bf00      	nop
 80074e0:	20000914 	.word	0x20000914

080074e4 <_Balloc>:
 80074e4:	b570      	push	{r4, r5, r6, lr}
 80074e6:	69c6      	ldr	r6, [r0, #28]
 80074e8:	4604      	mov	r4, r0
 80074ea:	460d      	mov	r5, r1
 80074ec:	b976      	cbnz	r6, 800750c <_Balloc+0x28>
 80074ee:	2010      	movs	r0, #16
 80074f0:	f7ff ff44 	bl	800737c <malloc>
 80074f4:	4602      	mov	r2, r0
 80074f6:	61e0      	str	r0, [r4, #28]
 80074f8:	b920      	cbnz	r0, 8007504 <_Balloc+0x20>
 80074fa:	4b18      	ldr	r3, [pc, #96]	; (800755c <_Balloc+0x78>)
 80074fc:	4818      	ldr	r0, [pc, #96]	; (8007560 <_Balloc+0x7c>)
 80074fe:	216b      	movs	r1, #107	; 0x6b
 8007500:	f001 fd0a 	bl	8008f18 <__assert_func>
 8007504:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007508:	6006      	str	r6, [r0, #0]
 800750a:	60c6      	str	r6, [r0, #12]
 800750c:	69e6      	ldr	r6, [r4, #28]
 800750e:	68f3      	ldr	r3, [r6, #12]
 8007510:	b183      	cbz	r3, 8007534 <_Balloc+0x50>
 8007512:	69e3      	ldr	r3, [r4, #28]
 8007514:	68db      	ldr	r3, [r3, #12]
 8007516:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800751a:	b9b8      	cbnz	r0, 800754c <_Balloc+0x68>
 800751c:	2101      	movs	r1, #1
 800751e:	fa01 f605 	lsl.w	r6, r1, r5
 8007522:	1d72      	adds	r2, r6, #5
 8007524:	0092      	lsls	r2, r2, #2
 8007526:	4620      	mov	r0, r4
 8007528:	f001 fd14 	bl	8008f54 <_calloc_r>
 800752c:	b160      	cbz	r0, 8007548 <_Balloc+0x64>
 800752e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007532:	e00e      	b.n	8007552 <_Balloc+0x6e>
 8007534:	2221      	movs	r2, #33	; 0x21
 8007536:	2104      	movs	r1, #4
 8007538:	4620      	mov	r0, r4
 800753a:	f001 fd0b 	bl	8008f54 <_calloc_r>
 800753e:	69e3      	ldr	r3, [r4, #28]
 8007540:	60f0      	str	r0, [r6, #12]
 8007542:	68db      	ldr	r3, [r3, #12]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d1e4      	bne.n	8007512 <_Balloc+0x2e>
 8007548:	2000      	movs	r0, #0
 800754a:	bd70      	pop	{r4, r5, r6, pc}
 800754c:	6802      	ldr	r2, [r0, #0]
 800754e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007552:	2300      	movs	r3, #0
 8007554:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007558:	e7f7      	b.n	800754a <_Balloc+0x66>
 800755a:	bf00      	nop
 800755c:	08009ec3 	.word	0x08009ec3
 8007560:	08009f43 	.word	0x08009f43

08007564 <_Bfree>:
 8007564:	b570      	push	{r4, r5, r6, lr}
 8007566:	69c6      	ldr	r6, [r0, #28]
 8007568:	4605      	mov	r5, r0
 800756a:	460c      	mov	r4, r1
 800756c:	b976      	cbnz	r6, 800758c <_Bfree+0x28>
 800756e:	2010      	movs	r0, #16
 8007570:	f7ff ff04 	bl	800737c <malloc>
 8007574:	4602      	mov	r2, r0
 8007576:	61e8      	str	r0, [r5, #28]
 8007578:	b920      	cbnz	r0, 8007584 <_Bfree+0x20>
 800757a:	4b09      	ldr	r3, [pc, #36]	; (80075a0 <_Bfree+0x3c>)
 800757c:	4809      	ldr	r0, [pc, #36]	; (80075a4 <_Bfree+0x40>)
 800757e:	218f      	movs	r1, #143	; 0x8f
 8007580:	f001 fcca 	bl	8008f18 <__assert_func>
 8007584:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007588:	6006      	str	r6, [r0, #0]
 800758a:	60c6      	str	r6, [r0, #12]
 800758c:	b13c      	cbz	r4, 800759e <_Bfree+0x3a>
 800758e:	69eb      	ldr	r3, [r5, #28]
 8007590:	6862      	ldr	r2, [r4, #4]
 8007592:	68db      	ldr	r3, [r3, #12]
 8007594:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007598:	6021      	str	r1, [r4, #0]
 800759a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800759e:	bd70      	pop	{r4, r5, r6, pc}
 80075a0:	08009ec3 	.word	0x08009ec3
 80075a4:	08009f43 	.word	0x08009f43

080075a8 <__multadd>:
 80075a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075ac:	690d      	ldr	r5, [r1, #16]
 80075ae:	4607      	mov	r7, r0
 80075b0:	460c      	mov	r4, r1
 80075b2:	461e      	mov	r6, r3
 80075b4:	f101 0c14 	add.w	ip, r1, #20
 80075b8:	2000      	movs	r0, #0
 80075ba:	f8dc 3000 	ldr.w	r3, [ip]
 80075be:	b299      	uxth	r1, r3
 80075c0:	fb02 6101 	mla	r1, r2, r1, r6
 80075c4:	0c1e      	lsrs	r6, r3, #16
 80075c6:	0c0b      	lsrs	r3, r1, #16
 80075c8:	fb02 3306 	mla	r3, r2, r6, r3
 80075cc:	b289      	uxth	r1, r1
 80075ce:	3001      	adds	r0, #1
 80075d0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80075d4:	4285      	cmp	r5, r0
 80075d6:	f84c 1b04 	str.w	r1, [ip], #4
 80075da:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80075de:	dcec      	bgt.n	80075ba <__multadd+0x12>
 80075e0:	b30e      	cbz	r6, 8007626 <__multadd+0x7e>
 80075e2:	68a3      	ldr	r3, [r4, #8]
 80075e4:	42ab      	cmp	r3, r5
 80075e6:	dc19      	bgt.n	800761c <__multadd+0x74>
 80075e8:	6861      	ldr	r1, [r4, #4]
 80075ea:	4638      	mov	r0, r7
 80075ec:	3101      	adds	r1, #1
 80075ee:	f7ff ff79 	bl	80074e4 <_Balloc>
 80075f2:	4680      	mov	r8, r0
 80075f4:	b928      	cbnz	r0, 8007602 <__multadd+0x5a>
 80075f6:	4602      	mov	r2, r0
 80075f8:	4b0c      	ldr	r3, [pc, #48]	; (800762c <__multadd+0x84>)
 80075fa:	480d      	ldr	r0, [pc, #52]	; (8007630 <__multadd+0x88>)
 80075fc:	21ba      	movs	r1, #186	; 0xba
 80075fe:	f001 fc8b 	bl	8008f18 <__assert_func>
 8007602:	6922      	ldr	r2, [r4, #16]
 8007604:	3202      	adds	r2, #2
 8007606:	f104 010c 	add.w	r1, r4, #12
 800760a:	0092      	lsls	r2, r2, #2
 800760c:	300c      	adds	r0, #12
 800760e:	f001 fc6b 	bl	8008ee8 <memcpy>
 8007612:	4621      	mov	r1, r4
 8007614:	4638      	mov	r0, r7
 8007616:	f7ff ffa5 	bl	8007564 <_Bfree>
 800761a:	4644      	mov	r4, r8
 800761c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007620:	3501      	adds	r5, #1
 8007622:	615e      	str	r6, [r3, #20]
 8007624:	6125      	str	r5, [r4, #16]
 8007626:	4620      	mov	r0, r4
 8007628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800762c:	08009f32 	.word	0x08009f32
 8007630:	08009f43 	.word	0x08009f43

08007634 <__s2b>:
 8007634:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007638:	460c      	mov	r4, r1
 800763a:	4615      	mov	r5, r2
 800763c:	461f      	mov	r7, r3
 800763e:	2209      	movs	r2, #9
 8007640:	3308      	adds	r3, #8
 8007642:	4606      	mov	r6, r0
 8007644:	fb93 f3f2 	sdiv	r3, r3, r2
 8007648:	2100      	movs	r1, #0
 800764a:	2201      	movs	r2, #1
 800764c:	429a      	cmp	r2, r3
 800764e:	db09      	blt.n	8007664 <__s2b+0x30>
 8007650:	4630      	mov	r0, r6
 8007652:	f7ff ff47 	bl	80074e4 <_Balloc>
 8007656:	b940      	cbnz	r0, 800766a <__s2b+0x36>
 8007658:	4602      	mov	r2, r0
 800765a:	4b19      	ldr	r3, [pc, #100]	; (80076c0 <__s2b+0x8c>)
 800765c:	4819      	ldr	r0, [pc, #100]	; (80076c4 <__s2b+0x90>)
 800765e:	21d3      	movs	r1, #211	; 0xd3
 8007660:	f001 fc5a 	bl	8008f18 <__assert_func>
 8007664:	0052      	lsls	r2, r2, #1
 8007666:	3101      	adds	r1, #1
 8007668:	e7f0      	b.n	800764c <__s2b+0x18>
 800766a:	9b08      	ldr	r3, [sp, #32]
 800766c:	6143      	str	r3, [r0, #20]
 800766e:	2d09      	cmp	r5, #9
 8007670:	f04f 0301 	mov.w	r3, #1
 8007674:	6103      	str	r3, [r0, #16]
 8007676:	dd16      	ble.n	80076a6 <__s2b+0x72>
 8007678:	f104 0909 	add.w	r9, r4, #9
 800767c:	46c8      	mov	r8, r9
 800767e:	442c      	add	r4, r5
 8007680:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007684:	4601      	mov	r1, r0
 8007686:	3b30      	subs	r3, #48	; 0x30
 8007688:	220a      	movs	r2, #10
 800768a:	4630      	mov	r0, r6
 800768c:	f7ff ff8c 	bl	80075a8 <__multadd>
 8007690:	45a0      	cmp	r8, r4
 8007692:	d1f5      	bne.n	8007680 <__s2b+0x4c>
 8007694:	f1a5 0408 	sub.w	r4, r5, #8
 8007698:	444c      	add	r4, r9
 800769a:	1b2d      	subs	r5, r5, r4
 800769c:	1963      	adds	r3, r4, r5
 800769e:	42bb      	cmp	r3, r7
 80076a0:	db04      	blt.n	80076ac <__s2b+0x78>
 80076a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076a6:	340a      	adds	r4, #10
 80076a8:	2509      	movs	r5, #9
 80076aa:	e7f6      	b.n	800769a <__s2b+0x66>
 80076ac:	f814 3b01 	ldrb.w	r3, [r4], #1
 80076b0:	4601      	mov	r1, r0
 80076b2:	3b30      	subs	r3, #48	; 0x30
 80076b4:	220a      	movs	r2, #10
 80076b6:	4630      	mov	r0, r6
 80076b8:	f7ff ff76 	bl	80075a8 <__multadd>
 80076bc:	e7ee      	b.n	800769c <__s2b+0x68>
 80076be:	bf00      	nop
 80076c0:	08009f32 	.word	0x08009f32
 80076c4:	08009f43 	.word	0x08009f43

080076c8 <__hi0bits>:
 80076c8:	0c03      	lsrs	r3, r0, #16
 80076ca:	041b      	lsls	r3, r3, #16
 80076cc:	b9d3      	cbnz	r3, 8007704 <__hi0bits+0x3c>
 80076ce:	0400      	lsls	r0, r0, #16
 80076d0:	2310      	movs	r3, #16
 80076d2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80076d6:	bf04      	itt	eq
 80076d8:	0200      	lsleq	r0, r0, #8
 80076da:	3308      	addeq	r3, #8
 80076dc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80076e0:	bf04      	itt	eq
 80076e2:	0100      	lsleq	r0, r0, #4
 80076e4:	3304      	addeq	r3, #4
 80076e6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80076ea:	bf04      	itt	eq
 80076ec:	0080      	lsleq	r0, r0, #2
 80076ee:	3302      	addeq	r3, #2
 80076f0:	2800      	cmp	r0, #0
 80076f2:	db05      	blt.n	8007700 <__hi0bits+0x38>
 80076f4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80076f8:	f103 0301 	add.w	r3, r3, #1
 80076fc:	bf08      	it	eq
 80076fe:	2320      	moveq	r3, #32
 8007700:	4618      	mov	r0, r3
 8007702:	4770      	bx	lr
 8007704:	2300      	movs	r3, #0
 8007706:	e7e4      	b.n	80076d2 <__hi0bits+0xa>

08007708 <__lo0bits>:
 8007708:	6803      	ldr	r3, [r0, #0]
 800770a:	f013 0207 	ands.w	r2, r3, #7
 800770e:	d00c      	beq.n	800772a <__lo0bits+0x22>
 8007710:	07d9      	lsls	r1, r3, #31
 8007712:	d422      	bmi.n	800775a <__lo0bits+0x52>
 8007714:	079a      	lsls	r2, r3, #30
 8007716:	bf49      	itett	mi
 8007718:	085b      	lsrmi	r3, r3, #1
 800771a:	089b      	lsrpl	r3, r3, #2
 800771c:	6003      	strmi	r3, [r0, #0]
 800771e:	2201      	movmi	r2, #1
 8007720:	bf5c      	itt	pl
 8007722:	6003      	strpl	r3, [r0, #0]
 8007724:	2202      	movpl	r2, #2
 8007726:	4610      	mov	r0, r2
 8007728:	4770      	bx	lr
 800772a:	b299      	uxth	r1, r3
 800772c:	b909      	cbnz	r1, 8007732 <__lo0bits+0x2a>
 800772e:	0c1b      	lsrs	r3, r3, #16
 8007730:	2210      	movs	r2, #16
 8007732:	b2d9      	uxtb	r1, r3
 8007734:	b909      	cbnz	r1, 800773a <__lo0bits+0x32>
 8007736:	3208      	adds	r2, #8
 8007738:	0a1b      	lsrs	r3, r3, #8
 800773a:	0719      	lsls	r1, r3, #28
 800773c:	bf04      	itt	eq
 800773e:	091b      	lsreq	r3, r3, #4
 8007740:	3204      	addeq	r2, #4
 8007742:	0799      	lsls	r1, r3, #30
 8007744:	bf04      	itt	eq
 8007746:	089b      	lsreq	r3, r3, #2
 8007748:	3202      	addeq	r2, #2
 800774a:	07d9      	lsls	r1, r3, #31
 800774c:	d403      	bmi.n	8007756 <__lo0bits+0x4e>
 800774e:	085b      	lsrs	r3, r3, #1
 8007750:	f102 0201 	add.w	r2, r2, #1
 8007754:	d003      	beq.n	800775e <__lo0bits+0x56>
 8007756:	6003      	str	r3, [r0, #0]
 8007758:	e7e5      	b.n	8007726 <__lo0bits+0x1e>
 800775a:	2200      	movs	r2, #0
 800775c:	e7e3      	b.n	8007726 <__lo0bits+0x1e>
 800775e:	2220      	movs	r2, #32
 8007760:	e7e1      	b.n	8007726 <__lo0bits+0x1e>
	...

08007764 <__i2b>:
 8007764:	b510      	push	{r4, lr}
 8007766:	460c      	mov	r4, r1
 8007768:	2101      	movs	r1, #1
 800776a:	f7ff febb 	bl	80074e4 <_Balloc>
 800776e:	4602      	mov	r2, r0
 8007770:	b928      	cbnz	r0, 800777e <__i2b+0x1a>
 8007772:	4b05      	ldr	r3, [pc, #20]	; (8007788 <__i2b+0x24>)
 8007774:	4805      	ldr	r0, [pc, #20]	; (800778c <__i2b+0x28>)
 8007776:	f240 1145 	movw	r1, #325	; 0x145
 800777a:	f001 fbcd 	bl	8008f18 <__assert_func>
 800777e:	2301      	movs	r3, #1
 8007780:	6144      	str	r4, [r0, #20]
 8007782:	6103      	str	r3, [r0, #16]
 8007784:	bd10      	pop	{r4, pc}
 8007786:	bf00      	nop
 8007788:	08009f32 	.word	0x08009f32
 800778c:	08009f43 	.word	0x08009f43

08007790 <__multiply>:
 8007790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007794:	4691      	mov	r9, r2
 8007796:	690a      	ldr	r2, [r1, #16]
 8007798:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800779c:	429a      	cmp	r2, r3
 800779e:	bfb8      	it	lt
 80077a0:	460b      	movlt	r3, r1
 80077a2:	460c      	mov	r4, r1
 80077a4:	bfbc      	itt	lt
 80077a6:	464c      	movlt	r4, r9
 80077a8:	4699      	movlt	r9, r3
 80077aa:	6927      	ldr	r7, [r4, #16]
 80077ac:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80077b0:	68a3      	ldr	r3, [r4, #8]
 80077b2:	6861      	ldr	r1, [r4, #4]
 80077b4:	eb07 060a 	add.w	r6, r7, sl
 80077b8:	42b3      	cmp	r3, r6
 80077ba:	b085      	sub	sp, #20
 80077bc:	bfb8      	it	lt
 80077be:	3101      	addlt	r1, #1
 80077c0:	f7ff fe90 	bl	80074e4 <_Balloc>
 80077c4:	b930      	cbnz	r0, 80077d4 <__multiply+0x44>
 80077c6:	4602      	mov	r2, r0
 80077c8:	4b44      	ldr	r3, [pc, #272]	; (80078dc <__multiply+0x14c>)
 80077ca:	4845      	ldr	r0, [pc, #276]	; (80078e0 <__multiply+0x150>)
 80077cc:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80077d0:	f001 fba2 	bl	8008f18 <__assert_func>
 80077d4:	f100 0514 	add.w	r5, r0, #20
 80077d8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80077dc:	462b      	mov	r3, r5
 80077de:	2200      	movs	r2, #0
 80077e0:	4543      	cmp	r3, r8
 80077e2:	d321      	bcc.n	8007828 <__multiply+0x98>
 80077e4:	f104 0314 	add.w	r3, r4, #20
 80077e8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80077ec:	f109 0314 	add.w	r3, r9, #20
 80077f0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80077f4:	9202      	str	r2, [sp, #8]
 80077f6:	1b3a      	subs	r2, r7, r4
 80077f8:	3a15      	subs	r2, #21
 80077fa:	f022 0203 	bic.w	r2, r2, #3
 80077fe:	3204      	adds	r2, #4
 8007800:	f104 0115 	add.w	r1, r4, #21
 8007804:	428f      	cmp	r7, r1
 8007806:	bf38      	it	cc
 8007808:	2204      	movcc	r2, #4
 800780a:	9201      	str	r2, [sp, #4]
 800780c:	9a02      	ldr	r2, [sp, #8]
 800780e:	9303      	str	r3, [sp, #12]
 8007810:	429a      	cmp	r2, r3
 8007812:	d80c      	bhi.n	800782e <__multiply+0x9e>
 8007814:	2e00      	cmp	r6, #0
 8007816:	dd03      	ble.n	8007820 <__multiply+0x90>
 8007818:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800781c:	2b00      	cmp	r3, #0
 800781e:	d05b      	beq.n	80078d8 <__multiply+0x148>
 8007820:	6106      	str	r6, [r0, #16]
 8007822:	b005      	add	sp, #20
 8007824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007828:	f843 2b04 	str.w	r2, [r3], #4
 800782c:	e7d8      	b.n	80077e0 <__multiply+0x50>
 800782e:	f8b3 a000 	ldrh.w	sl, [r3]
 8007832:	f1ba 0f00 	cmp.w	sl, #0
 8007836:	d024      	beq.n	8007882 <__multiply+0xf2>
 8007838:	f104 0e14 	add.w	lr, r4, #20
 800783c:	46a9      	mov	r9, r5
 800783e:	f04f 0c00 	mov.w	ip, #0
 8007842:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007846:	f8d9 1000 	ldr.w	r1, [r9]
 800784a:	fa1f fb82 	uxth.w	fp, r2
 800784e:	b289      	uxth	r1, r1
 8007850:	fb0a 110b 	mla	r1, sl, fp, r1
 8007854:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007858:	f8d9 2000 	ldr.w	r2, [r9]
 800785c:	4461      	add	r1, ip
 800785e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007862:	fb0a c20b 	mla	r2, sl, fp, ip
 8007866:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800786a:	b289      	uxth	r1, r1
 800786c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007870:	4577      	cmp	r7, lr
 8007872:	f849 1b04 	str.w	r1, [r9], #4
 8007876:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800787a:	d8e2      	bhi.n	8007842 <__multiply+0xb2>
 800787c:	9a01      	ldr	r2, [sp, #4]
 800787e:	f845 c002 	str.w	ip, [r5, r2]
 8007882:	9a03      	ldr	r2, [sp, #12]
 8007884:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007888:	3304      	adds	r3, #4
 800788a:	f1b9 0f00 	cmp.w	r9, #0
 800788e:	d021      	beq.n	80078d4 <__multiply+0x144>
 8007890:	6829      	ldr	r1, [r5, #0]
 8007892:	f104 0c14 	add.w	ip, r4, #20
 8007896:	46ae      	mov	lr, r5
 8007898:	f04f 0a00 	mov.w	sl, #0
 800789c:	f8bc b000 	ldrh.w	fp, [ip]
 80078a0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80078a4:	fb09 220b 	mla	r2, r9, fp, r2
 80078a8:	4452      	add	r2, sl
 80078aa:	b289      	uxth	r1, r1
 80078ac:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80078b0:	f84e 1b04 	str.w	r1, [lr], #4
 80078b4:	f85c 1b04 	ldr.w	r1, [ip], #4
 80078b8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80078bc:	f8be 1000 	ldrh.w	r1, [lr]
 80078c0:	fb09 110a 	mla	r1, r9, sl, r1
 80078c4:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80078c8:	4567      	cmp	r7, ip
 80078ca:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80078ce:	d8e5      	bhi.n	800789c <__multiply+0x10c>
 80078d0:	9a01      	ldr	r2, [sp, #4]
 80078d2:	50a9      	str	r1, [r5, r2]
 80078d4:	3504      	adds	r5, #4
 80078d6:	e799      	b.n	800780c <__multiply+0x7c>
 80078d8:	3e01      	subs	r6, #1
 80078da:	e79b      	b.n	8007814 <__multiply+0x84>
 80078dc:	08009f32 	.word	0x08009f32
 80078e0:	08009f43 	.word	0x08009f43

080078e4 <__pow5mult>:
 80078e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078e8:	4615      	mov	r5, r2
 80078ea:	f012 0203 	ands.w	r2, r2, #3
 80078ee:	4606      	mov	r6, r0
 80078f0:	460f      	mov	r7, r1
 80078f2:	d007      	beq.n	8007904 <__pow5mult+0x20>
 80078f4:	4c25      	ldr	r4, [pc, #148]	; (800798c <__pow5mult+0xa8>)
 80078f6:	3a01      	subs	r2, #1
 80078f8:	2300      	movs	r3, #0
 80078fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80078fe:	f7ff fe53 	bl	80075a8 <__multadd>
 8007902:	4607      	mov	r7, r0
 8007904:	10ad      	asrs	r5, r5, #2
 8007906:	d03d      	beq.n	8007984 <__pow5mult+0xa0>
 8007908:	69f4      	ldr	r4, [r6, #28]
 800790a:	b97c      	cbnz	r4, 800792c <__pow5mult+0x48>
 800790c:	2010      	movs	r0, #16
 800790e:	f7ff fd35 	bl	800737c <malloc>
 8007912:	4602      	mov	r2, r0
 8007914:	61f0      	str	r0, [r6, #28]
 8007916:	b928      	cbnz	r0, 8007924 <__pow5mult+0x40>
 8007918:	4b1d      	ldr	r3, [pc, #116]	; (8007990 <__pow5mult+0xac>)
 800791a:	481e      	ldr	r0, [pc, #120]	; (8007994 <__pow5mult+0xb0>)
 800791c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007920:	f001 fafa 	bl	8008f18 <__assert_func>
 8007924:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007928:	6004      	str	r4, [r0, #0]
 800792a:	60c4      	str	r4, [r0, #12]
 800792c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007930:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007934:	b94c      	cbnz	r4, 800794a <__pow5mult+0x66>
 8007936:	f240 2171 	movw	r1, #625	; 0x271
 800793a:	4630      	mov	r0, r6
 800793c:	f7ff ff12 	bl	8007764 <__i2b>
 8007940:	2300      	movs	r3, #0
 8007942:	f8c8 0008 	str.w	r0, [r8, #8]
 8007946:	4604      	mov	r4, r0
 8007948:	6003      	str	r3, [r0, #0]
 800794a:	f04f 0900 	mov.w	r9, #0
 800794e:	07eb      	lsls	r3, r5, #31
 8007950:	d50a      	bpl.n	8007968 <__pow5mult+0x84>
 8007952:	4639      	mov	r1, r7
 8007954:	4622      	mov	r2, r4
 8007956:	4630      	mov	r0, r6
 8007958:	f7ff ff1a 	bl	8007790 <__multiply>
 800795c:	4639      	mov	r1, r7
 800795e:	4680      	mov	r8, r0
 8007960:	4630      	mov	r0, r6
 8007962:	f7ff fdff 	bl	8007564 <_Bfree>
 8007966:	4647      	mov	r7, r8
 8007968:	106d      	asrs	r5, r5, #1
 800796a:	d00b      	beq.n	8007984 <__pow5mult+0xa0>
 800796c:	6820      	ldr	r0, [r4, #0]
 800796e:	b938      	cbnz	r0, 8007980 <__pow5mult+0x9c>
 8007970:	4622      	mov	r2, r4
 8007972:	4621      	mov	r1, r4
 8007974:	4630      	mov	r0, r6
 8007976:	f7ff ff0b 	bl	8007790 <__multiply>
 800797a:	6020      	str	r0, [r4, #0]
 800797c:	f8c0 9000 	str.w	r9, [r0]
 8007980:	4604      	mov	r4, r0
 8007982:	e7e4      	b.n	800794e <__pow5mult+0x6a>
 8007984:	4638      	mov	r0, r7
 8007986:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800798a:	bf00      	nop
 800798c:	0800a090 	.word	0x0800a090
 8007990:	08009ec3 	.word	0x08009ec3
 8007994:	08009f43 	.word	0x08009f43

08007998 <__lshift>:
 8007998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800799c:	460c      	mov	r4, r1
 800799e:	6849      	ldr	r1, [r1, #4]
 80079a0:	6923      	ldr	r3, [r4, #16]
 80079a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80079a6:	68a3      	ldr	r3, [r4, #8]
 80079a8:	4607      	mov	r7, r0
 80079aa:	4691      	mov	r9, r2
 80079ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80079b0:	f108 0601 	add.w	r6, r8, #1
 80079b4:	42b3      	cmp	r3, r6
 80079b6:	db0b      	blt.n	80079d0 <__lshift+0x38>
 80079b8:	4638      	mov	r0, r7
 80079ba:	f7ff fd93 	bl	80074e4 <_Balloc>
 80079be:	4605      	mov	r5, r0
 80079c0:	b948      	cbnz	r0, 80079d6 <__lshift+0x3e>
 80079c2:	4602      	mov	r2, r0
 80079c4:	4b28      	ldr	r3, [pc, #160]	; (8007a68 <__lshift+0xd0>)
 80079c6:	4829      	ldr	r0, [pc, #164]	; (8007a6c <__lshift+0xd4>)
 80079c8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80079cc:	f001 faa4 	bl	8008f18 <__assert_func>
 80079d0:	3101      	adds	r1, #1
 80079d2:	005b      	lsls	r3, r3, #1
 80079d4:	e7ee      	b.n	80079b4 <__lshift+0x1c>
 80079d6:	2300      	movs	r3, #0
 80079d8:	f100 0114 	add.w	r1, r0, #20
 80079dc:	f100 0210 	add.w	r2, r0, #16
 80079e0:	4618      	mov	r0, r3
 80079e2:	4553      	cmp	r3, sl
 80079e4:	db33      	blt.n	8007a4e <__lshift+0xb6>
 80079e6:	6920      	ldr	r0, [r4, #16]
 80079e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80079ec:	f104 0314 	add.w	r3, r4, #20
 80079f0:	f019 091f 	ands.w	r9, r9, #31
 80079f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80079f8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80079fc:	d02b      	beq.n	8007a56 <__lshift+0xbe>
 80079fe:	f1c9 0e20 	rsb	lr, r9, #32
 8007a02:	468a      	mov	sl, r1
 8007a04:	2200      	movs	r2, #0
 8007a06:	6818      	ldr	r0, [r3, #0]
 8007a08:	fa00 f009 	lsl.w	r0, r0, r9
 8007a0c:	4310      	orrs	r0, r2
 8007a0e:	f84a 0b04 	str.w	r0, [sl], #4
 8007a12:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a16:	459c      	cmp	ip, r3
 8007a18:	fa22 f20e 	lsr.w	r2, r2, lr
 8007a1c:	d8f3      	bhi.n	8007a06 <__lshift+0x6e>
 8007a1e:	ebac 0304 	sub.w	r3, ip, r4
 8007a22:	3b15      	subs	r3, #21
 8007a24:	f023 0303 	bic.w	r3, r3, #3
 8007a28:	3304      	adds	r3, #4
 8007a2a:	f104 0015 	add.w	r0, r4, #21
 8007a2e:	4584      	cmp	ip, r0
 8007a30:	bf38      	it	cc
 8007a32:	2304      	movcc	r3, #4
 8007a34:	50ca      	str	r2, [r1, r3]
 8007a36:	b10a      	cbz	r2, 8007a3c <__lshift+0xa4>
 8007a38:	f108 0602 	add.w	r6, r8, #2
 8007a3c:	3e01      	subs	r6, #1
 8007a3e:	4638      	mov	r0, r7
 8007a40:	612e      	str	r6, [r5, #16]
 8007a42:	4621      	mov	r1, r4
 8007a44:	f7ff fd8e 	bl	8007564 <_Bfree>
 8007a48:	4628      	mov	r0, r5
 8007a4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a4e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007a52:	3301      	adds	r3, #1
 8007a54:	e7c5      	b.n	80079e2 <__lshift+0x4a>
 8007a56:	3904      	subs	r1, #4
 8007a58:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a5c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007a60:	459c      	cmp	ip, r3
 8007a62:	d8f9      	bhi.n	8007a58 <__lshift+0xc0>
 8007a64:	e7ea      	b.n	8007a3c <__lshift+0xa4>
 8007a66:	bf00      	nop
 8007a68:	08009f32 	.word	0x08009f32
 8007a6c:	08009f43 	.word	0x08009f43

08007a70 <__mcmp>:
 8007a70:	b530      	push	{r4, r5, lr}
 8007a72:	6902      	ldr	r2, [r0, #16]
 8007a74:	690c      	ldr	r4, [r1, #16]
 8007a76:	1b12      	subs	r2, r2, r4
 8007a78:	d10e      	bne.n	8007a98 <__mcmp+0x28>
 8007a7a:	f100 0314 	add.w	r3, r0, #20
 8007a7e:	3114      	adds	r1, #20
 8007a80:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007a84:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007a88:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007a8c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007a90:	42a5      	cmp	r5, r4
 8007a92:	d003      	beq.n	8007a9c <__mcmp+0x2c>
 8007a94:	d305      	bcc.n	8007aa2 <__mcmp+0x32>
 8007a96:	2201      	movs	r2, #1
 8007a98:	4610      	mov	r0, r2
 8007a9a:	bd30      	pop	{r4, r5, pc}
 8007a9c:	4283      	cmp	r3, r0
 8007a9e:	d3f3      	bcc.n	8007a88 <__mcmp+0x18>
 8007aa0:	e7fa      	b.n	8007a98 <__mcmp+0x28>
 8007aa2:	f04f 32ff 	mov.w	r2, #4294967295
 8007aa6:	e7f7      	b.n	8007a98 <__mcmp+0x28>

08007aa8 <__mdiff>:
 8007aa8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aac:	460c      	mov	r4, r1
 8007aae:	4606      	mov	r6, r0
 8007ab0:	4611      	mov	r1, r2
 8007ab2:	4620      	mov	r0, r4
 8007ab4:	4690      	mov	r8, r2
 8007ab6:	f7ff ffdb 	bl	8007a70 <__mcmp>
 8007aba:	1e05      	subs	r5, r0, #0
 8007abc:	d110      	bne.n	8007ae0 <__mdiff+0x38>
 8007abe:	4629      	mov	r1, r5
 8007ac0:	4630      	mov	r0, r6
 8007ac2:	f7ff fd0f 	bl	80074e4 <_Balloc>
 8007ac6:	b930      	cbnz	r0, 8007ad6 <__mdiff+0x2e>
 8007ac8:	4b3a      	ldr	r3, [pc, #232]	; (8007bb4 <__mdiff+0x10c>)
 8007aca:	4602      	mov	r2, r0
 8007acc:	f240 2137 	movw	r1, #567	; 0x237
 8007ad0:	4839      	ldr	r0, [pc, #228]	; (8007bb8 <__mdiff+0x110>)
 8007ad2:	f001 fa21 	bl	8008f18 <__assert_func>
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007adc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ae0:	bfa4      	itt	ge
 8007ae2:	4643      	movge	r3, r8
 8007ae4:	46a0      	movge	r8, r4
 8007ae6:	4630      	mov	r0, r6
 8007ae8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007aec:	bfa6      	itte	ge
 8007aee:	461c      	movge	r4, r3
 8007af0:	2500      	movge	r5, #0
 8007af2:	2501      	movlt	r5, #1
 8007af4:	f7ff fcf6 	bl	80074e4 <_Balloc>
 8007af8:	b920      	cbnz	r0, 8007b04 <__mdiff+0x5c>
 8007afa:	4b2e      	ldr	r3, [pc, #184]	; (8007bb4 <__mdiff+0x10c>)
 8007afc:	4602      	mov	r2, r0
 8007afe:	f240 2145 	movw	r1, #581	; 0x245
 8007b02:	e7e5      	b.n	8007ad0 <__mdiff+0x28>
 8007b04:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007b08:	6926      	ldr	r6, [r4, #16]
 8007b0a:	60c5      	str	r5, [r0, #12]
 8007b0c:	f104 0914 	add.w	r9, r4, #20
 8007b10:	f108 0514 	add.w	r5, r8, #20
 8007b14:	f100 0e14 	add.w	lr, r0, #20
 8007b18:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007b1c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007b20:	f108 0210 	add.w	r2, r8, #16
 8007b24:	46f2      	mov	sl, lr
 8007b26:	2100      	movs	r1, #0
 8007b28:	f859 3b04 	ldr.w	r3, [r9], #4
 8007b2c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007b30:	fa11 f88b 	uxtah	r8, r1, fp
 8007b34:	b299      	uxth	r1, r3
 8007b36:	0c1b      	lsrs	r3, r3, #16
 8007b38:	eba8 0801 	sub.w	r8, r8, r1
 8007b3c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007b40:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007b44:	fa1f f888 	uxth.w	r8, r8
 8007b48:	1419      	asrs	r1, r3, #16
 8007b4a:	454e      	cmp	r6, r9
 8007b4c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007b50:	f84a 3b04 	str.w	r3, [sl], #4
 8007b54:	d8e8      	bhi.n	8007b28 <__mdiff+0x80>
 8007b56:	1b33      	subs	r3, r6, r4
 8007b58:	3b15      	subs	r3, #21
 8007b5a:	f023 0303 	bic.w	r3, r3, #3
 8007b5e:	3304      	adds	r3, #4
 8007b60:	3415      	adds	r4, #21
 8007b62:	42a6      	cmp	r6, r4
 8007b64:	bf38      	it	cc
 8007b66:	2304      	movcc	r3, #4
 8007b68:	441d      	add	r5, r3
 8007b6a:	4473      	add	r3, lr
 8007b6c:	469e      	mov	lr, r3
 8007b6e:	462e      	mov	r6, r5
 8007b70:	4566      	cmp	r6, ip
 8007b72:	d30e      	bcc.n	8007b92 <__mdiff+0xea>
 8007b74:	f10c 0203 	add.w	r2, ip, #3
 8007b78:	1b52      	subs	r2, r2, r5
 8007b7a:	f022 0203 	bic.w	r2, r2, #3
 8007b7e:	3d03      	subs	r5, #3
 8007b80:	45ac      	cmp	ip, r5
 8007b82:	bf38      	it	cc
 8007b84:	2200      	movcc	r2, #0
 8007b86:	4413      	add	r3, r2
 8007b88:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007b8c:	b17a      	cbz	r2, 8007bae <__mdiff+0x106>
 8007b8e:	6107      	str	r7, [r0, #16]
 8007b90:	e7a4      	b.n	8007adc <__mdiff+0x34>
 8007b92:	f856 8b04 	ldr.w	r8, [r6], #4
 8007b96:	fa11 f288 	uxtah	r2, r1, r8
 8007b9a:	1414      	asrs	r4, r2, #16
 8007b9c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007ba0:	b292      	uxth	r2, r2
 8007ba2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007ba6:	f84e 2b04 	str.w	r2, [lr], #4
 8007baa:	1421      	asrs	r1, r4, #16
 8007bac:	e7e0      	b.n	8007b70 <__mdiff+0xc8>
 8007bae:	3f01      	subs	r7, #1
 8007bb0:	e7ea      	b.n	8007b88 <__mdiff+0xe0>
 8007bb2:	bf00      	nop
 8007bb4:	08009f32 	.word	0x08009f32
 8007bb8:	08009f43 	.word	0x08009f43

08007bbc <__ulp>:
 8007bbc:	b082      	sub	sp, #8
 8007bbe:	ed8d 0b00 	vstr	d0, [sp]
 8007bc2:	9a01      	ldr	r2, [sp, #4]
 8007bc4:	4b0f      	ldr	r3, [pc, #60]	; (8007c04 <__ulp+0x48>)
 8007bc6:	4013      	ands	r3, r2
 8007bc8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	dc08      	bgt.n	8007be2 <__ulp+0x26>
 8007bd0:	425b      	negs	r3, r3
 8007bd2:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8007bd6:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007bda:	da04      	bge.n	8007be6 <__ulp+0x2a>
 8007bdc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007be0:	4113      	asrs	r3, r2
 8007be2:	2200      	movs	r2, #0
 8007be4:	e008      	b.n	8007bf8 <__ulp+0x3c>
 8007be6:	f1a2 0314 	sub.w	r3, r2, #20
 8007bea:	2b1e      	cmp	r3, #30
 8007bec:	bfda      	itte	le
 8007bee:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8007bf2:	40da      	lsrle	r2, r3
 8007bf4:	2201      	movgt	r2, #1
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	4619      	mov	r1, r3
 8007bfa:	4610      	mov	r0, r2
 8007bfc:	ec41 0b10 	vmov	d0, r0, r1
 8007c00:	b002      	add	sp, #8
 8007c02:	4770      	bx	lr
 8007c04:	7ff00000 	.word	0x7ff00000

08007c08 <__b2d>:
 8007c08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c0c:	6906      	ldr	r6, [r0, #16]
 8007c0e:	f100 0814 	add.w	r8, r0, #20
 8007c12:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8007c16:	1f37      	subs	r7, r6, #4
 8007c18:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007c1c:	4610      	mov	r0, r2
 8007c1e:	f7ff fd53 	bl	80076c8 <__hi0bits>
 8007c22:	f1c0 0320 	rsb	r3, r0, #32
 8007c26:	280a      	cmp	r0, #10
 8007c28:	600b      	str	r3, [r1, #0]
 8007c2a:	491b      	ldr	r1, [pc, #108]	; (8007c98 <__b2d+0x90>)
 8007c2c:	dc15      	bgt.n	8007c5a <__b2d+0x52>
 8007c2e:	f1c0 0c0b 	rsb	ip, r0, #11
 8007c32:	fa22 f30c 	lsr.w	r3, r2, ip
 8007c36:	45b8      	cmp	r8, r7
 8007c38:	ea43 0501 	orr.w	r5, r3, r1
 8007c3c:	bf34      	ite	cc
 8007c3e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007c42:	2300      	movcs	r3, #0
 8007c44:	3015      	adds	r0, #21
 8007c46:	fa02 f000 	lsl.w	r0, r2, r0
 8007c4a:	fa23 f30c 	lsr.w	r3, r3, ip
 8007c4e:	4303      	orrs	r3, r0
 8007c50:	461c      	mov	r4, r3
 8007c52:	ec45 4b10 	vmov	d0, r4, r5
 8007c56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c5a:	45b8      	cmp	r8, r7
 8007c5c:	bf3a      	itte	cc
 8007c5e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007c62:	f1a6 0708 	subcc.w	r7, r6, #8
 8007c66:	2300      	movcs	r3, #0
 8007c68:	380b      	subs	r0, #11
 8007c6a:	d012      	beq.n	8007c92 <__b2d+0x8a>
 8007c6c:	f1c0 0120 	rsb	r1, r0, #32
 8007c70:	fa23 f401 	lsr.w	r4, r3, r1
 8007c74:	4082      	lsls	r2, r0
 8007c76:	4322      	orrs	r2, r4
 8007c78:	4547      	cmp	r7, r8
 8007c7a:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8007c7e:	bf8c      	ite	hi
 8007c80:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8007c84:	2200      	movls	r2, #0
 8007c86:	4083      	lsls	r3, r0
 8007c88:	40ca      	lsrs	r2, r1
 8007c8a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	e7de      	b.n	8007c50 <__b2d+0x48>
 8007c92:	ea42 0501 	orr.w	r5, r2, r1
 8007c96:	e7db      	b.n	8007c50 <__b2d+0x48>
 8007c98:	3ff00000 	.word	0x3ff00000

08007c9c <__d2b>:
 8007c9c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007ca0:	460f      	mov	r7, r1
 8007ca2:	2101      	movs	r1, #1
 8007ca4:	ec59 8b10 	vmov	r8, r9, d0
 8007ca8:	4616      	mov	r6, r2
 8007caa:	f7ff fc1b 	bl	80074e4 <_Balloc>
 8007cae:	4604      	mov	r4, r0
 8007cb0:	b930      	cbnz	r0, 8007cc0 <__d2b+0x24>
 8007cb2:	4602      	mov	r2, r0
 8007cb4:	4b24      	ldr	r3, [pc, #144]	; (8007d48 <__d2b+0xac>)
 8007cb6:	4825      	ldr	r0, [pc, #148]	; (8007d4c <__d2b+0xb0>)
 8007cb8:	f240 310f 	movw	r1, #783	; 0x30f
 8007cbc:	f001 f92c 	bl	8008f18 <__assert_func>
 8007cc0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007cc4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007cc8:	bb2d      	cbnz	r5, 8007d16 <__d2b+0x7a>
 8007cca:	9301      	str	r3, [sp, #4]
 8007ccc:	f1b8 0300 	subs.w	r3, r8, #0
 8007cd0:	d026      	beq.n	8007d20 <__d2b+0x84>
 8007cd2:	4668      	mov	r0, sp
 8007cd4:	9300      	str	r3, [sp, #0]
 8007cd6:	f7ff fd17 	bl	8007708 <__lo0bits>
 8007cda:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007cde:	b1e8      	cbz	r0, 8007d1c <__d2b+0x80>
 8007ce0:	f1c0 0320 	rsb	r3, r0, #32
 8007ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ce8:	430b      	orrs	r3, r1
 8007cea:	40c2      	lsrs	r2, r0
 8007cec:	6163      	str	r3, [r4, #20]
 8007cee:	9201      	str	r2, [sp, #4]
 8007cf0:	9b01      	ldr	r3, [sp, #4]
 8007cf2:	61a3      	str	r3, [r4, #24]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	bf14      	ite	ne
 8007cf8:	2202      	movne	r2, #2
 8007cfa:	2201      	moveq	r2, #1
 8007cfc:	6122      	str	r2, [r4, #16]
 8007cfe:	b1bd      	cbz	r5, 8007d30 <__d2b+0x94>
 8007d00:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007d04:	4405      	add	r5, r0
 8007d06:	603d      	str	r5, [r7, #0]
 8007d08:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007d0c:	6030      	str	r0, [r6, #0]
 8007d0e:	4620      	mov	r0, r4
 8007d10:	b003      	add	sp, #12
 8007d12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007d16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007d1a:	e7d6      	b.n	8007cca <__d2b+0x2e>
 8007d1c:	6161      	str	r1, [r4, #20]
 8007d1e:	e7e7      	b.n	8007cf0 <__d2b+0x54>
 8007d20:	a801      	add	r0, sp, #4
 8007d22:	f7ff fcf1 	bl	8007708 <__lo0bits>
 8007d26:	9b01      	ldr	r3, [sp, #4]
 8007d28:	6163      	str	r3, [r4, #20]
 8007d2a:	3020      	adds	r0, #32
 8007d2c:	2201      	movs	r2, #1
 8007d2e:	e7e5      	b.n	8007cfc <__d2b+0x60>
 8007d30:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007d34:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007d38:	6038      	str	r0, [r7, #0]
 8007d3a:	6918      	ldr	r0, [r3, #16]
 8007d3c:	f7ff fcc4 	bl	80076c8 <__hi0bits>
 8007d40:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007d44:	e7e2      	b.n	8007d0c <__d2b+0x70>
 8007d46:	bf00      	nop
 8007d48:	08009f32 	.word	0x08009f32
 8007d4c:	08009f43 	.word	0x08009f43

08007d50 <__ratio>:
 8007d50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d54:	4688      	mov	r8, r1
 8007d56:	4669      	mov	r1, sp
 8007d58:	4681      	mov	r9, r0
 8007d5a:	f7ff ff55 	bl	8007c08 <__b2d>
 8007d5e:	a901      	add	r1, sp, #4
 8007d60:	4640      	mov	r0, r8
 8007d62:	ec55 4b10 	vmov	r4, r5, d0
 8007d66:	f7ff ff4f 	bl	8007c08 <__b2d>
 8007d6a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007d6e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007d72:	eba3 0c02 	sub.w	ip, r3, r2
 8007d76:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007d7a:	1a9b      	subs	r3, r3, r2
 8007d7c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007d80:	ec51 0b10 	vmov	r0, r1, d0
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	bfd6      	itet	le
 8007d88:	460a      	movle	r2, r1
 8007d8a:	462a      	movgt	r2, r5
 8007d8c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007d90:	468b      	mov	fp, r1
 8007d92:	462f      	mov	r7, r5
 8007d94:	bfd4      	ite	le
 8007d96:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8007d9a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007d9e:	4620      	mov	r0, r4
 8007da0:	ee10 2a10 	vmov	r2, s0
 8007da4:	465b      	mov	r3, fp
 8007da6:	4639      	mov	r1, r7
 8007da8:	f7f8 fd60 	bl	800086c <__aeabi_ddiv>
 8007dac:	ec41 0b10 	vmov	d0, r0, r1
 8007db0:	b003      	add	sp, #12
 8007db2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007db6 <__copybits>:
 8007db6:	3901      	subs	r1, #1
 8007db8:	b570      	push	{r4, r5, r6, lr}
 8007dba:	1149      	asrs	r1, r1, #5
 8007dbc:	6914      	ldr	r4, [r2, #16]
 8007dbe:	3101      	adds	r1, #1
 8007dc0:	f102 0314 	add.w	r3, r2, #20
 8007dc4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007dc8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007dcc:	1f05      	subs	r5, r0, #4
 8007dce:	42a3      	cmp	r3, r4
 8007dd0:	d30c      	bcc.n	8007dec <__copybits+0x36>
 8007dd2:	1aa3      	subs	r3, r4, r2
 8007dd4:	3b11      	subs	r3, #17
 8007dd6:	f023 0303 	bic.w	r3, r3, #3
 8007dda:	3211      	adds	r2, #17
 8007ddc:	42a2      	cmp	r2, r4
 8007dde:	bf88      	it	hi
 8007de0:	2300      	movhi	r3, #0
 8007de2:	4418      	add	r0, r3
 8007de4:	2300      	movs	r3, #0
 8007de6:	4288      	cmp	r0, r1
 8007de8:	d305      	bcc.n	8007df6 <__copybits+0x40>
 8007dea:	bd70      	pop	{r4, r5, r6, pc}
 8007dec:	f853 6b04 	ldr.w	r6, [r3], #4
 8007df0:	f845 6f04 	str.w	r6, [r5, #4]!
 8007df4:	e7eb      	b.n	8007dce <__copybits+0x18>
 8007df6:	f840 3b04 	str.w	r3, [r0], #4
 8007dfa:	e7f4      	b.n	8007de6 <__copybits+0x30>

08007dfc <__any_on>:
 8007dfc:	f100 0214 	add.w	r2, r0, #20
 8007e00:	6900      	ldr	r0, [r0, #16]
 8007e02:	114b      	asrs	r3, r1, #5
 8007e04:	4298      	cmp	r0, r3
 8007e06:	b510      	push	{r4, lr}
 8007e08:	db11      	blt.n	8007e2e <__any_on+0x32>
 8007e0a:	dd0a      	ble.n	8007e22 <__any_on+0x26>
 8007e0c:	f011 011f 	ands.w	r1, r1, #31
 8007e10:	d007      	beq.n	8007e22 <__any_on+0x26>
 8007e12:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007e16:	fa24 f001 	lsr.w	r0, r4, r1
 8007e1a:	fa00 f101 	lsl.w	r1, r0, r1
 8007e1e:	428c      	cmp	r4, r1
 8007e20:	d10b      	bne.n	8007e3a <__any_on+0x3e>
 8007e22:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d803      	bhi.n	8007e32 <__any_on+0x36>
 8007e2a:	2000      	movs	r0, #0
 8007e2c:	bd10      	pop	{r4, pc}
 8007e2e:	4603      	mov	r3, r0
 8007e30:	e7f7      	b.n	8007e22 <__any_on+0x26>
 8007e32:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007e36:	2900      	cmp	r1, #0
 8007e38:	d0f5      	beq.n	8007e26 <__any_on+0x2a>
 8007e3a:	2001      	movs	r0, #1
 8007e3c:	e7f6      	b.n	8007e2c <__any_on+0x30>

08007e3e <sulp>:
 8007e3e:	b570      	push	{r4, r5, r6, lr}
 8007e40:	4604      	mov	r4, r0
 8007e42:	460d      	mov	r5, r1
 8007e44:	ec45 4b10 	vmov	d0, r4, r5
 8007e48:	4616      	mov	r6, r2
 8007e4a:	f7ff feb7 	bl	8007bbc <__ulp>
 8007e4e:	ec51 0b10 	vmov	r0, r1, d0
 8007e52:	b17e      	cbz	r6, 8007e74 <sulp+0x36>
 8007e54:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007e58:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	dd09      	ble.n	8007e74 <sulp+0x36>
 8007e60:	051b      	lsls	r3, r3, #20
 8007e62:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007e66:	2400      	movs	r4, #0
 8007e68:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007e6c:	4622      	mov	r2, r4
 8007e6e:	462b      	mov	r3, r5
 8007e70:	f7f8 fbd2 	bl	8000618 <__aeabi_dmul>
 8007e74:	bd70      	pop	{r4, r5, r6, pc}
	...

08007e78 <_strtod_l>:
 8007e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e7c:	ed2d 8b02 	vpush	{d8}
 8007e80:	b09b      	sub	sp, #108	; 0x6c
 8007e82:	4604      	mov	r4, r0
 8007e84:	9213      	str	r2, [sp, #76]	; 0x4c
 8007e86:	2200      	movs	r2, #0
 8007e88:	9216      	str	r2, [sp, #88]	; 0x58
 8007e8a:	460d      	mov	r5, r1
 8007e8c:	f04f 0800 	mov.w	r8, #0
 8007e90:	f04f 0900 	mov.w	r9, #0
 8007e94:	460a      	mov	r2, r1
 8007e96:	9215      	str	r2, [sp, #84]	; 0x54
 8007e98:	7811      	ldrb	r1, [r2, #0]
 8007e9a:	292b      	cmp	r1, #43	; 0x2b
 8007e9c:	d04c      	beq.n	8007f38 <_strtod_l+0xc0>
 8007e9e:	d83a      	bhi.n	8007f16 <_strtod_l+0x9e>
 8007ea0:	290d      	cmp	r1, #13
 8007ea2:	d834      	bhi.n	8007f0e <_strtod_l+0x96>
 8007ea4:	2908      	cmp	r1, #8
 8007ea6:	d834      	bhi.n	8007f12 <_strtod_l+0x9a>
 8007ea8:	2900      	cmp	r1, #0
 8007eaa:	d03d      	beq.n	8007f28 <_strtod_l+0xb0>
 8007eac:	2200      	movs	r2, #0
 8007eae:	920a      	str	r2, [sp, #40]	; 0x28
 8007eb0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8007eb2:	7832      	ldrb	r2, [r6, #0]
 8007eb4:	2a30      	cmp	r2, #48	; 0x30
 8007eb6:	f040 80b4 	bne.w	8008022 <_strtod_l+0x1aa>
 8007eba:	7872      	ldrb	r2, [r6, #1]
 8007ebc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8007ec0:	2a58      	cmp	r2, #88	; 0x58
 8007ec2:	d170      	bne.n	8007fa6 <_strtod_l+0x12e>
 8007ec4:	9302      	str	r3, [sp, #8]
 8007ec6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ec8:	9301      	str	r3, [sp, #4]
 8007eca:	ab16      	add	r3, sp, #88	; 0x58
 8007ecc:	9300      	str	r3, [sp, #0]
 8007ece:	4a8e      	ldr	r2, [pc, #568]	; (8008108 <_strtod_l+0x290>)
 8007ed0:	ab17      	add	r3, sp, #92	; 0x5c
 8007ed2:	a915      	add	r1, sp, #84	; 0x54
 8007ed4:	4620      	mov	r0, r4
 8007ed6:	f001 f8bb 	bl	8009050 <__gethex>
 8007eda:	f010 070f 	ands.w	r7, r0, #15
 8007ede:	4605      	mov	r5, r0
 8007ee0:	d005      	beq.n	8007eee <_strtod_l+0x76>
 8007ee2:	2f06      	cmp	r7, #6
 8007ee4:	d12a      	bne.n	8007f3c <_strtod_l+0xc4>
 8007ee6:	3601      	adds	r6, #1
 8007ee8:	2300      	movs	r3, #0
 8007eea:	9615      	str	r6, [sp, #84]	; 0x54
 8007eec:	930a      	str	r3, [sp, #40]	; 0x28
 8007eee:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	f040 857f 	bne.w	80089f4 <_strtod_l+0xb7c>
 8007ef6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ef8:	b1db      	cbz	r3, 8007f32 <_strtod_l+0xba>
 8007efa:	4642      	mov	r2, r8
 8007efc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007f00:	ec43 2b10 	vmov	d0, r2, r3
 8007f04:	b01b      	add	sp, #108	; 0x6c
 8007f06:	ecbd 8b02 	vpop	{d8}
 8007f0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f0e:	2920      	cmp	r1, #32
 8007f10:	d1cc      	bne.n	8007eac <_strtod_l+0x34>
 8007f12:	3201      	adds	r2, #1
 8007f14:	e7bf      	b.n	8007e96 <_strtod_l+0x1e>
 8007f16:	292d      	cmp	r1, #45	; 0x2d
 8007f18:	d1c8      	bne.n	8007eac <_strtod_l+0x34>
 8007f1a:	2101      	movs	r1, #1
 8007f1c:	910a      	str	r1, [sp, #40]	; 0x28
 8007f1e:	1c51      	adds	r1, r2, #1
 8007f20:	9115      	str	r1, [sp, #84]	; 0x54
 8007f22:	7852      	ldrb	r2, [r2, #1]
 8007f24:	2a00      	cmp	r2, #0
 8007f26:	d1c3      	bne.n	8007eb0 <_strtod_l+0x38>
 8007f28:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007f2a:	9515      	str	r5, [sp, #84]	; 0x54
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	f040 855f 	bne.w	80089f0 <_strtod_l+0xb78>
 8007f32:	4642      	mov	r2, r8
 8007f34:	464b      	mov	r3, r9
 8007f36:	e7e3      	b.n	8007f00 <_strtod_l+0x88>
 8007f38:	2100      	movs	r1, #0
 8007f3a:	e7ef      	b.n	8007f1c <_strtod_l+0xa4>
 8007f3c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007f3e:	b13a      	cbz	r2, 8007f50 <_strtod_l+0xd8>
 8007f40:	2135      	movs	r1, #53	; 0x35
 8007f42:	a818      	add	r0, sp, #96	; 0x60
 8007f44:	f7ff ff37 	bl	8007db6 <__copybits>
 8007f48:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007f4a:	4620      	mov	r0, r4
 8007f4c:	f7ff fb0a 	bl	8007564 <_Bfree>
 8007f50:	3f01      	subs	r7, #1
 8007f52:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007f54:	2f04      	cmp	r7, #4
 8007f56:	d806      	bhi.n	8007f66 <_strtod_l+0xee>
 8007f58:	e8df f007 	tbb	[pc, r7]
 8007f5c:	201d0314 	.word	0x201d0314
 8007f60:	14          	.byte	0x14
 8007f61:	00          	.byte	0x00
 8007f62:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8007f66:	05e9      	lsls	r1, r5, #23
 8007f68:	bf48      	it	mi
 8007f6a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8007f6e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007f72:	0d1b      	lsrs	r3, r3, #20
 8007f74:	051b      	lsls	r3, r3, #20
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d1b9      	bne.n	8007eee <_strtod_l+0x76>
 8007f7a:	f7fe fb03 	bl	8006584 <__errno>
 8007f7e:	2322      	movs	r3, #34	; 0x22
 8007f80:	6003      	str	r3, [r0, #0]
 8007f82:	e7b4      	b.n	8007eee <_strtod_l+0x76>
 8007f84:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8007f88:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007f8c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007f90:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8007f94:	e7e7      	b.n	8007f66 <_strtod_l+0xee>
 8007f96:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8008110 <_strtod_l+0x298>
 8007f9a:	e7e4      	b.n	8007f66 <_strtod_l+0xee>
 8007f9c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007fa0:	f04f 38ff 	mov.w	r8, #4294967295
 8007fa4:	e7df      	b.n	8007f66 <_strtod_l+0xee>
 8007fa6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007fa8:	1c5a      	adds	r2, r3, #1
 8007faa:	9215      	str	r2, [sp, #84]	; 0x54
 8007fac:	785b      	ldrb	r3, [r3, #1]
 8007fae:	2b30      	cmp	r3, #48	; 0x30
 8007fb0:	d0f9      	beq.n	8007fa6 <_strtod_l+0x12e>
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d09b      	beq.n	8007eee <_strtod_l+0x76>
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	f04f 0a00 	mov.w	sl, #0
 8007fbc:	9304      	str	r3, [sp, #16]
 8007fbe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007fc0:	930b      	str	r3, [sp, #44]	; 0x2c
 8007fc2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8007fc6:	46d3      	mov	fp, sl
 8007fc8:	220a      	movs	r2, #10
 8007fca:	9815      	ldr	r0, [sp, #84]	; 0x54
 8007fcc:	7806      	ldrb	r6, [r0, #0]
 8007fce:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007fd2:	b2d9      	uxtb	r1, r3
 8007fd4:	2909      	cmp	r1, #9
 8007fd6:	d926      	bls.n	8008026 <_strtod_l+0x1ae>
 8007fd8:	494c      	ldr	r1, [pc, #304]	; (800810c <_strtod_l+0x294>)
 8007fda:	2201      	movs	r2, #1
 8007fdc:	f000 ff62 	bl	8008ea4 <strncmp>
 8007fe0:	2800      	cmp	r0, #0
 8007fe2:	d030      	beq.n	8008046 <_strtod_l+0x1ce>
 8007fe4:	2000      	movs	r0, #0
 8007fe6:	4632      	mov	r2, r6
 8007fe8:	9005      	str	r0, [sp, #20]
 8007fea:	465e      	mov	r6, fp
 8007fec:	4603      	mov	r3, r0
 8007fee:	2a65      	cmp	r2, #101	; 0x65
 8007ff0:	d001      	beq.n	8007ff6 <_strtod_l+0x17e>
 8007ff2:	2a45      	cmp	r2, #69	; 0x45
 8007ff4:	d113      	bne.n	800801e <_strtod_l+0x1a6>
 8007ff6:	b91e      	cbnz	r6, 8008000 <_strtod_l+0x188>
 8007ff8:	9a04      	ldr	r2, [sp, #16]
 8007ffa:	4302      	orrs	r2, r0
 8007ffc:	d094      	beq.n	8007f28 <_strtod_l+0xb0>
 8007ffe:	2600      	movs	r6, #0
 8008000:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8008002:	1c6a      	adds	r2, r5, #1
 8008004:	9215      	str	r2, [sp, #84]	; 0x54
 8008006:	786a      	ldrb	r2, [r5, #1]
 8008008:	2a2b      	cmp	r2, #43	; 0x2b
 800800a:	d074      	beq.n	80080f6 <_strtod_l+0x27e>
 800800c:	2a2d      	cmp	r2, #45	; 0x2d
 800800e:	d078      	beq.n	8008102 <_strtod_l+0x28a>
 8008010:	f04f 0c00 	mov.w	ip, #0
 8008014:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008018:	2909      	cmp	r1, #9
 800801a:	d97f      	bls.n	800811c <_strtod_l+0x2a4>
 800801c:	9515      	str	r5, [sp, #84]	; 0x54
 800801e:	2700      	movs	r7, #0
 8008020:	e09e      	b.n	8008160 <_strtod_l+0x2e8>
 8008022:	2300      	movs	r3, #0
 8008024:	e7c8      	b.n	8007fb8 <_strtod_l+0x140>
 8008026:	f1bb 0f08 	cmp.w	fp, #8
 800802a:	bfd8      	it	le
 800802c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800802e:	f100 0001 	add.w	r0, r0, #1
 8008032:	bfda      	itte	le
 8008034:	fb02 3301 	mlale	r3, r2, r1, r3
 8008038:	9309      	strle	r3, [sp, #36]	; 0x24
 800803a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800803e:	f10b 0b01 	add.w	fp, fp, #1
 8008042:	9015      	str	r0, [sp, #84]	; 0x54
 8008044:	e7c1      	b.n	8007fca <_strtod_l+0x152>
 8008046:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008048:	1c5a      	adds	r2, r3, #1
 800804a:	9215      	str	r2, [sp, #84]	; 0x54
 800804c:	785a      	ldrb	r2, [r3, #1]
 800804e:	f1bb 0f00 	cmp.w	fp, #0
 8008052:	d037      	beq.n	80080c4 <_strtod_l+0x24c>
 8008054:	9005      	str	r0, [sp, #20]
 8008056:	465e      	mov	r6, fp
 8008058:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800805c:	2b09      	cmp	r3, #9
 800805e:	d912      	bls.n	8008086 <_strtod_l+0x20e>
 8008060:	2301      	movs	r3, #1
 8008062:	e7c4      	b.n	8007fee <_strtod_l+0x176>
 8008064:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008066:	1c5a      	adds	r2, r3, #1
 8008068:	9215      	str	r2, [sp, #84]	; 0x54
 800806a:	785a      	ldrb	r2, [r3, #1]
 800806c:	3001      	adds	r0, #1
 800806e:	2a30      	cmp	r2, #48	; 0x30
 8008070:	d0f8      	beq.n	8008064 <_strtod_l+0x1ec>
 8008072:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008076:	2b08      	cmp	r3, #8
 8008078:	f200 84c1 	bhi.w	80089fe <_strtod_l+0xb86>
 800807c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800807e:	9005      	str	r0, [sp, #20]
 8008080:	2000      	movs	r0, #0
 8008082:	930b      	str	r3, [sp, #44]	; 0x2c
 8008084:	4606      	mov	r6, r0
 8008086:	3a30      	subs	r2, #48	; 0x30
 8008088:	f100 0301 	add.w	r3, r0, #1
 800808c:	d014      	beq.n	80080b8 <_strtod_l+0x240>
 800808e:	9905      	ldr	r1, [sp, #20]
 8008090:	4419      	add	r1, r3
 8008092:	9105      	str	r1, [sp, #20]
 8008094:	4633      	mov	r3, r6
 8008096:	eb00 0c06 	add.w	ip, r0, r6
 800809a:	210a      	movs	r1, #10
 800809c:	4563      	cmp	r3, ip
 800809e:	d113      	bne.n	80080c8 <_strtod_l+0x250>
 80080a0:	1833      	adds	r3, r6, r0
 80080a2:	2b08      	cmp	r3, #8
 80080a4:	f106 0601 	add.w	r6, r6, #1
 80080a8:	4406      	add	r6, r0
 80080aa:	dc1a      	bgt.n	80080e2 <_strtod_l+0x26a>
 80080ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 80080ae:	230a      	movs	r3, #10
 80080b0:	fb03 2301 	mla	r3, r3, r1, r2
 80080b4:	9309      	str	r3, [sp, #36]	; 0x24
 80080b6:	2300      	movs	r3, #0
 80080b8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80080ba:	1c51      	adds	r1, r2, #1
 80080bc:	9115      	str	r1, [sp, #84]	; 0x54
 80080be:	7852      	ldrb	r2, [r2, #1]
 80080c0:	4618      	mov	r0, r3
 80080c2:	e7c9      	b.n	8008058 <_strtod_l+0x1e0>
 80080c4:	4658      	mov	r0, fp
 80080c6:	e7d2      	b.n	800806e <_strtod_l+0x1f6>
 80080c8:	2b08      	cmp	r3, #8
 80080ca:	f103 0301 	add.w	r3, r3, #1
 80080ce:	dc03      	bgt.n	80080d8 <_strtod_l+0x260>
 80080d0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80080d2:	434f      	muls	r7, r1
 80080d4:	9709      	str	r7, [sp, #36]	; 0x24
 80080d6:	e7e1      	b.n	800809c <_strtod_l+0x224>
 80080d8:	2b10      	cmp	r3, #16
 80080da:	bfd8      	it	le
 80080dc:	fb01 fa0a 	mulle.w	sl, r1, sl
 80080e0:	e7dc      	b.n	800809c <_strtod_l+0x224>
 80080e2:	2e10      	cmp	r6, #16
 80080e4:	bfdc      	itt	le
 80080e6:	230a      	movle	r3, #10
 80080e8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 80080ec:	e7e3      	b.n	80080b6 <_strtod_l+0x23e>
 80080ee:	2300      	movs	r3, #0
 80080f0:	9305      	str	r3, [sp, #20]
 80080f2:	2301      	movs	r3, #1
 80080f4:	e780      	b.n	8007ff8 <_strtod_l+0x180>
 80080f6:	f04f 0c00 	mov.w	ip, #0
 80080fa:	1caa      	adds	r2, r5, #2
 80080fc:	9215      	str	r2, [sp, #84]	; 0x54
 80080fe:	78aa      	ldrb	r2, [r5, #2]
 8008100:	e788      	b.n	8008014 <_strtod_l+0x19c>
 8008102:	f04f 0c01 	mov.w	ip, #1
 8008106:	e7f8      	b.n	80080fa <_strtod_l+0x282>
 8008108:	0800a0a0 	.word	0x0800a0a0
 800810c:	0800a09c 	.word	0x0800a09c
 8008110:	7ff00000 	.word	0x7ff00000
 8008114:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008116:	1c51      	adds	r1, r2, #1
 8008118:	9115      	str	r1, [sp, #84]	; 0x54
 800811a:	7852      	ldrb	r2, [r2, #1]
 800811c:	2a30      	cmp	r2, #48	; 0x30
 800811e:	d0f9      	beq.n	8008114 <_strtod_l+0x29c>
 8008120:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008124:	2908      	cmp	r1, #8
 8008126:	f63f af7a 	bhi.w	800801e <_strtod_l+0x1a6>
 800812a:	3a30      	subs	r2, #48	; 0x30
 800812c:	9208      	str	r2, [sp, #32]
 800812e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008130:	920c      	str	r2, [sp, #48]	; 0x30
 8008132:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008134:	1c57      	adds	r7, r2, #1
 8008136:	9715      	str	r7, [sp, #84]	; 0x54
 8008138:	7852      	ldrb	r2, [r2, #1]
 800813a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800813e:	f1be 0f09 	cmp.w	lr, #9
 8008142:	d938      	bls.n	80081b6 <_strtod_l+0x33e>
 8008144:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008146:	1a7f      	subs	r7, r7, r1
 8008148:	2f08      	cmp	r7, #8
 800814a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800814e:	dc03      	bgt.n	8008158 <_strtod_l+0x2e0>
 8008150:	9908      	ldr	r1, [sp, #32]
 8008152:	428f      	cmp	r7, r1
 8008154:	bfa8      	it	ge
 8008156:	460f      	movge	r7, r1
 8008158:	f1bc 0f00 	cmp.w	ip, #0
 800815c:	d000      	beq.n	8008160 <_strtod_l+0x2e8>
 800815e:	427f      	negs	r7, r7
 8008160:	2e00      	cmp	r6, #0
 8008162:	d14f      	bne.n	8008204 <_strtod_l+0x38c>
 8008164:	9904      	ldr	r1, [sp, #16]
 8008166:	4301      	orrs	r1, r0
 8008168:	f47f aec1 	bne.w	8007eee <_strtod_l+0x76>
 800816c:	2b00      	cmp	r3, #0
 800816e:	f47f aedb 	bne.w	8007f28 <_strtod_l+0xb0>
 8008172:	2a69      	cmp	r2, #105	; 0x69
 8008174:	d029      	beq.n	80081ca <_strtod_l+0x352>
 8008176:	dc26      	bgt.n	80081c6 <_strtod_l+0x34e>
 8008178:	2a49      	cmp	r2, #73	; 0x49
 800817a:	d026      	beq.n	80081ca <_strtod_l+0x352>
 800817c:	2a4e      	cmp	r2, #78	; 0x4e
 800817e:	f47f aed3 	bne.w	8007f28 <_strtod_l+0xb0>
 8008182:	499b      	ldr	r1, [pc, #620]	; (80083f0 <_strtod_l+0x578>)
 8008184:	a815      	add	r0, sp, #84	; 0x54
 8008186:	f001 f9a3 	bl	80094d0 <__match>
 800818a:	2800      	cmp	r0, #0
 800818c:	f43f aecc 	beq.w	8007f28 <_strtod_l+0xb0>
 8008190:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008192:	781b      	ldrb	r3, [r3, #0]
 8008194:	2b28      	cmp	r3, #40	; 0x28
 8008196:	d12f      	bne.n	80081f8 <_strtod_l+0x380>
 8008198:	4996      	ldr	r1, [pc, #600]	; (80083f4 <_strtod_l+0x57c>)
 800819a:	aa18      	add	r2, sp, #96	; 0x60
 800819c:	a815      	add	r0, sp, #84	; 0x54
 800819e:	f001 f9ab 	bl	80094f8 <__hexnan>
 80081a2:	2805      	cmp	r0, #5
 80081a4:	d128      	bne.n	80081f8 <_strtod_l+0x380>
 80081a6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80081a8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80081ac:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80081b0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80081b4:	e69b      	b.n	8007eee <_strtod_l+0x76>
 80081b6:	9f08      	ldr	r7, [sp, #32]
 80081b8:	210a      	movs	r1, #10
 80081ba:	fb01 2107 	mla	r1, r1, r7, r2
 80081be:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80081c2:	9208      	str	r2, [sp, #32]
 80081c4:	e7b5      	b.n	8008132 <_strtod_l+0x2ba>
 80081c6:	2a6e      	cmp	r2, #110	; 0x6e
 80081c8:	e7d9      	b.n	800817e <_strtod_l+0x306>
 80081ca:	498b      	ldr	r1, [pc, #556]	; (80083f8 <_strtod_l+0x580>)
 80081cc:	a815      	add	r0, sp, #84	; 0x54
 80081ce:	f001 f97f 	bl	80094d0 <__match>
 80081d2:	2800      	cmp	r0, #0
 80081d4:	f43f aea8 	beq.w	8007f28 <_strtod_l+0xb0>
 80081d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80081da:	4988      	ldr	r1, [pc, #544]	; (80083fc <_strtod_l+0x584>)
 80081dc:	3b01      	subs	r3, #1
 80081de:	a815      	add	r0, sp, #84	; 0x54
 80081e0:	9315      	str	r3, [sp, #84]	; 0x54
 80081e2:	f001 f975 	bl	80094d0 <__match>
 80081e6:	b910      	cbnz	r0, 80081ee <_strtod_l+0x376>
 80081e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80081ea:	3301      	adds	r3, #1
 80081ec:	9315      	str	r3, [sp, #84]	; 0x54
 80081ee:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800840c <_strtod_l+0x594>
 80081f2:	f04f 0800 	mov.w	r8, #0
 80081f6:	e67a      	b.n	8007eee <_strtod_l+0x76>
 80081f8:	4881      	ldr	r0, [pc, #516]	; (8008400 <_strtod_l+0x588>)
 80081fa:	f000 fe85 	bl	8008f08 <nan>
 80081fe:	ec59 8b10 	vmov	r8, r9, d0
 8008202:	e674      	b.n	8007eee <_strtod_l+0x76>
 8008204:	9b05      	ldr	r3, [sp, #20]
 8008206:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008208:	1afb      	subs	r3, r7, r3
 800820a:	f1bb 0f00 	cmp.w	fp, #0
 800820e:	bf08      	it	eq
 8008210:	46b3      	moveq	fp, r6
 8008212:	2e10      	cmp	r6, #16
 8008214:	9308      	str	r3, [sp, #32]
 8008216:	4635      	mov	r5, r6
 8008218:	bfa8      	it	ge
 800821a:	2510      	movge	r5, #16
 800821c:	f7f8 f982 	bl	8000524 <__aeabi_ui2d>
 8008220:	2e09      	cmp	r6, #9
 8008222:	4680      	mov	r8, r0
 8008224:	4689      	mov	r9, r1
 8008226:	dd13      	ble.n	8008250 <_strtod_l+0x3d8>
 8008228:	4b76      	ldr	r3, [pc, #472]	; (8008404 <_strtod_l+0x58c>)
 800822a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800822e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008232:	f7f8 f9f1 	bl	8000618 <__aeabi_dmul>
 8008236:	4680      	mov	r8, r0
 8008238:	4650      	mov	r0, sl
 800823a:	4689      	mov	r9, r1
 800823c:	f7f8 f972 	bl	8000524 <__aeabi_ui2d>
 8008240:	4602      	mov	r2, r0
 8008242:	460b      	mov	r3, r1
 8008244:	4640      	mov	r0, r8
 8008246:	4649      	mov	r1, r9
 8008248:	f7f8 f830 	bl	80002ac <__adddf3>
 800824c:	4680      	mov	r8, r0
 800824e:	4689      	mov	r9, r1
 8008250:	2e0f      	cmp	r6, #15
 8008252:	dc38      	bgt.n	80082c6 <_strtod_l+0x44e>
 8008254:	9b08      	ldr	r3, [sp, #32]
 8008256:	2b00      	cmp	r3, #0
 8008258:	f43f ae49 	beq.w	8007eee <_strtod_l+0x76>
 800825c:	dd24      	ble.n	80082a8 <_strtod_l+0x430>
 800825e:	2b16      	cmp	r3, #22
 8008260:	dc0b      	bgt.n	800827a <_strtod_l+0x402>
 8008262:	4968      	ldr	r1, [pc, #416]	; (8008404 <_strtod_l+0x58c>)
 8008264:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008268:	e9d1 0100 	ldrd	r0, r1, [r1]
 800826c:	4642      	mov	r2, r8
 800826e:	464b      	mov	r3, r9
 8008270:	f7f8 f9d2 	bl	8000618 <__aeabi_dmul>
 8008274:	4680      	mov	r8, r0
 8008276:	4689      	mov	r9, r1
 8008278:	e639      	b.n	8007eee <_strtod_l+0x76>
 800827a:	9a08      	ldr	r2, [sp, #32]
 800827c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8008280:	4293      	cmp	r3, r2
 8008282:	db20      	blt.n	80082c6 <_strtod_l+0x44e>
 8008284:	4c5f      	ldr	r4, [pc, #380]	; (8008404 <_strtod_l+0x58c>)
 8008286:	f1c6 060f 	rsb	r6, r6, #15
 800828a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800828e:	4642      	mov	r2, r8
 8008290:	464b      	mov	r3, r9
 8008292:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008296:	f7f8 f9bf 	bl	8000618 <__aeabi_dmul>
 800829a:	9b08      	ldr	r3, [sp, #32]
 800829c:	1b9e      	subs	r6, r3, r6
 800829e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80082a2:	e9d4 2300 	ldrd	r2, r3, [r4]
 80082a6:	e7e3      	b.n	8008270 <_strtod_l+0x3f8>
 80082a8:	9b08      	ldr	r3, [sp, #32]
 80082aa:	3316      	adds	r3, #22
 80082ac:	db0b      	blt.n	80082c6 <_strtod_l+0x44e>
 80082ae:	9b05      	ldr	r3, [sp, #20]
 80082b0:	1bdf      	subs	r7, r3, r7
 80082b2:	4b54      	ldr	r3, [pc, #336]	; (8008404 <_strtod_l+0x58c>)
 80082b4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80082b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082bc:	4640      	mov	r0, r8
 80082be:	4649      	mov	r1, r9
 80082c0:	f7f8 fad4 	bl	800086c <__aeabi_ddiv>
 80082c4:	e7d6      	b.n	8008274 <_strtod_l+0x3fc>
 80082c6:	9b08      	ldr	r3, [sp, #32]
 80082c8:	1b75      	subs	r5, r6, r5
 80082ca:	441d      	add	r5, r3
 80082cc:	2d00      	cmp	r5, #0
 80082ce:	dd70      	ble.n	80083b2 <_strtod_l+0x53a>
 80082d0:	f015 030f 	ands.w	r3, r5, #15
 80082d4:	d00a      	beq.n	80082ec <_strtod_l+0x474>
 80082d6:	494b      	ldr	r1, [pc, #300]	; (8008404 <_strtod_l+0x58c>)
 80082d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80082dc:	4642      	mov	r2, r8
 80082de:	464b      	mov	r3, r9
 80082e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80082e4:	f7f8 f998 	bl	8000618 <__aeabi_dmul>
 80082e8:	4680      	mov	r8, r0
 80082ea:	4689      	mov	r9, r1
 80082ec:	f035 050f 	bics.w	r5, r5, #15
 80082f0:	d04d      	beq.n	800838e <_strtod_l+0x516>
 80082f2:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 80082f6:	dd22      	ble.n	800833e <_strtod_l+0x4c6>
 80082f8:	2500      	movs	r5, #0
 80082fa:	46ab      	mov	fp, r5
 80082fc:	9509      	str	r5, [sp, #36]	; 0x24
 80082fe:	9505      	str	r5, [sp, #20]
 8008300:	2322      	movs	r3, #34	; 0x22
 8008302:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800840c <_strtod_l+0x594>
 8008306:	6023      	str	r3, [r4, #0]
 8008308:	f04f 0800 	mov.w	r8, #0
 800830c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800830e:	2b00      	cmp	r3, #0
 8008310:	f43f aded 	beq.w	8007eee <_strtod_l+0x76>
 8008314:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008316:	4620      	mov	r0, r4
 8008318:	f7ff f924 	bl	8007564 <_Bfree>
 800831c:	9905      	ldr	r1, [sp, #20]
 800831e:	4620      	mov	r0, r4
 8008320:	f7ff f920 	bl	8007564 <_Bfree>
 8008324:	4659      	mov	r1, fp
 8008326:	4620      	mov	r0, r4
 8008328:	f7ff f91c 	bl	8007564 <_Bfree>
 800832c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800832e:	4620      	mov	r0, r4
 8008330:	f7ff f918 	bl	8007564 <_Bfree>
 8008334:	4629      	mov	r1, r5
 8008336:	4620      	mov	r0, r4
 8008338:	f7ff f914 	bl	8007564 <_Bfree>
 800833c:	e5d7      	b.n	8007eee <_strtod_l+0x76>
 800833e:	4b32      	ldr	r3, [pc, #200]	; (8008408 <_strtod_l+0x590>)
 8008340:	9304      	str	r3, [sp, #16]
 8008342:	2300      	movs	r3, #0
 8008344:	112d      	asrs	r5, r5, #4
 8008346:	4640      	mov	r0, r8
 8008348:	4649      	mov	r1, r9
 800834a:	469a      	mov	sl, r3
 800834c:	2d01      	cmp	r5, #1
 800834e:	dc21      	bgt.n	8008394 <_strtod_l+0x51c>
 8008350:	b10b      	cbz	r3, 8008356 <_strtod_l+0x4de>
 8008352:	4680      	mov	r8, r0
 8008354:	4689      	mov	r9, r1
 8008356:	492c      	ldr	r1, [pc, #176]	; (8008408 <_strtod_l+0x590>)
 8008358:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800835c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008360:	4642      	mov	r2, r8
 8008362:	464b      	mov	r3, r9
 8008364:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008368:	f7f8 f956 	bl	8000618 <__aeabi_dmul>
 800836c:	4b27      	ldr	r3, [pc, #156]	; (800840c <_strtod_l+0x594>)
 800836e:	460a      	mov	r2, r1
 8008370:	400b      	ands	r3, r1
 8008372:	4927      	ldr	r1, [pc, #156]	; (8008410 <_strtod_l+0x598>)
 8008374:	428b      	cmp	r3, r1
 8008376:	4680      	mov	r8, r0
 8008378:	d8be      	bhi.n	80082f8 <_strtod_l+0x480>
 800837a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800837e:	428b      	cmp	r3, r1
 8008380:	bf86      	itte	hi
 8008382:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8008414 <_strtod_l+0x59c>
 8008386:	f04f 38ff 	movhi.w	r8, #4294967295
 800838a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800838e:	2300      	movs	r3, #0
 8008390:	9304      	str	r3, [sp, #16]
 8008392:	e07b      	b.n	800848c <_strtod_l+0x614>
 8008394:	07ea      	lsls	r2, r5, #31
 8008396:	d505      	bpl.n	80083a4 <_strtod_l+0x52c>
 8008398:	9b04      	ldr	r3, [sp, #16]
 800839a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800839e:	f7f8 f93b 	bl	8000618 <__aeabi_dmul>
 80083a2:	2301      	movs	r3, #1
 80083a4:	9a04      	ldr	r2, [sp, #16]
 80083a6:	3208      	adds	r2, #8
 80083a8:	f10a 0a01 	add.w	sl, sl, #1
 80083ac:	106d      	asrs	r5, r5, #1
 80083ae:	9204      	str	r2, [sp, #16]
 80083b0:	e7cc      	b.n	800834c <_strtod_l+0x4d4>
 80083b2:	d0ec      	beq.n	800838e <_strtod_l+0x516>
 80083b4:	426d      	negs	r5, r5
 80083b6:	f015 020f 	ands.w	r2, r5, #15
 80083ba:	d00a      	beq.n	80083d2 <_strtod_l+0x55a>
 80083bc:	4b11      	ldr	r3, [pc, #68]	; (8008404 <_strtod_l+0x58c>)
 80083be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80083c2:	4640      	mov	r0, r8
 80083c4:	4649      	mov	r1, r9
 80083c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ca:	f7f8 fa4f 	bl	800086c <__aeabi_ddiv>
 80083ce:	4680      	mov	r8, r0
 80083d0:	4689      	mov	r9, r1
 80083d2:	112d      	asrs	r5, r5, #4
 80083d4:	d0db      	beq.n	800838e <_strtod_l+0x516>
 80083d6:	2d1f      	cmp	r5, #31
 80083d8:	dd1e      	ble.n	8008418 <_strtod_l+0x5a0>
 80083da:	2500      	movs	r5, #0
 80083dc:	46ab      	mov	fp, r5
 80083de:	9509      	str	r5, [sp, #36]	; 0x24
 80083e0:	9505      	str	r5, [sp, #20]
 80083e2:	2322      	movs	r3, #34	; 0x22
 80083e4:	f04f 0800 	mov.w	r8, #0
 80083e8:	f04f 0900 	mov.w	r9, #0
 80083ec:	6023      	str	r3, [r4, #0]
 80083ee:	e78d      	b.n	800830c <_strtod_l+0x494>
 80083f0:	08009e8a 	.word	0x08009e8a
 80083f4:	0800a0b4 	.word	0x0800a0b4
 80083f8:	08009e82 	.word	0x08009e82
 80083fc:	08009eb9 	.word	0x08009eb9
 8008400:	0800a144 	.word	0x0800a144
 8008404:	08009fc8 	.word	0x08009fc8
 8008408:	08009fa0 	.word	0x08009fa0
 800840c:	7ff00000 	.word	0x7ff00000
 8008410:	7ca00000 	.word	0x7ca00000
 8008414:	7fefffff 	.word	0x7fefffff
 8008418:	f015 0310 	ands.w	r3, r5, #16
 800841c:	bf18      	it	ne
 800841e:	236a      	movne	r3, #106	; 0x6a
 8008420:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 80087c4 <_strtod_l+0x94c>
 8008424:	9304      	str	r3, [sp, #16]
 8008426:	4640      	mov	r0, r8
 8008428:	4649      	mov	r1, r9
 800842a:	2300      	movs	r3, #0
 800842c:	07ea      	lsls	r2, r5, #31
 800842e:	d504      	bpl.n	800843a <_strtod_l+0x5c2>
 8008430:	e9da 2300 	ldrd	r2, r3, [sl]
 8008434:	f7f8 f8f0 	bl	8000618 <__aeabi_dmul>
 8008438:	2301      	movs	r3, #1
 800843a:	106d      	asrs	r5, r5, #1
 800843c:	f10a 0a08 	add.w	sl, sl, #8
 8008440:	d1f4      	bne.n	800842c <_strtod_l+0x5b4>
 8008442:	b10b      	cbz	r3, 8008448 <_strtod_l+0x5d0>
 8008444:	4680      	mov	r8, r0
 8008446:	4689      	mov	r9, r1
 8008448:	9b04      	ldr	r3, [sp, #16]
 800844a:	b1bb      	cbz	r3, 800847c <_strtod_l+0x604>
 800844c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8008450:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008454:	2b00      	cmp	r3, #0
 8008456:	4649      	mov	r1, r9
 8008458:	dd10      	ble.n	800847c <_strtod_l+0x604>
 800845a:	2b1f      	cmp	r3, #31
 800845c:	f340 811e 	ble.w	800869c <_strtod_l+0x824>
 8008460:	2b34      	cmp	r3, #52	; 0x34
 8008462:	bfde      	ittt	le
 8008464:	f04f 33ff 	movle.w	r3, #4294967295
 8008468:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800846c:	4093      	lslle	r3, r2
 800846e:	f04f 0800 	mov.w	r8, #0
 8008472:	bfcc      	ite	gt
 8008474:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8008478:	ea03 0901 	andle.w	r9, r3, r1
 800847c:	2200      	movs	r2, #0
 800847e:	2300      	movs	r3, #0
 8008480:	4640      	mov	r0, r8
 8008482:	4649      	mov	r1, r9
 8008484:	f7f8 fb30 	bl	8000ae8 <__aeabi_dcmpeq>
 8008488:	2800      	cmp	r0, #0
 800848a:	d1a6      	bne.n	80083da <_strtod_l+0x562>
 800848c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800848e:	9300      	str	r3, [sp, #0]
 8008490:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008492:	4633      	mov	r3, r6
 8008494:	465a      	mov	r2, fp
 8008496:	4620      	mov	r0, r4
 8008498:	f7ff f8cc 	bl	8007634 <__s2b>
 800849c:	9009      	str	r0, [sp, #36]	; 0x24
 800849e:	2800      	cmp	r0, #0
 80084a0:	f43f af2a 	beq.w	80082f8 <_strtod_l+0x480>
 80084a4:	9a08      	ldr	r2, [sp, #32]
 80084a6:	9b05      	ldr	r3, [sp, #20]
 80084a8:	2a00      	cmp	r2, #0
 80084aa:	eba3 0307 	sub.w	r3, r3, r7
 80084ae:	bfa8      	it	ge
 80084b0:	2300      	movge	r3, #0
 80084b2:	930c      	str	r3, [sp, #48]	; 0x30
 80084b4:	2500      	movs	r5, #0
 80084b6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80084ba:	9312      	str	r3, [sp, #72]	; 0x48
 80084bc:	46ab      	mov	fp, r5
 80084be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084c0:	4620      	mov	r0, r4
 80084c2:	6859      	ldr	r1, [r3, #4]
 80084c4:	f7ff f80e 	bl	80074e4 <_Balloc>
 80084c8:	9005      	str	r0, [sp, #20]
 80084ca:	2800      	cmp	r0, #0
 80084cc:	f43f af18 	beq.w	8008300 <_strtod_l+0x488>
 80084d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084d2:	691a      	ldr	r2, [r3, #16]
 80084d4:	3202      	adds	r2, #2
 80084d6:	f103 010c 	add.w	r1, r3, #12
 80084da:	0092      	lsls	r2, r2, #2
 80084dc:	300c      	adds	r0, #12
 80084de:	f000 fd03 	bl	8008ee8 <memcpy>
 80084e2:	ec49 8b10 	vmov	d0, r8, r9
 80084e6:	aa18      	add	r2, sp, #96	; 0x60
 80084e8:	a917      	add	r1, sp, #92	; 0x5c
 80084ea:	4620      	mov	r0, r4
 80084ec:	f7ff fbd6 	bl	8007c9c <__d2b>
 80084f0:	ec49 8b18 	vmov	d8, r8, r9
 80084f4:	9016      	str	r0, [sp, #88]	; 0x58
 80084f6:	2800      	cmp	r0, #0
 80084f8:	f43f af02 	beq.w	8008300 <_strtod_l+0x488>
 80084fc:	2101      	movs	r1, #1
 80084fe:	4620      	mov	r0, r4
 8008500:	f7ff f930 	bl	8007764 <__i2b>
 8008504:	4683      	mov	fp, r0
 8008506:	2800      	cmp	r0, #0
 8008508:	f43f aefa 	beq.w	8008300 <_strtod_l+0x488>
 800850c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800850e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008510:	2e00      	cmp	r6, #0
 8008512:	bfab      	itete	ge
 8008514:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8008516:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8008518:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800851a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800851e:	bfac      	ite	ge
 8008520:	eb06 0a03 	addge.w	sl, r6, r3
 8008524:	1b9f      	sublt	r7, r3, r6
 8008526:	9b04      	ldr	r3, [sp, #16]
 8008528:	1af6      	subs	r6, r6, r3
 800852a:	4416      	add	r6, r2
 800852c:	4ba0      	ldr	r3, [pc, #640]	; (80087b0 <_strtod_l+0x938>)
 800852e:	3e01      	subs	r6, #1
 8008530:	429e      	cmp	r6, r3
 8008532:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008536:	f280 80c4 	bge.w	80086c2 <_strtod_l+0x84a>
 800853a:	1b9b      	subs	r3, r3, r6
 800853c:	2b1f      	cmp	r3, #31
 800853e:	eba2 0203 	sub.w	r2, r2, r3
 8008542:	f04f 0101 	mov.w	r1, #1
 8008546:	f300 80b0 	bgt.w	80086aa <_strtod_l+0x832>
 800854a:	fa01 f303 	lsl.w	r3, r1, r3
 800854e:	930e      	str	r3, [sp, #56]	; 0x38
 8008550:	2300      	movs	r3, #0
 8008552:	930d      	str	r3, [sp, #52]	; 0x34
 8008554:	eb0a 0602 	add.w	r6, sl, r2
 8008558:	9b04      	ldr	r3, [sp, #16]
 800855a:	45b2      	cmp	sl, r6
 800855c:	4417      	add	r7, r2
 800855e:	441f      	add	r7, r3
 8008560:	4653      	mov	r3, sl
 8008562:	bfa8      	it	ge
 8008564:	4633      	movge	r3, r6
 8008566:	42bb      	cmp	r3, r7
 8008568:	bfa8      	it	ge
 800856a:	463b      	movge	r3, r7
 800856c:	2b00      	cmp	r3, #0
 800856e:	bfc2      	ittt	gt
 8008570:	1af6      	subgt	r6, r6, r3
 8008572:	1aff      	subgt	r7, r7, r3
 8008574:	ebaa 0a03 	subgt.w	sl, sl, r3
 8008578:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800857a:	2b00      	cmp	r3, #0
 800857c:	dd17      	ble.n	80085ae <_strtod_l+0x736>
 800857e:	4659      	mov	r1, fp
 8008580:	461a      	mov	r2, r3
 8008582:	4620      	mov	r0, r4
 8008584:	f7ff f9ae 	bl	80078e4 <__pow5mult>
 8008588:	4683      	mov	fp, r0
 800858a:	2800      	cmp	r0, #0
 800858c:	f43f aeb8 	beq.w	8008300 <_strtod_l+0x488>
 8008590:	4601      	mov	r1, r0
 8008592:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008594:	4620      	mov	r0, r4
 8008596:	f7ff f8fb 	bl	8007790 <__multiply>
 800859a:	900b      	str	r0, [sp, #44]	; 0x2c
 800859c:	2800      	cmp	r0, #0
 800859e:	f43f aeaf 	beq.w	8008300 <_strtod_l+0x488>
 80085a2:	9916      	ldr	r1, [sp, #88]	; 0x58
 80085a4:	4620      	mov	r0, r4
 80085a6:	f7fe ffdd 	bl	8007564 <_Bfree>
 80085aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085ac:	9316      	str	r3, [sp, #88]	; 0x58
 80085ae:	2e00      	cmp	r6, #0
 80085b0:	f300 808c 	bgt.w	80086cc <_strtod_l+0x854>
 80085b4:	9b08      	ldr	r3, [sp, #32]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	dd08      	ble.n	80085cc <_strtod_l+0x754>
 80085ba:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80085bc:	9905      	ldr	r1, [sp, #20]
 80085be:	4620      	mov	r0, r4
 80085c0:	f7ff f990 	bl	80078e4 <__pow5mult>
 80085c4:	9005      	str	r0, [sp, #20]
 80085c6:	2800      	cmp	r0, #0
 80085c8:	f43f ae9a 	beq.w	8008300 <_strtod_l+0x488>
 80085cc:	2f00      	cmp	r7, #0
 80085ce:	dd08      	ble.n	80085e2 <_strtod_l+0x76a>
 80085d0:	9905      	ldr	r1, [sp, #20]
 80085d2:	463a      	mov	r2, r7
 80085d4:	4620      	mov	r0, r4
 80085d6:	f7ff f9df 	bl	8007998 <__lshift>
 80085da:	9005      	str	r0, [sp, #20]
 80085dc:	2800      	cmp	r0, #0
 80085de:	f43f ae8f 	beq.w	8008300 <_strtod_l+0x488>
 80085e2:	f1ba 0f00 	cmp.w	sl, #0
 80085e6:	dd08      	ble.n	80085fa <_strtod_l+0x782>
 80085e8:	4659      	mov	r1, fp
 80085ea:	4652      	mov	r2, sl
 80085ec:	4620      	mov	r0, r4
 80085ee:	f7ff f9d3 	bl	8007998 <__lshift>
 80085f2:	4683      	mov	fp, r0
 80085f4:	2800      	cmp	r0, #0
 80085f6:	f43f ae83 	beq.w	8008300 <_strtod_l+0x488>
 80085fa:	9a05      	ldr	r2, [sp, #20]
 80085fc:	9916      	ldr	r1, [sp, #88]	; 0x58
 80085fe:	4620      	mov	r0, r4
 8008600:	f7ff fa52 	bl	8007aa8 <__mdiff>
 8008604:	4605      	mov	r5, r0
 8008606:	2800      	cmp	r0, #0
 8008608:	f43f ae7a 	beq.w	8008300 <_strtod_l+0x488>
 800860c:	68c3      	ldr	r3, [r0, #12]
 800860e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008610:	2300      	movs	r3, #0
 8008612:	60c3      	str	r3, [r0, #12]
 8008614:	4659      	mov	r1, fp
 8008616:	f7ff fa2b 	bl	8007a70 <__mcmp>
 800861a:	2800      	cmp	r0, #0
 800861c:	da60      	bge.n	80086e0 <_strtod_l+0x868>
 800861e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008620:	ea53 0308 	orrs.w	r3, r3, r8
 8008624:	f040 8084 	bne.w	8008730 <_strtod_l+0x8b8>
 8008628:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800862c:	2b00      	cmp	r3, #0
 800862e:	d17f      	bne.n	8008730 <_strtod_l+0x8b8>
 8008630:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008634:	0d1b      	lsrs	r3, r3, #20
 8008636:	051b      	lsls	r3, r3, #20
 8008638:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800863c:	d978      	bls.n	8008730 <_strtod_l+0x8b8>
 800863e:	696b      	ldr	r3, [r5, #20]
 8008640:	b913      	cbnz	r3, 8008648 <_strtod_l+0x7d0>
 8008642:	692b      	ldr	r3, [r5, #16]
 8008644:	2b01      	cmp	r3, #1
 8008646:	dd73      	ble.n	8008730 <_strtod_l+0x8b8>
 8008648:	4629      	mov	r1, r5
 800864a:	2201      	movs	r2, #1
 800864c:	4620      	mov	r0, r4
 800864e:	f7ff f9a3 	bl	8007998 <__lshift>
 8008652:	4659      	mov	r1, fp
 8008654:	4605      	mov	r5, r0
 8008656:	f7ff fa0b 	bl	8007a70 <__mcmp>
 800865a:	2800      	cmp	r0, #0
 800865c:	dd68      	ble.n	8008730 <_strtod_l+0x8b8>
 800865e:	9904      	ldr	r1, [sp, #16]
 8008660:	4a54      	ldr	r2, [pc, #336]	; (80087b4 <_strtod_l+0x93c>)
 8008662:	464b      	mov	r3, r9
 8008664:	2900      	cmp	r1, #0
 8008666:	f000 8084 	beq.w	8008772 <_strtod_l+0x8fa>
 800866a:	ea02 0109 	and.w	r1, r2, r9
 800866e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008672:	dc7e      	bgt.n	8008772 <_strtod_l+0x8fa>
 8008674:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008678:	f77f aeb3 	ble.w	80083e2 <_strtod_l+0x56a>
 800867c:	4b4e      	ldr	r3, [pc, #312]	; (80087b8 <_strtod_l+0x940>)
 800867e:	4640      	mov	r0, r8
 8008680:	4649      	mov	r1, r9
 8008682:	2200      	movs	r2, #0
 8008684:	f7f7 ffc8 	bl	8000618 <__aeabi_dmul>
 8008688:	4b4a      	ldr	r3, [pc, #296]	; (80087b4 <_strtod_l+0x93c>)
 800868a:	400b      	ands	r3, r1
 800868c:	4680      	mov	r8, r0
 800868e:	4689      	mov	r9, r1
 8008690:	2b00      	cmp	r3, #0
 8008692:	f47f ae3f 	bne.w	8008314 <_strtod_l+0x49c>
 8008696:	2322      	movs	r3, #34	; 0x22
 8008698:	6023      	str	r3, [r4, #0]
 800869a:	e63b      	b.n	8008314 <_strtod_l+0x49c>
 800869c:	f04f 32ff 	mov.w	r2, #4294967295
 80086a0:	fa02 f303 	lsl.w	r3, r2, r3
 80086a4:	ea03 0808 	and.w	r8, r3, r8
 80086a8:	e6e8      	b.n	800847c <_strtod_l+0x604>
 80086aa:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80086ae:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80086b2:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80086b6:	36e2      	adds	r6, #226	; 0xe2
 80086b8:	fa01 f306 	lsl.w	r3, r1, r6
 80086bc:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 80086c0:	e748      	b.n	8008554 <_strtod_l+0x6dc>
 80086c2:	2100      	movs	r1, #0
 80086c4:	2301      	movs	r3, #1
 80086c6:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 80086ca:	e743      	b.n	8008554 <_strtod_l+0x6dc>
 80086cc:	9916      	ldr	r1, [sp, #88]	; 0x58
 80086ce:	4632      	mov	r2, r6
 80086d0:	4620      	mov	r0, r4
 80086d2:	f7ff f961 	bl	8007998 <__lshift>
 80086d6:	9016      	str	r0, [sp, #88]	; 0x58
 80086d8:	2800      	cmp	r0, #0
 80086da:	f47f af6b 	bne.w	80085b4 <_strtod_l+0x73c>
 80086de:	e60f      	b.n	8008300 <_strtod_l+0x488>
 80086e0:	46ca      	mov	sl, r9
 80086e2:	d171      	bne.n	80087c8 <_strtod_l+0x950>
 80086e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80086e6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80086ea:	b352      	cbz	r2, 8008742 <_strtod_l+0x8ca>
 80086ec:	4a33      	ldr	r2, [pc, #204]	; (80087bc <_strtod_l+0x944>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d12a      	bne.n	8008748 <_strtod_l+0x8d0>
 80086f2:	9b04      	ldr	r3, [sp, #16]
 80086f4:	4641      	mov	r1, r8
 80086f6:	b1fb      	cbz	r3, 8008738 <_strtod_l+0x8c0>
 80086f8:	4b2e      	ldr	r3, [pc, #184]	; (80087b4 <_strtod_l+0x93c>)
 80086fa:	ea09 0303 	and.w	r3, r9, r3
 80086fe:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008702:	f04f 32ff 	mov.w	r2, #4294967295
 8008706:	d81a      	bhi.n	800873e <_strtod_l+0x8c6>
 8008708:	0d1b      	lsrs	r3, r3, #20
 800870a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800870e:	fa02 f303 	lsl.w	r3, r2, r3
 8008712:	4299      	cmp	r1, r3
 8008714:	d118      	bne.n	8008748 <_strtod_l+0x8d0>
 8008716:	4b2a      	ldr	r3, [pc, #168]	; (80087c0 <_strtod_l+0x948>)
 8008718:	459a      	cmp	sl, r3
 800871a:	d102      	bne.n	8008722 <_strtod_l+0x8aa>
 800871c:	3101      	adds	r1, #1
 800871e:	f43f adef 	beq.w	8008300 <_strtod_l+0x488>
 8008722:	4b24      	ldr	r3, [pc, #144]	; (80087b4 <_strtod_l+0x93c>)
 8008724:	ea0a 0303 	and.w	r3, sl, r3
 8008728:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800872c:	f04f 0800 	mov.w	r8, #0
 8008730:	9b04      	ldr	r3, [sp, #16]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d1a2      	bne.n	800867c <_strtod_l+0x804>
 8008736:	e5ed      	b.n	8008314 <_strtod_l+0x49c>
 8008738:	f04f 33ff 	mov.w	r3, #4294967295
 800873c:	e7e9      	b.n	8008712 <_strtod_l+0x89a>
 800873e:	4613      	mov	r3, r2
 8008740:	e7e7      	b.n	8008712 <_strtod_l+0x89a>
 8008742:	ea53 0308 	orrs.w	r3, r3, r8
 8008746:	d08a      	beq.n	800865e <_strtod_l+0x7e6>
 8008748:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800874a:	b1e3      	cbz	r3, 8008786 <_strtod_l+0x90e>
 800874c:	ea13 0f0a 	tst.w	r3, sl
 8008750:	d0ee      	beq.n	8008730 <_strtod_l+0x8b8>
 8008752:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008754:	9a04      	ldr	r2, [sp, #16]
 8008756:	4640      	mov	r0, r8
 8008758:	4649      	mov	r1, r9
 800875a:	b1c3      	cbz	r3, 800878e <_strtod_l+0x916>
 800875c:	f7ff fb6f 	bl	8007e3e <sulp>
 8008760:	4602      	mov	r2, r0
 8008762:	460b      	mov	r3, r1
 8008764:	ec51 0b18 	vmov	r0, r1, d8
 8008768:	f7f7 fda0 	bl	80002ac <__adddf3>
 800876c:	4680      	mov	r8, r0
 800876e:	4689      	mov	r9, r1
 8008770:	e7de      	b.n	8008730 <_strtod_l+0x8b8>
 8008772:	4013      	ands	r3, r2
 8008774:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008778:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800877c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8008780:	f04f 38ff 	mov.w	r8, #4294967295
 8008784:	e7d4      	b.n	8008730 <_strtod_l+0x8b8>
 8008786:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008788:	ea13 0f08 	tst.w	r3, r8
 800878c:	e7e0      	b.n	8008750 <_strtod_l+0x8d8>
 800878e:	f7ff fb56 	bl	8007e3e <sulp>
 8008792:	4602      	mov	r2, r0
 8008794:	460b      	mov	r3, r1
 8008796:	ec51 0b18 	vmov	r0, r1, d8
 800879a:	f7f7 fd85 	bl	80002a8 <__aeabi_dsub>
 800879e:	2200      	movs	r2, #0
 80087a0:	2300      	movs	r3, #0
 80087a2:	4680      	mov	r8, r0
 80087a4:	4689      	mov	r9, r1
 80087a6:	f7f8 f99f 	bl	8000ae8 <__aeabi_dcmpeq>
 80087aa:	2800      	cmp	r0, #0
 80087ac:	d0c0      	beq.n	8008730 <_strtod_l+0x8b8>
 80087ae:	e618      	b.n	80083e2 <_strtod_l+0x56a>
 80087b0:	fffffc02 	.word	0xfffffc02
 80087b4:	7ff00000 	.word	0x7ff00000
 80087b8:	39500000 	.word	0x39500000
 80087bc:	000fffff 	.word	0x000fffff
 80087c0:	7fefffff 	.word	0x7fefffff
 80087c4:	0800a0c8 	.word	0x0800a0c8
 80087c8:	4659      	mov	r1, fp
 80087ca:	4628      	mov	r0, r5
 80087cc:	f7ff fac0 	bl	8007d50 <__ratio>
 80087d0:	ec57 6b10 	vmov	r6, r7, d0
 80087d4:	ee10 0a10 	vmov	r0, s0
 80087d8:	2200      	movs	r2, #0
 80087da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80087de:	4639      	mov	r1, r7
 80087e0:	f7f8 f996 	bl	8000b10 <__aeabi_dcmple>
 80087e4:	2800      	cmp	r0, #0
 80087e6:	d071      	beq.n	80088cc <_strtod_l+0xa54>
 80087e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d17c      	bne.n	80088e8 <_strtod_l+0xa70>
 80087ee:	f1b8 0f00 	cmp.w	r8, #0
 80087f2:	d15a      	bne.n	80088aa <_strtod_l+0xa32>
 80087f4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d15d      	bne.n	80088b8 <_strtod_l+0xa40>
 80087fc:	4b90      	ldr	r3, [pc, #576]	; (8008a40 <_strtod_l+0xbc8>)
 80087fe:	2200      	movs	r2, #0
 8008800:	4630      	mov	r0, r6
 8008802:	4639      	mov	r1, r7
 8008804:	f7f8 f97a 	bl	8000afc <__aeabi_dcmplt>
 8008808:	2800      	cmp	r0, #0
 800880a:	d15c      	bne.n	80088c6 <_strtod_l+0xa4e>
 800880c:	4630      	mov	r0, r6
 800880e:	4639      	mov	r1, r7
 8008810:	4b8c      	ldr	r3, [pc, #560]	; (8008a44 <_strtod_l+0xbcc>)
 8008812:	2200      	movs	r2, #0
 8008814:	f7f7 ff00 	bl	8000618 <__aeabi_dmul>
 8008818:	4606      	mov	r6, r0
 800881a:	460f      	mov	r7, r1
 800881c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8008820:	9606      	str	r6, [sp, #24]
 8008822:	9307      	str	r3, [sp, #28]
 8008824:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008828:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800882c:	4b86      	ldr	r3, [pc, #536]	; (8008a48 <_strtod_l+0xbd0>)
 800882e:	ea0a 0303 	and.w	r3, sl, r3
 8008832:	930d      	str	r3, [sp, #52]	; 0x34
 8008834:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008836:	4b85      	ldr	r3, [pc, #532]	; (8008a4c <_strtod_l+0xbd4>)
 8008838:	429a      	cmp	r2, r3
 800883a:	f040 8090 	bne.w	800895e <_strtod_l+0xae6>
 800883e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8008842:	ec49 8b10 	vmov	d0, r8, r9
 8008846:	f7ff f9b9 	bl	8007bbc <__ulp>
 800884a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800884e:	ec51 0b10 	vmov	r0, r1, d0
 8008852:	f7f7 fee1 	bl	8000618 <__aeabi_dmul>
 8008856:	4642      	mov	r2, r8
 8008858:	464b      	mov	r3, r9
 800885a:	f7f7 fd27 	bl	80002ac <__adddf3>
 800885e:	460b      	mov	r3, r1
 8008860:	4979      	ldr	r1, [pc, #484]	; (8008a48 <_strtod_l+0xbd0>)
 8008862:	4a7b      	ldr	r2, [pc, #492]	; (8008a50 <_strtod_l+0xbd8>)
 8008864:	4019      	ands	r1, r3
 8008866:	4291      	cmp	r1, r2
 8008868:	4680      	mov	r8, r0
 800886a:	d944      	bls.n	80088f6 <_strtod_l+0xa7e>
 800886c:	ee18 2a90 	vmov	r2, s17
 8008870:	4b78      	ldr	r3, [pc, #480]	; (8008a54 <_strtod_l+0xbdc>)
 8008872:	429a      	cmp	r2, r3
 8008874:	d104      	bne.n	8008880 <_strtod_l+0xa08>
 8008876:	ee18 3a10 	vmov	r3, s16
 800887a:	3301      	adds	r3, #1
 800887c:	f43f ad40 	beq.w	8008300 <_strtod_l+0x488>
 8008880:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8008a54 <_strtod_l+0xbdc>
 8008884:	f04f 38ff 	mov.w	r8, #4294967295
 8008888:	9916      	ldr	r1, [sp, #88]	; 0x58
 800888a:	4620      	mov	r0, r4
 800888c:	f7fe fe6a 	bl	8007564 <_Bfree>
 8008890:	9905      	ldr	r1, [sp, #20]
 8008892:	4620      	mov	r0, r4
 8008894:	f7fe fe66 	bl	8007564 <_Bfree>
 8008898:	4659      	mov	r1, fp
 800889a:	4620      	mov	r0, r4
 800889c:	f7fe fe62 	bl	8007564 <_Bfree>
 80088a0:	4629      	mov	r1, r5
 80088a2:	4620      	mov	r0, r4
 80088a4:	f7fe fe5e 	bl	8007564 <_Bfree>
 80088a8:	e609      	b.n	80084be <_strtod_l+0x646>
 80088aa:	f1b8 0f01 	cmp.w	r8, #1
 80088ae:	d103      	bne.n	80088b8 <_strtod_l+0xa40>
 80088b0:	f1b9 0f00 	cmp.w	r9, #0
 80088b4:	f43f ad95 	beq.w	80083e2 <_strtod_l+0x56a>
 80088b8:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8008a10 <_strtod_l+0xb98>
 80088bc:	4f60      	ldr	r7, [pc, #384]	; (8008a40 <_strtod_l+0xbc8>)
 80088be:	ed8d 7b06 	vstr	d7, [sp, #24]
 80088c2:	2600      	movs	r6, #0
 80088c4:	e7ae      	b.n	8008824 <_strtod_l+0x9ac>
 80088c6:	4f5f      	ldr	r7, [pc, #380]	; (8008a44 <_strtod_l+0xbcc>)
 80088c8:	2600      	movs	r6, #0
 80088ca:	e7a7      	b.n	800881c <_strtod_l+0x9a4>
 80088cc:	4b5d      	ldr	r3, [pc, #372]	; (8008a44 <_strtod_l+0xbcc>)
 80088ce:	4630      	mov	r0, r6
 80088d0:	4639      	mov	r1, r7
 80088d2:	2200      	movs	r2, #0
 80088d4:	f7f7 fea0 	bl	8000618 <__aeabi_dmul>
 80088d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088da:	4606      	mov	r6, r0
 80088dc:	460f      	mov	r7, r1
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d09c      	beq.n	800881c <_strtod_l+0x9a4>
 80088e2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80088e6:	e79d      	b.n	8008824 <_strtod_l+0x9ac>
 80088e8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8008a18 <_strtod_l+0xba0>
 80088ec:	ed8d 7b06 	vstr	d7, [sp, #24]
 80088f0:	ec57 6b17 	vmov	r6, r7, d7
 80088f4:	e796      	b.n	8008824 <_strtod_l+0x9ac>
 80088f6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80088fa:	9b04      	ldr	r3, [sp, #16]
 80088fc:	46ca      	mov	sl, r9
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d1c2      	bne.n	8008888 <_strtod_l+0xa10>
 8008902:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008906:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008908:	0d1b      	lsrs	r3, r3, #20
 800890a:	051b      	lsls	r3, r3, #20
 800890c:	429a      	cmp	r2, r3
 800890e:	d1bb      	bne.n	8008888 <_strtod_l+0xa10>
 8008910:	4630      	mov	r0, r6
 8008912:	4639      	mov	r1, r7
 8008914:	f7f8 f9e0 	bl	8000cd8 <__aeabi_d2lz>
 8008918:	f7f7 fe50 	bl	80005bc <__aeabi_l2d>
 800891c:	4602      	mov	r2, r0
 800891e:	460b      	mov	r3, r1
 8008920:	4630      	mov	r0, r6
 8008922:	4639      	mov	r1, r7
 8008924:	f7f7 fcc0 	bl	80002a8 <__aeabi_dsub>
 8008928:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800892a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800892e:	ea43 0308 	orr.w	r3, r3, r8
 8008932:	4313      	orrs	r3, r2
 8008934:	4606      	mov	r6, r0
 8008936:	460f      	mov	r7, r1
 8008938:	d054      	beq.n	80089e4 <_strtod_l+0xb6c>
 800893a:	a339      	add	r3, pc, #228	; (adr r3, 8008a20 <_strtod_l+0xba8>)
 800893c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008940:	f7f8 f8dc 	bl	8000afc <__aeabi_dcmplt>
 8008944:	2800      	cmp	r0, #0
 8008946:	f47f ace5 	bne.w	8008314 <_strtod_l+0x49c>
 800894a:	a337      	add	r3, pc, #220	; (adr r3, 8008a28 <_strtod_l+0xbb0>)
 800894c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008950:	4630      	mov	r0, r6
 8008952:	4639      	mov	r1, r7
 8008954:	f7f8 f8f0 	bl	8000b38 <__aeabi_dcmpgt>
 8008958:	2800      	cmp	r0, #0
 800895a:	d095      	beq.n	8008888 <_strtod_l+0xa10>
 800895c:	e4da      	b.n	8008314 <_strtod_l+0x49c>
 800895e:	9b04      	ldr	r3, [sp, #16]
 8008960:	b333      	cbz	r3, 80089b0 <_strtod_l+0xb38>
 8008962:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008964:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008968:	d822      	bhi.n	80089b0 <_strtod_l+0xb38>
 800896a:	a331      	add	r3, pc, #196	; (adr r3, 8008a30 <_strtod_l+0xbb8>)
 800896c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008970:	4630      	mov	r0, r6
 8008972:	4639      	mov	r1, r7
 8008974:	f7f8 f8cc 	bl	8000b10 <__aeabi_dcmple>
 8008978:	b1a0      	cbz	r0, 80089a4 <_strtod_l+0xb2c>
 800897a:	4639      	mov	r1, r7
 800897c:	4630      	mov	r0, r6
 800897e:	f7f8 f923 	bl	8000bc8 <__aeabi_d2uiz>
 8008982:	2801      	cmp	r0, #1
 8008984:	bf38      	it	cc
 8008986:	2001      	movcc	r0, #1
 8008988:	f7f7 fdcc 	bl	8000524 <__aeabi_ui2d>
 800898c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800898e:	4606      	mov	r6, r0
 8008990:	460f      	mov	r7, r1
 8008992:	bb23      	cbnz	r3, 80089de <_strtod_l+0xb66>
 8008994:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008998:	9010      	str	r0, [sp, #64]	; 0x40
 800899a:	9311      	str	r3, [sp, #68]	; 0x44
 800899c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80089a0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80089a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80089a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80089a8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80089ac:	1a9b      	subs	r3, r3, r2
 80089ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80089b0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80089b4:	eeb0 0a48 	vmov.f32	s0, s16
 80089b8:	eef0 0a68 	vmov.f32	s1, s17
 80089bc:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80089c0:	f7ff f8fc 	bl	8007bbc <__ulp>
 80089c4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80089c8:	ec53 2b10 	vmov	r2, r3, d0
 80089cc:	f7f7 fe24 	bl	8000618 <__aeabi_dmul>
 80089d0:	ec53 2b18 	vmov	r2, r3, d8
 80089d4:	f7f7 fc6a 	bl	80002ac <__adddf3>
 80089d8:	4680      	mov	r8, r0
 80089da:	4689      	mov	r9, r1
 80089dc:	e78d      	b.n	80088fa <_strtod_l+0xa82>
 80089de:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80089e2:	e7db      	b.n	800899c <_strtod_l+0xb24>
 80089e4:	a314      	add	r3, pc, #80	; (adr r3, 8008a38 <_strtod_l+0xbc0>)
 80089e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ea:	f7f8 f887 	bl	8000afc <__aeabi_dcmplt>
 80089ee:	e7b3      	b.n	8008958 <_strtod_l+0xae0>
 80089f0:	2300      	movs	r3, #0
 80089f2:	930a      	str	r3, [sp, #40]	; 0x28
 80089f4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80089f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80089f8:	6013      	str	r3, [r2, #0]
 80089fa:	f7ff ba7c 	b.w	8007ef6 <_strtod_l+0x7e>
 80089fe:	2a65      	cmp	r2, #101	; 0x65
 8008a00:	f43f ab75 	beq.w	80080ee <_strtod_l+0x276>
 8008a04:	2a45      	cmp	r2, #69	; 0x45
 8008a06:	f43f ab72 	beq.w	80080ee <_strtod_l+0x276>
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	f7ff bbaa 	b.w	8008164 <_strtod_l+0x2ec>
 8008a10:	00000000 	.word	0x00000000
 8008a14:	bff00000 	.word	0xbff00000
 8008a18:	00000000 	.word	0x00000000
 8008a1c:	3ff00000 	.word	0x3ff00000
 8008a20:	94a03595 	.word	0x94a03595
 8008a24:	3fdfffff 	.word	0x3fdfffff
 8008a28:	35afe535 	.word	0x35afe535
 8008a2c:	3fe00000 	.word	0x3fe00000
 8008a30:	ffc00000 	.word	0xffc00000
 8008a34:	41dfffff 	.word	0x41dfffff
 8008a38:	94a03595 	.word	0x94a03595
 8008a3c:	3fcfffff 	.word	0x3fcfffff
 8008a40:	3ff00000 	.word	0x3ff00000
 8008a44:	3fe00000 	.word	0x3fe00000
 8008a48:	7ff00000 	.word	0x7ff00000
 8008a4c:	7fe00000 	.word	0x7fe00000
 8008a50:	7c9fffff 	.word	0x7c9fffff
 8008a54:	7fefffff 	.word	0x7fefffff

08008a58 <_strtod_r>:
 8008a58:	4b01      	ldr	r3, [pc, #4]	; (8008a60 <_strtod_r+0x8>)
 8008a5a:	f7ff ba0d 	b.w	8007e78 <_strtod_l>
 8008a5e:	bf00      	nop
 8008a60:	20000068 	.word	0x20000068

08008a64 <__ssputs_r>:
 8008a64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a68:	688e      	ldr	r6, [r1, #8]
 8008a6a:	461f      	mov	r7, r3
 8008a6c:	42be      	cmp	r6, r7
 8008a6e:	680b      	ldr	r3, [r1, #0]
 8008a70:	4682      	mov	sl, r0
 8008a72:	460c      	mov	r4, r1
 8008a74:	4690      	mov	r8, r2
 8008a76:	d82c      	bhi.n	8008ad2 <__ssputs_r+0x6e>
 8008a78:	898a      	ldrh	r2, [r1, #12]
 8008a7a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008a7e:	d026      	beq.n	8008ace <__ssputs_r+0x6a>
 8008a80:	6965      	ldr	r5, [r4, #20]
 8008a82:	6909      	ldr	r1, [r1, #16]
 8008a84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008a88:	eba3 0901 	sub.w	r9, r3, r1
 8008a8c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008a90:	1c7b      	adds	r3, r7, #1
 8008a92:	444b      	add	r3, r9
 8008a94:	106d      	asrs	r5, r5, #1
 8008a96:	429d      	cmp	r5, r3
 8008a98:	bf38      	it	cc
 8008a9a:	461d      	movcc	r5, r3
 8008a9c:	0553      	lsls	r3, r2, #21
 8008a9e:	d527      	bpl.n	8008af0 <__ssputs_r+0x8c>
 8008aa0:	4629      	mov	r1, r5
 8008aa2:	f7fe fc93 	bl	80073cc <_malloc_r>
 8008aa6:	4606      	mov	r6, r0
 8008aa8:	b360      	cbz	r0, 8008b04 <__ssputs_r+0xa0>
 8008aaa:	6921      	ldr	r1, [r4, #16]
 8008aac:	464a      	mov	r2, r9
 8008aae:	f000 fa1b 	bl	8008ee8 <memcpy>
 8008ab2:	89a3      	ldrh	r3, [r4, #12]
 8008ab4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008ab8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008abc:	81a3      	strh	r3, [r4, #12]
 8008abe:	6126      	str	r6, [r4, #16]
 8008ac0:	6165      	str	r5, [r4, #20]
 8008ac2:	444e      	add	r6, r9
 8008ac4:	eba5 0509 	sub.w	r5, r5, r9
 8008ac8:	6026      	str	r6, [r4, #0]
 8008aca:	60a5      	str	r5, [r4, #8]
 8008acc:	463e      	mov	r6, r7
 8008ace:	42be      	cmp	r6, r7
 8008ad0:	d900      	bls.n	8008ad4 <__ssputs_r+0x70>
 8008ad2:	463e      	mov	r6, r7
 8008ad4:	6820      	ldr	r0, [r4, #0]
 8008ad6:	4632      	mov	r2, r6
 8008ad8:	4641      	mov	r1, r8
 8008ada:	f000 f9c9 	bl	8008e70 <memmove>
 8008ade:	68a3      	ldr	r3, [r4, #8]
 8008ae0:	1b9b      	subs	r3, r3, r6
 8008ae2:	60a3      	str	r3, [r4, #8]
 8008ae4:	6823      	ldr	r3, [r4, #0]
 8008ae6:	4433      	add	r3, r6
 8008ae8:	6023      	str	r3, [r4, #0]
 8008aea:	2000      	movs	r0, #0
 8008aec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008af0:	462a      	mov	r2, r5
 8008af2:	f000 fdae 	bl	8009652 <_realloc_r>
 8008af6:	4606      	mov	r6, r0
 8008af8:	2800      	cmp	r0, #0
 8008afa:	d1e0      	bne.n	8008abe <__ssputs_r+0x5a>
 8008afc:	6921      	ldr	r1, [r4, #16]
 8008afe:	4650      	mov	r0, sl
 8008b00:	f7fe fbf0 	bl	80072e4 <_free_r>
 8008b04:	230c      	movs	r3, #12
 8008b06:	f8ca 3000 	str.w	r3, [sl]
 8008b0a:	89a3      	ldrh	r3, [r4, #12]
 8008b0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b10:	81a3      	strh	r3, [r4, #12]
 8008b12:	f04f 30ff 	mov.w	r0, #4294967295
 8008b16:	e7e9      	b.n	8008aec <__ssputs_r+0x88>

08008b18 <_svfiprintf_r>:
 8008b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b1c:	4698      	mov	r8, r3
 8008b1e:	898b      	ldrh	r3, [r1, #12]
 8008b20:	061b      	lsls	r3, r3, #24
 8008b22:	b09d      	sub	sp, #116	; 0x74
 8008b24:	4607      	mov	r7, r0
 8008b26:	460d      	mov	r5, r1
 8008b28:	4614      	mov	r4, r2
 8008b2a:	d50e      	bpl.n	8008b4a <_svfiprintf_r+0x32>
 8008b2c:	690b      	ldr	r3, [r1, #16]
 8008b2e:	b963      	cbnz	r3, 8008b4a <_svfiprintf_r+0x32>
 8008b30:	2140      	movs	r1, #64	; 0x40
 8008b32:	f7fe fc4b 	bl	80073cc <_malloc_r>
 8008b36:	6028      	str	r0, [r5, #0]
 8008b38:	6128      	str	r0, [r5, #16]
 8008b3a:	b920      	cbnz	r0, 8008b46 <_svfiprintf_r+0x2e>
 8008b3c:	230c      	movs	r3, #12
 8008b3e:	603b      	str	r3, [r7, #0]
 8008b40:	f04f 30ff 	mov.w	r0, #4294967295
 8008b44:	e0d0      	b.n	8008ce8 <_svfiprintf_r+0x1d0>
 8008b46:	2340      	movs	r3, #64	; 0x40
 8008b48:	616b      	str	r3, [r5, #20]
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	9309      	str	r3, [sp, #36]	; 0x24
 8008b4e:	2320      	movs	r3, #32
 8008b50:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008b54:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b58:	2330      	movs	r3, #48	; 0x30
 8008b5a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008d00 <_svfiprintf_r+0x1e8>
 8008b5e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008b62:	f04f 0901 	mov.w	r9, #1
 8008b66:	4623      	mov	r3, r4
 8008b68:	469a      	mov	sl, r3
 8008b6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b6e:	b10a      	cbz	r2, 8008b74 <_svfiprintf_r+0x5c>
 8008b70:	2a25      	cmp	r2, #37	; 0x25
 8008b72:	d1f9      	bne.n	8008b68 <_svfiprintf_r+0x50>
 8008b74:	ebba 0b04 	subs.w	fp, sl, r4
 8008b78:	d00b      	beq.n	8008b92 <_svfiprintf_r+0x7a>
 8008b7a:	465b      	mov	r3, fp
 8008b7c:	4622      	mov	r2, r4
 8008b7e:	4629      	mov	r1, r5
 8008b80:	4638      	mov	r0, r7
 8008b82:	f7ff ff6f 	bl	8008a64 <__ssputs_r>
 8008b86:	3001      	adds	r0, #1
 8008b88:	f000 80a9 	beq.w	8008cde <_svfiprintf_r+0x1c6>
 8008b8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b8e:	445a      	add	r2, fp
 8008b90:	9209      	str	r2, [sp, #36]	; 0x24
 8008b92:	f89a 3000 	ldrb.w	r3, [sl]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	f000 80a1 	beq.w	8008cde <_svfiprintf_r+0x1c6>
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	f04f 32ff 	mov.w	r2, #4294967295
 8008ba2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ba6:	f10a 0a01 	add.w	sl, sl, #1
 8008baa:	9304      	str	r3, [sp, #16]
 8008bac:	9307      	str	r3, [sp, #28]
 8008bae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008bb2:	931a      	str	r3, [sp, #104]	; 0x68
 8008bb4:	4654      	mov	r4, sl
 8008bb6:	2205      	movs	r2, #5
 8008bb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bbc:	4850      	ldr	r0, [pc, #320]	; (8008d00 <_svfiprintf_r+0x1e8>)
 8008bbe:	f7f7 fb17 	bl	80001f0 <memchr>
 8008bc2:	9a04      	ldr	r2, [sp, #16]
 8008bc4:	b9d8      	cbnz	r0, 8008bfe <_svfiprintf_r+0xe6>
 8008bc6:	06d0      	lsls	r0, r2, #27
 8008bc8:	bf44      	itt	mi
 8008bca:	2320      	movmi	r3, #32
 8008bcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008bd0:	0711      	lsls	r1, r2, #28
 8008bd2:	bf44      	itt	mi
 8008bd4:	232b      	movmi	r3, #43	; 0x2b
 8008bd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008bda:	f89a 3000 	ldrb.w	r3, [sl]
 8008bde:	2b2a      	cmp	r3, #42	; 0x2a
 8008be0:	d015      	beq.n	8008c0e <_svfiprintf_r+0xf6>
 8008be2:	9a07      	ldr	r2, [sp, #28]
 8008be4:	4654      	mov	r4, sl
 8008be6:	2000      	movs	r0, #0
 8008be8:	f04f 0c0a 	mov.w	ip, #10
 8008bec:	4621      	mov	r1, r4
 8008bee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008bf2:	3b30      	subs	r3, #48	; 0x30
 8008bf4:	2b09      	cmp	r3, #9
 8008bf6:	d94d      	bls.n	8008c94 <_svfiprintf_r+0x17c>
 8008bf8:	b1b0      	cbz	r0, 8008c28 <_svfiprintf_r+0x110>
 8008bfa:	9207      	str	r2, [sp, #28]
 8008bfc:	e014      	b.n	8008c28 <_svfiprintf_r+0x110>
 8008bfe:	eba0 0308 	sub.w	r3, r0, r8
 8008c02:	fa09 f303 	lsl.w	r3, r9, r3
 8008c06:	4313      	orrs	r3, r2
 8008c08:	9304      	str	r3, [sp, #16]
 8008c0a:	46a2      	mov	sl, r4
 8008c0c:	e7d2      	b.n	8008bb4 <_svfiprintf_r+0x9c>
 8008c0e:	9b03      	ldr	r3, [sp, #12]
 8008c10:	1d19      	adds	r1, r3, #4
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	9103      	str	r1, [sp, #12]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	bfbb      	ittet	lt
 8008c1a:	425b      	neglt	r3, r3
 8008c1c:	f042 0202 	orrlt.w	r2, r2, #2
 8008c20:	9307      	strge	r3, [sp, #28]
 8008c22:	9307      	strlt	r3, [sp, #28]
 8008c24:	bfb8      	it	lt
 8008c26:	9204      	strlt	r2, [sp, #16]
 8008c28:	7823      	ldrb	r3, [r4, #0]
 8008c2a:	2b2e      	cmp	r3, #46	; 0x2e
 8008c2c:	d10c      	bne.n	8008c48 <_svfiprintf_r+0x130>
 8008c2e:	7863      	ldrb	r3, [r4, #1]
 8008c30:	2b2a      	cmp	r3, #42	; 0x2a
 8008c32:	d134      	bne.n	8008c9e <_svfiprintf_r+0x186>
 8008c34:	9b03      	ldr	r3, [sp, #12]
 8008c36:	1d1a      	adds	r2, r3, #4
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	9203      	str	r2, [sp, #12]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	bfb8      	it	lt
 8008c40:	f04f 33ff 	movlt.w	r3, #4294967295
 8008c44:	3402      	adds	r4, #2
 8008c46:	9305      	str	r3, [sp, #20]
 8008c48:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008d10 <_svfiprintf_r+0x1f8>
 8008c4c:	7821      	ldrb	r1, [r4, #0]
 8008c4e:	2203      	movs	r2, #3
 8008c50:	4650      	mov	r0, sl
 8008c52:	f7f7 facd 	bl	80001f0 <memchr>
 8008c56:	b138      	cbz	r0, 8008c68 <_svfiprintf_r+0x150>
 8008c58:	9b04      	ldr	r3, [sp, #16]
 8008c5a:	eba0 000a 	sub.w	r0, r0, sl
 8008c5e:	2240      	movs	r2, #64	; 0x40
 8008c60:	4082      	lsls	r2, r0
 8008c62:	4313      	orrs	r3, r2
 8008c64:	3401      	adds	r4, #1
 8008c66:	9304      	str	r3, [sp, #16]
 8008c68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c6c:	4825      	ldr	r0, [pc, #148]	; (8008d04 <_svfiprintf_r+0x1ec>)
 8008c6e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008c72:	2206      	movs	r2, #6
 8008c74:	f7f7 fabc 	bl	80001f0 <memchr>
 8008c78:	2800      	cmp	r0, #0
 8008c7a:	d038      	beq.n	8008cee <_svfiprintf_r+0x1d6>
 8008c7c:	4b22      	ldr	r3, [pc, #136]	; (8008d08 <_svfiprintf_r+0x1f0>)
 8008c7e:	bb1b      	cbnz	r3, 8008cc8 <_svfiprintf_r+0x1b0>
 8008c80:	9b03      	ldr	r3, [sp, #12]
 8008c82:	3307      	adds	r3, #7
 8008c84:	f023 0307 	bic.w	r3, r3, #7
 8008c88:	3308      	adds	r3, #8
 8008c8a:	9303      	str	r3, [sp, #12]
 8008c8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c8e:	4433      	add	r3, r6
 8008c90:	9309      	str	r3, [sp, #36]	; 0x24
 8008c92:	e768      	b.n	8008b66 <_svfiprintf_r+0x4e>
 8008c94:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c98:	460c      	mov	r4, r1
 8008c9a:	2001      	movs	r0, #1
 8008c9c:	e7a6      	b.n	8008bec <_svfiprintf_r+0xd4>
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	3401      	adds	r4, #1
 8008ca2:	9305      	str	r3, [sp, #20]
 8008ca4:	4619      	mov	r1, r3
 8008ca6:	f04f 0c0a 	mov.w	ip, #10
 8008caa:	4620      	mov	r0, r4
 8008cac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008cb0:	3a30      	subs	r2, #48	; 0x30
 8008cb2:	2a09      	cmp	r2, #9
 8008cb4:	d903      	bls.n	8008cbe <_svfiprintf_r+0x1a6>
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d0c6      	beq.n	8008c48 <_svfiprintf_r+0x130>
 8008cba:	9105      	str	r1, [sp, #20]
 8008cbc:	e7c4      	b.n	8008c48 <_svfiprintf_r+0x130>
 8008cbe:	fb0c 2101 	mla	r1, ip, r1, r2
 8008cc2:	4604      	mov	r4, r0
 8008cc4:	2301      	movs	r3, #1
 8008cc6:	e7f0      	b.n	8008caa <_svfiprintf_r+0x192>
 8008cc8:	ab03      	add	r3, sp, #12
 8008cca:	9300      	str	r3, [sp, #0]
 8008ccc:	462a      	mov	r2, r5
 8008cce:	4b0f      	ldr	r3, [pc, #60]	; (8008d0c <_svfiprintf_r+0x1f4>)
 8008cd0:	a904      	add	r1, sp, #16
 8008cd2:	4638      	mov	r0, r7
 8008cd4:	f7fc fd08 	bl	80056e8 <_printf_float>
 8008cd8:	1c42      	adds	r2, r0, #1
 8008cda:	4606      	mov	r6, r0
 8008cdc:	d1d6      	bne.n	8008c8c <_svfiprintf_r+0x174>
 8008cde:	89ab      	ldrh	r3, [r5, #12]
 8008ce0:	065b      	lsls	r3, r3, #25
 8008ce2:	f53f af2d 	bmi.w	8008b40 <_svfiprintf_r+0x28>
 8008ce6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008ce8:	b01d      	add	sp, #116	; 0x74
 8008cea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cee:	ab03      	add	r3, sp, #12
 8008cf0:	9300      	str	r3, [sp, #0]
 8008cf2:	462a      	mov	r2, r5
 8008cf4:	4b05      	ldr	r3, [pc, #20]	; (8008d0c <_svfiprintf_r+0x1f4>)
 8008cf6:	a904      	add	r1, sp, #16
 8008cf8:	4638      	mov	r0, r7
 8008cfa:	f7fc ff99 	bl	8005c30 <_printf_i>
 8008cfe:	e7eb      	b.n	8008cd8 <_svfiprintf_r+0x1c0>
 8008d00:	0800a0f0 	.word	0x0800a0f0
 8008d04:	0800a0fa 	.word	0x0800a0fa
 8008d08:	080056e9 	.word	0x080056e9
 8008d0c:	08008a65 	.word	0x08008a65
 8008d10:	0800a0f6 	.word	0x0800a0f6

08008d14 <__sflush_r>:
 8008d14:	898a      	ldrh	r2, [r1, #12]
 8008d16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d1a:	4605      	mov	r5, r0
 8008d1c:	0710      	lsls	r0, r2, #28
 8008d1e:	460c      	mov	r4, r1
 8008d20:	d458      	bmi.n	8008dd4 <__sflush_r+0xc0>
 8008d22:	684b      	ldr	r3, [r1, #4]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	dc05      	bgt.n	8008d34 <__sflush_r+0x20>
 8008d28:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	dc02      	bgt.n	8008d34 <__sflush_r+0x20>
 8008d2e:	2000      	movs	r0, #0
 8008d30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008d36:	2e00      	cmp	r6, #0
 8008d38:	d0f9      	beq.n	8008d2e <__sflush_r+0x1a>
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008d40:	682f      	ldr	r7, [r5, #0]
 8008d42:	6a21      	ldr	r1, [r4, #32]
 8008d44:	602b      	str	r3, [r5, #0]
 8008d46:	d032      	beq.n	8008dae <__sflush_r+0x9a>
 8008d48:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008d4a:	89a3      	ldrh	r3, [r4, #12]
 8008d4c:	075a      	lsls	r2, r3, #29
 8008d4e:	d505      	bpl.n	8008d5c <__sflush_r+0x48>
 8008d50:	6863      	ldr	r3, [r4, #4]
 8008d52:	1ac0      	subs	r0, r0, r3
 8008d54:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008d56:	b10b      	cbz	r3, 8008d5c <__sflush_r+0x48>
 8008d58:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008d5a:	1ac0      	subs	r0, r0, r3
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	4602      	mov	r2, r0
 8008d60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008d62:	6a21      	ldr	r1, [r4, #32]
 8008d64:	4628      	mov	r0, r5
 8008d66:	47b0      	blx	r6
 8008d68:	1c43      	adds	r3, r0, #1
 8008d6a:	89a3      	ldrh	r3, [r4, #12]
 8008d6c:	d106      	bne.n	8008d7c <__sflush_r+0x68>
 8008d6e:	6829      	ldr	r1, [r5, #0]
 8008d70:	291d      	cmp	r1, #29
 8008d72:	d82b      	bhi.n	8008dcc <__sflush_r+0xb8>
 8008d74:	4a29      	ldr	r2, [pc, #164]	; (8008e1c <__sflush_r+0x108>)
 8008d76:	410a      	asrs	r2, r1
 8008d78:	07d6      	lsls	r6, r2, #31
 8008d7a:	d427      	bmi.n	8008dcc <__sflush_r+0xb8>
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	6062      	str	r2, [r4, #4]
 8008d80:	04d9      	lsls	r1, r3, #19
 8008d82:	6922      	ldr	r2, [r4, #16]
 8008d84:	6022      	str	r2, [r4, #0]
 8008d86:	d504      	bpl.n	8008d92 <__sflush_r+0x7e>
 8008d88:	1c42      	adds	r2, r0, #1
 8008d8a:	d101      	bne.n	8008d90 <__sflush_r+0x7c>
 8008d8c:	682b      	ldr	r3, [r5, #0]
 8008d8e:	b903      	cbnz	r3, 8008d92 <__sflush_r+0x7e>
 8008d90:	6560      	str	r0, [r4, #84]	; 0x54
 8008d92:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008d94:	602f      	str	r7, [r5, #0]
 8008d96:	2900      	cmp	r1, #0
 8008d98:	d0c9      	beq.n	8008d2e <__sflush_r+0x1a>
 8008d9a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008d9e:	4299      	cmp	r1, r3
 8008da0:	d002      	beq.n	8008da8 <__sflush_r+0x94>
 8008da2:	4628      	mov	r0, r5
 8008da4:	f7fe fa9e 	bl	80072e4 <_free_r>
 8008da8:	2000      	movs	r0, #0
 8008daa:	6360      	str	r0, [r4, #52]	; 0x34
 8008dac:	e7c0      	b.n	8008d30 <__sflush_r+0x1c>
 8008dae:	2301      	movs	r3, #1
 8008db0:	4628      	mov	r0, r5
 8008db2:	47b0      	blx	r6
 8008db4:	1c41      	adds	r1, r0, #1
 8008db6:	d1c8      	bne.n	8008d4a <__sflush_r+0x36>
 8008db8:	682b      	ldr	r3, [r5, #0]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d0c5      	beq.n	8008d4a <__sflush_r+0x36>
 8008dbe:	2b1d      	cmp	r3, #29
 8008dc0:	d001      	beq.n	8008dc6 <__sflush_r+0xb2>
 8008dc2:	2b16      	cmp	r3, #22
 8008dc4:	d101      	bne.n	8008dca <__sflush_r+0xb6>
 8008dc6:	602f      	str	r7, [r5, #0]
 8008dc8:	e7b1      	b.n	8008d2e <__sflush_r+0x1a>
 8008dca:	89a3      	ldrh	r3, [r4, #12]
 8008dcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008dd0:	81a3      	strh	r3, [r4, #12]
 8008dd2:	e7ad      	b.n	8008d30 <__sflush_r+0x1c>
 8008dd4:	690f      	ldr	r7, [r1, #16]
 8008dd6:	2f00      	cmp	r7, #0
 8008dd8:	d0a9      	beq.n	8008d2e <__sflush_r+0x1a>
 8008dda:	0793      	lsls	r3, r2, #30
 8008ddc:	680e      	ldr	r6, [r1, #0]
 8008dde:	bf08      	it	eq
 8008de0:	694b      	ldreq	r3, [r1, #20]
 8008de2:	600f      	str	r7, [r1, #0]
 8008de4:	bf18      	it	ne
 8008de6:	2300      	movne	r3, #0
 8008de8:	eba6 0807 	sub.w	r8, r6, r7
 8008dec:	608b      	str	r3, [r1, #8]
 8008dee:	f1b8 0f00 	cmp.w	r8, #0
 8008df2:	dd9c      	ble.n	8008d2e <__sflush_r+0x1a>
 8008df4:	6a21      	ldr	r1, [r4, #32]
 8008df6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008df8:	4643      	mov	r3, r8
 8008dfa:	463a      	mov	r2, r7
 8008dfc:	4628      	mov	r0, r5
 8008dfe:	47b0      	blx	r6
 8008e00:	2800      	cmp	r0, #0
 8008e02:	dc06      	bgt.n	8008e12 <__sflush_r+0xfe>
 8008e04:	89a3      	ldrh	r3, [r4, #12]
 8008e06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e0a:	81a3      	strh	r3, [r4, #12]
 8008e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e10:	e78e      	b.n	8008d30 <__sflush_r+0x1c>
 8008e12:	4407      	add	r7, r0
 8008e14:	eba8 0800 	sub.w	r8, r8, r0
 8008e18:	e7e9      	b.n	8008dee <__sflush_r+0xda>
 8008e1a:	bf00      	nop
 8008e1c:	dfbffffe 	.word	0xdfbffffe

08008e20 <_fflush_r>:
 8008e20:	b538      	push	{r3, r4, r5, lr}
 8008e22:	690b      	ldr	r3, [r1, #16]
 8008e24:	4605      	mov	r5, r0
 8008e26:	460c      	mov	r4, r1
 8008e28:	b913      	cbnz	r3, 8008e30 <_fflush_r+0x10>
 8008e2a:	2500      	movs	r5, #0
 8008e2c:	4628      	mov	r0, r5
 8008e2e:	bd38      	pop	{r3, r4, r5, pc}
 8008e30:	b118      	cbz	r0, 8008e3a <_fflush_r+0x1a>
 8008e32:	6a03      	ldr	r3, [r0, #32]
 8008e34:	b90b      	cbnz	r3, 8008e3a <_fflush_r+0x1a>
 8008e36:	f7fd fab9 	bl	80063ac <__sinit>
 8008e3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d0f3      	beq.n	8008e2a <_fflush_r+0xa>
 8008e42:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008e44:	07d0      	lsls	r0, r2, #31
 8008e46:	d404      	bmi.n	8008e52 <_fflush_r+0x32>
 8008e48:	0599      	lsls	r1, r3, #22
 8008e4a:	d402      	bmi.n	8008e52 <_fflush_r+0x32>
 8008e4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e4e:	f7fd fbc4 	bl	80065da <__retarget_lock_acquire_recursive>
 8008e52:	4628      	mov	r0, r5
 8008e54:	4621      	mov	r1, r4
 8008e56:	f7ff ff5d 	bl	8008d14 <__sflush_r>
 8008e5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008e5c:	07da      	lsls	r2, r3, #31
 8008e5e:	4605      	mov	r5, r0
 8008e60:	d4e4      	bmi.n	8008e2c <_fflush_r+0xc>
 8008e62:	89a3      	ldrh	r3, [r4, #12]
 8008e64:	059b      	lsls	r3, r3, #22
 8008e66:	d4e1      	bmi.n	8008e2c <_fflush_r+0xc>
 8008e68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e6a:	f7fd fbb7 	bl	80065dc <__retarget_lock_release_recursive>
 8008e6e:	e7dd      	b.n	8008e2c <_fflush_r+0xc>

08008e70 <memmove>:
 8008e70:	4288      	cmp	r0, r1
 8008e72:	b510      	push	{r4, lr}
 8008e74:	eb01 0402 	add.w	r4, r1, r2
 8008e78:	d902      	bls.n	8008e80 <memmove+0x10>
 8008e7a:	4284      	cmp	r4, r0
 8008e7c:	4623      	mov	r3, r4
 8008e7e:	d807      	bhi.n	8008e90 <memmove+0x20>
 8008e80:	1e43      	subs	r3, r0, #1
 8008e82:	42a1      	cmp	r1, r4
 8008e84:	d008      	beq.n	8008e98 <memmove+0x28>
 8008e86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008e8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008e8e:	e7f8      	b.n	8008e82 <memmove+0x12>
 8008e90:	4402      	add	r2, r0
 8008e92:	4601      	mov	r1, r0
 8008e94:	428a      	cmp	r2, r1
 8008e96:	d100      	bne.n	8008e9a <memmove+0x2a>
 8008e98:	bd10      	pop	{r4, pc}
 8008e9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008e9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008ea2:	e7f7      	b.n	8008e94 <memmove+0x24>

08008ea4 <strncmp>:
 8008ea4:	b510      	push	{r4, lr}
 8008ea6:	b16a      	cbz	r2, 8008ec4 <strncmp+0x20>
 8008ea8:	3901      	subs	r1, #1
 8008eaa:	1884      	adds	r4, r0, r2
 8008eac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008eb0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008eb4:	429a      	cmp	r2, r3
 8008eb6:	d103      	bne.n	8008ec0 <strncmp+0x1c>
 8008eb8:	42a0      	cmp	r0, r4
 8008eba:	d001      	beq.n	8008ec0 <strncmp+0x1c>
 8008ebc:	2a00      	cmp	r2, #0
 8008ebe:	d1f5      	bne.n	8008eac <strncmp+0x8>
 8008ec0:	1ad0      	subs	r0, r2, r3
 8008ec2:	bd10      	pop	{r4, pc}
 8008ec4:	4610      	mov	r0, r2
 8008ec6:	e7fc      	b.n	8008ec2 <strncmp+0x1e>

08008ec8 <_sbrk_r>:
 8008ec8:	b538      	push	{r3, r4, r5, lr}
 8008eca:	4d06      	ldr	r5, [pc, #24]	; (8008ee4 <_sbrk_r+0x1c>)
 8008ecc:	2300      	movs	r3, #0
 8008ece:	4604      	mov	r4, r0
 8008ed0:	4608      	mov	r0, r1
 8008ed2:	602b      	str	r3, [r5, #0]
 8008ed4:	f7f9 f870 	bl	8001fb8 <_sbrk>
 8008ed8:	1c43      	adds	r3, r0, #1
 8008eda:	d102      	bne.n	8008ee2 <_sbrk_r+0x1a>
 8008edc:	682b      	ldr	r3, [r5, #0]
 8008ede:	b103      	cbz	r3, 8008ee2 <_sbrk_r+0x1a>
 8008ee0:	6023      	str	r3, [r4, #0]
 8008ee2:	bd38      	pop	{r3, r4, r5, pc}
 8008ee4:	20000910 	.word	0x20000910

08008ee8 <memcpy>:
 8008ee8:	440a      	add	r2, r1
 8008eea:	4291      	cmp	r1, r2
 8008eec:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ef0:	d100      	bne.n	8008ef4 <memcpy+0xc>
 8008ef2:	4770      	bx	lr
 8008ef4:	b510      	push	{r4, lr}
 8008ef6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008efa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008efe:	4291      	cmp	r1, r2
 8008f00:	d1f9      	bne.n	8008ef6 <memcpy+0xe>
 8008f02:	bd10      	pop	{r4, pc}
 8008f04:	0000      	movs	r0, r0
	...

08008f08 <nan>:
 8008f08:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008f10 <nan+0x8>
 8008f0c:	4770      	bx	lr
 8008f0e:	bf00      	nop
 8008f10:	00000000 	.word	0x00000000
 8008f14:	7ff80000 	.word	0x7ff80000

08008f18 <__assert_func>:
 8008f18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008f1a:	4614      	mov	r4, r2
 8008f1c:	461a      	mov	r2, r3
 8008f1e:	4b09      	ldr	r3, [pc, #36]	; (8008f44 <__assert_func+0x2c>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	4605      	mov	r5, r0
 8008f24:	68d8      	ldr	r0, [r3, #12]
 8008f26:	b14c      	cbz	r4, 8008f3c <__assert_func+0x24>
 8008f28:	4b07      	ldr	r3, [pc, #28]	; (8008f48 <__assert_func+0x30>)
 8008f2a:	9100      	str	r1, [sp, #0]
 8008f2c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008f30:	4906      	ldr	r1, [pc, #24]	; (8008f4c <__assert_func+0x34>)
 8008f32:	462b      	mov	r3, r5
 8008f34:	f000 fbca 	bl	80096cc <fiprintf>
 8008f38:	f000 fbda 	bl	80096f0 <abort>
 8008f3c:	4b04      	ldr	r3, [pc, #16]	; (8008f50 <__assert_func+0x38>)
 8008f3e:	461c      	mov	r4, r3
 8008f40:	e7f3      	b.n	8008f2a <__assert_func+0x12>
 8008f42:	bf00      	nop
 8008f44:	20000064 	.word	0x20000064
 8008f48:	0800a109 	.word	0x0800a109
 8008f4c:	0800a116 	.word	0x0800a116
 8008f50:	0800a144 	.word	0x0800a144

08008f54 <_calloc_r>:
 8008f54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f56:	fba1 2402 	umull	r2, r4, r1, r2
 8008f5a:	b94c      	cbnz	r4, 8008f70 <_calloc_r+0x1c>
 8008f5c:	4611      	mov	r1, r2
 8008f5e:	9201      	str	r2, [sp, #4]
 8008f60:	f7fe fa34 	bl	80073cc <_malloc_r>
 8008f64:	9a01      	ldr	r2, [sp, #4]
 8008f66:	4605      	mov	r5, r0
 8008f68:	b930      	cbnz	r0, 8008f78 <_calloc_r+0x24>
 8008f6a:	4628      	mov	r0, r5
 8008f6c:	b003      	add	sp, #12
 8008f6e:	bd30      	pop	{r4, r5, pc}
 8008f70:	220c      	movs	r2, #12
 8008f72:	6002      	str	r2, [r0, #0]
 8008f74:	2500      	movs	r5, #0
 8008f76:	e7f8      	b.n	8008f6a <_calloc_r+0x16>
 8008f78:	4621      	mov	r1, r4
 8008f7a:	f7fd fab0 	bl	80064de <memset>
 8008f7e:	e7f4      	b.n	8008f6a <_calloc_r+0x16>

08008f80 <rshift>:
 8008f80:	6903      	ldr	r3, [r0, #16]
 8008f82:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008f86:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008f8a:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008f8e:	f100 0414 	add.w	r4, r0, #20
 8008f92:	dd45      	ble.n	8009020 <rshift+0xa0>
 8008f94:	f011 011f 	ands.w	r1, r1, #31
 8008f98:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008f9c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008fa0:	d10c      	bne.n	8008fbc <rshift+0x3c>
 8008fa2:	f100 0710 	add.w	r7, r0, #16
 8008fa6:	4629      	mov	r1, r5
 8008fa8:	42b1      	cmp	r1, r6
 8008faa:	d334      	bcc.n	8009016 <rshift+0x96>
 8008fac:	1a9b      	subs	r3, r3, r2
 8008fae:	009b      	lsls	r3, r3, #2
 8008fb0:	1eea      	subs	r2, r5, #3
 8008fb2:	4296      	cmp	r6, r2
 8008fb4:	bf38      	it	cc
 8008fb6:	2300      	movcc	r3, #0
 8008fb8:	4423      	add	r3, r4
 8008fba:	e015      	b.n	8008fe8 <rshift+0x68>
 8008fbc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008fc0:	f1c1 0820 	rsb	r8, r1, #32
 8008fc4:	40cf      	lsrs	r7, r1
 8008fc6:	f105 0e04 	add.w	lr, r5, #4
 8008fca:	46a1      	mov	r9, r4
 8008fcc:	4576      	cmp	r6, lr
 8008fce:	46f4      	mov	ip, lr
 8008fd0:	d815      	bhi.n	8008ffe <rshift+0x7e>
 8008fd2:	1a9a      	subs	r2, r3, r2
 8008fd4:	0092      	lsls	r2, r2, #2
 8008fd6:	3a04      	subs	r2, #4
 8008fd8:	3501      	adds	r5, #1
 8008fda:	42ae      	cmp	r6, r5
 8008fdc:	bf38      	it	cc
 8008fde:	2200      	movcc	r2, #0
 8008fe0:	18a3      	adds	r3, r4, r2
 8008fe2:	50a7      	str	r7, [r4, r2]
 8008fe4:	b107      	cbz	r7, 8008fe8 <rshift+0x68>
 8008fe6:	3304      	adds	r3, #4
 8008fe8:	1b1a      	subs	r2, r3, r4
 8008fea:	42a3      	cmp	r3, r4
 8008fec:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008ff0:	bf08      	it	eq
 8008ff2:	2300      	moveq	r3, #0
 8008ff4:	6102      	str	r2, [r0, #16]
 8008ff6:	bf08      	it	eq
 8008ff8:	6143      	streq	r3, [r0, #20]
 8008ffa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008ffe:	f8dc c000 	ldr.w	ip, [ip]
 8009002:	fa0c fc08 	lsl.w	ip, ip, r8
 8009006:	ea4c 0707 	orr.w	r7, ip, r7
 800900a:	f849 7b04 	str.w	r7, [r9], #4
 800900e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009012:	40cf      	lsrs	r7, r1
 8009014:	e7da      	b.n	8008fcc <rshift+0x4c>
 8009016:	f851 cb04 	ldr.w	ip, [r1], #4
 800901a:	f847 cf04 	str.w	ip, [r7, #4]!
 800901e:	e7c3      	b.n	8008fa8 <rshift+0x28>
 8009020:	4623      	mov	r3, r4
 8009022:	e7e1      	b.n	8008fe8 <rshift+0x68>

08009024 <__hexdig_fun>:
 8009024:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009028:	2b09      	cmp	r3, #9
 800902a:	d802      	bhi.n	8009032 <__hexdig_fun+0xe>
 800902c:	3820      	subs	r0, #32
 800902e:	b2c0      	uxtb	r0, r0
 8009030:	4770      	bx	lr
 8009032:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009036:	2b05      	cmp	r3, #5
 8009038:	d801      	bhi.n	800903e <__hexdig_fun+0x1a>
 800903a:	3847      	subs	r0, #71	; 0x47
 800903c:	e7f7      	b.n	800902e <__hexdig_fun+0xa>
 800903e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009042:	2b05      	cmp	r3, #5
 8009044:	d801      	bhi.n	800904a <__hexdig_fun+0x26>
 8009046:	3827      	subs	r0, #39	; 0x27
 8009048:	e7f1      	b.n	800902e <__hexdig_fun+0xa>
 800904a:	2000      	movs	r0, #0
 800904c:	4770      	bx	lr
	...

08009050 <__gethex>:
 8009050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009054:	4617      	mov	r7, r2
 8009056:	680a      	ldr	r2, [r1, #0]
 8009058:	b085      	sub	sp, #20
 800905a:	f102 0b02 	add.w	fp, r2, #2
 800905e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009062:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009066:	4681      	mov	r9, r0
 8009068:	468a      	mov	sl, r1
 800906a:	9302      	str	r3, [sp, #8]
 800906c:	32fe      	adds	r2, #254	; 0xfe
 800906e:	eb02 030b 	add.w	r3, r2, fp
 8009072:	46d8      	mov	r8, fp
 8009074:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8009078:	9301      	str	r3, [sp, #4]
 800907a:	2830      	cmp	r0, #48	; 0x30
 800907c:	d0f7      	beq.n	800906e <__gethex+0x1e>
 800907e:	f7ff ffd1 	bl	8009024 <__hexdig_fun>
 8009082:	4604      	mov	r4, r0
 8009084:	2800      	cmp	r0, #0
 8009086:	d138      	bne.n	80090fa <__gethex+0xaa>
 8009088:	49a7      	ldr	r1, [pc, #668]	; (8009328 <__gethex+0x2d8>)
 800908a:	2201      	movs	r2, #1
 800908c:	4640      	mov	r0, r8
 800908e:	f7ff ff09 	bl	8008ea4 <strncmp>
 8009092:	4606      	mov	r6, r0
 8009094:	2800      	cmp	r0, #0
 8009096:	d169      	bne.n	800916c <__gethex+0x11c>
 8009098:	f898 0001 	ldrb.w	r0, [r8, #1]
 800909c:	465d      	mov	r5, fp
 800909e:	f7ff ffc1 	bl	8009024 <__hexdig_fun>
 80090a2:	2800      	cmp	r0, #0
 80090a4:	d064      	beq.n	8009170 <__gethex+0x120>
 80090a6:	465a      	mov	r2, fp
 80090a8:	7810      	ldrb	r0, [r2, #0]
 80090aa:	2830      	cmp	r0, #48	; 0x30
 80090ac:	4690      	mov	r8, r2
 80090ae:	f102 0201 	add.w	r2, r2, #1
 80090b2:	d0f9      	beq.n	80090a8 <__gethex+0x58>
 80090b4:	f7ff ffb6 	bl	8009024 <__hexdig_fun>
 80090b8:	2301      	movs	r3, #1
 80090ba:	fab0 f480 	clz	r4, r0
 80090be:	0964      	lsrs	r4, r4, #5
 80090c0:	465e      	mov	r6, fp
 80090c2:	9301      	str	r3, [sp, #4]
 80090c4:	4642      	mov	r2, r8
 80090c6:	4615      	mov	r5, r2
 80090c8:	3201      	adds	r2, #1
 80090ca:	7828      	ldrb	r0, [r5, #0]
 80090cc:	f7ff ffaa 	bl	8009024 <__hexdig_fun>
 80090d0:	2800      	cmp	r0, #0
 80090d2:	d1f8      	bne.n	80090c6 <__gethex+0x76>
 80090d4:	4994      	ldr	r1, [pc, #592]	; (8009328 <__gethex+0x2d8>)
 80090d6:	2201      	movs	r2, #1
 80090d8:	4628      	mov	r0, r5
 80090da:	f7ff fee3 	bl	8008ea4 <strncmp>
 80090de:	b978      	cbnz	r0, 8009100 <__gethex+0xb0>
 80090e0:	b946      	cbnz	r6, 80090f4 <__gethex+0xa4>
 80090e2:	1c6e      	adds	r6, r5, #1
 80090e4:	4632      	mov	r2, r6
 80090e6:	4615      	mov	r5, r2
 80090e8:	3201      	adds	r2, #1
 80090ea:	7828      	ldrb	r0, [r5, #0]
 80090ec:	f7ff ff9a 	bl	8009024 <__hexdig_fun>
 80090f0:	2800      	cmp	r0, #0
 80090f2:	d1f8      	bne.n	80090e6 <__gethex+0x96>
 80090f4:	1b73      	subs	r3, r6, r5
 80090f6:	009e      	lsls	r6, r3, #2
 80090f8:	e004      	b.n	8009104 <__gethex+0xb4>
 80090fa:	2400      	movs	r4, #0
 80090fc:	4626      	mov	r6, r4
 80090fe:	e7e1      	b.n	80090c4 <__gethex+0x74>
 8009100:	2e00      	cmp	r6, #0
 8009102:	d1f7      	bne.n	80090f4 <__gethex+0xa4>
 8009104:	782b      	ldrb	r3, [r5, #0]
 8009106:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800910a:	2b50      	cmp	r3, #80	; 0x50
 800910c:	d13d      	bne.n	800918a <__gethex+0x13a>
 800910e:	786b      	ldrb	r3, [r5, #1]
 8009110:	2b2b      	cmp	r3, #43	; 0x2b
 8009112:	d02f      	beq.n	8009174 <__gethex+0x124>
 8009114:	2b2d      	cmp	r3, #45	; 0x2d
 8009116:	d031      	beq.n	800917c <__gethex+0x12c>
 8009118:	1c69      	adds	r1, r5, #1
 800911a:	f04f 0b00 	mov.w	fp, #0
 800911e:	7808      	ldrb	r0, [r1, #0]
 8009120:	f7ff ff80 	bl	8009024 <__hexdig_fun>
 8009124:	1e42      	subs	r2, r0, #1
 8009126:	b2d2      	uxtb	r2, r2
 8009128:	2a18      	cmp	r2, #24
 800912a:	d82e      	bhi.n	800918a <__gethex+0x13a>
 800912c:	f1a0 0210 	sub.w	r2, r0, #16
 8009130:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009134:	f7ff ff76 	bl	8009024 <__hexdig_fun>
 8009138:	f100 3cff 	add.w	ip, r0, #4294967295
 800913c:	fa5f fc8c 	uxtb.w	ip, ip
 8009140:	f1bc 0f18 	cmp.w	ip, #24
 8009144:	d91d      	bls.n	8009182 <__gethex+0x132>
 8009146:	f1bb 0f00 	cmp.w	fp, #0
 800914a:	d000      	beq.n	800914e <__gethex+0xfe>
 800914c:	4252      	negs	r2, r2
 800914e:	4416      	add	r6, r2
 8009150:	f8ca 1000 	str.w	r1, [sl]
 8009154:	b1dc      	cbz	r4, 800918e <__gethex+0x13e>
 8009156:	9b01      	ldr	r3, [sp, #4]
 8009158:	2b00      	cmp	r3, #0
 800915a:	bf14      	ite	ne
 800915c:	f04f 0800 	movne.w	r8, #0
 8009160:	f04f 0806 	moveq.w	r8, #6
 8009164:	4640      	mov	r0, r8
 8009166:	b005      	add	sp, #20
 8009168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800916c:	4645      	mov	r5, r8
 800916e:	4626      	mov	r6, r4
 8009170:	2401      	movs	r4, #1
 8009172:	e7c7      	b.n	8009104 <__gethex+0xb4>
 8009174:	f04f 0b00 	mov.w	fp, #0
 8009178:	1ca9      	adds	r1, r5, #2
 800917a:	e7d0      	b.n	800911e <__gethex+0xce>
 800917c:	f04f 0b01 	mov.w	fp, #1
 8009180:	e7fa      	b.n	8009178 <__gethex+0x128>
 8009182:	230a      	movs	r3, #10
 8009184:	fb03 0002 	mla	r0, r3, r2, r0
 8009188:	e7d0      	b.n	800912c <__gethex+0xdc>
 800918a:	4629      	mov	r1, r5
 800918c:	e7e0      	b.n	8009150 <__gethex+0x100>
 800918e:	eba5 0308 	sub.w	r3, r5, r8
 8009192:	3b01      	subs	r3, #1
 8009194:	4621      	mov	r1, r4
 8009196:	2b07      	cmp	r3, #7
 8009198:	dc0a      	bgt.n	80091b0 <__gethex+0x160>
 800919a:	4648      	mov	r0, r9
 800919c:	f7fe f9a2 	bl	80074e4 <_Balloc>
 80091a0:	4604      	mov	r4, r0
 80091a2:	b940      	cbnz	r0, 80091b6 <__gethex+0x166>
 80091a4:	4b61      	ldr	r3, [pc, #388]	; (800932c <__gethex+0x2dc>)
 80091a6:	4602      	mov	r2, r0
 80091a8:	21e4      	movs	r1, #228	; 0xe4
 80091aa:	4861      	ldr	r0, [pc, #388]	; (8009330 <__gethex+0x2e0>)
 80091ac:	f7ff feb4 	bl	8008f18 <__assert_func>
 80091b0:	3101      	adds	r1, #1
 80091b2:	105b      	asrs	r3, r3, #1
 80091b4:	e7ef      	b.n	8009196 <__gethex+0x146>
 80091b6:	f100 0a14 	add.w	sl, r0, #20
 80091ba:	2300      	movs	r3, #0
 80091bc:	495a      	ldr	r1, [pc, #360]	; (8009328 <__gethex+0x2d8>)
 80091be:	f8cd a004 	str.w	sl, [sp, #4]
 80091c2:	469b      	mov	fp, r3
 80091c4:	45a8      	cmp	r8, r5
 80091c6:	d342      	bcc.n	800924e <__gethex+0x1fe>
 80091c8:	9801      	ldr	r0, [sp, #4]
 80091ca:	f840 bb04 	str.w	fp, [r0], #4
 80091ce:	eba0 000a 	sub.w	r0, r0, sl
 80091d2:	1080      	asrs	r0, r0, #2
 80091d4:	6120      	str	r0, [r4, #16]
 80091d6:	ea4f 1840 	mov.w	r8, r0, lsl #5
 80091da:	4658      	mov	r0, fp
 80091dc:	f7fe fa74 	bl	80076c8 <__hi0bits>
 80091e0:	683d      	ldr	r5, [r7, #0]
 80091e2:	eba8 0000 	sub.w	r0, r8, r0
 80091e6:	42a8      	cmp	r0, r5
 80091e8:	dd59      	ble.n	800929e <__gethex+0x24e>
 80091ea:	eba0 0805 	sub.w	r8, r0, r5
 80091ee:	4641      	mov	r1, r8
 80091f0:	4620      	mov	r0, r4
 80091f2:	f7fe fe03 	bl	8007dfc <__any_on>
 80091f6:	4683      	mov	fp, r0
 80091f8:	b1b8      	cbz	r0, 800922a <__gethex+0x1da>
 80091fa:	f108 33ff 	add.w	r3, r8, #4294967295
 80091fe:	1159      	asrs	r1, r3, #5
 8009200:	f003 021f 	and.w	r2, r3, #31
 8009204:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009208:	f04f 0b01 	mov.w	fp, #1
 800920c:	fa0b f202 	lsl.w	r2, fp, r2
 8009210:	420a      	tst	r2, r1
 8009212:	d00a      	beq.n	800922a <__gethex+0x1da>
 8009214:	455b      	cmp	r3, fp
 8009216:	dd06      	ble.n	8009226 <__gethex+0x1d6>
 8009218:	f1a8 0102 	sub.w	r1, r8, #2
 800921c:	4620      	mov	r0, r4
 800921e:	f7fe fded 	bl	8007dfc <__any_on>
 8009222:	2800      	cmp	r0, #0
 8009224:	d138      	bne.n	8009298 <__gethex+0x248>
 8009226:	f04f 0b02 	mov.w	fp, #2
 800922a:	4641      	mov	r1, r8
 800922c:	4620      	mov	r0, r4
 800922e:	f7ff fea7 	bl	8008f80 <rshift>
 8009232:	4446      	add	r6, r8
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	42b3      	cmp	r3, r6
 8009238:	da41      	bge.n	80092be <__gethex+0x26e>
 800923a:	4621      	mov	r1, r4
 800923c:	4648      	mov	r0, r9
 800923e:	f7fe f991 	bl	8007564 <_Bfree>
 8009242:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009244:	2300      	movs	r3, #0
 8009246:	6013      	str	r3, [r2, #0]
 8009248:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800924c:	e78a      	b.n	8009164 <__gethex+0x114>
 800924e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8009252:	2a2e      	cmp	r2, #46	; 0x2e
 8009254:	d014      	beq.n	8009280 <__gethex+0x230>
 8009256:	2b20      	cmp	r3, #32
 8009258:	d106      	bne.n	8009268 <__gethex+0x218>
 800925a:	9b01      	ldr	r3, [sp, #4]
 800925c:	f843 bb04 	str.w	fp, [r3], #4
 8009260:	f04f 0b00 	mov.w	fp, #0
 8009264:	9301      	str	r3, [sp, #4]
 8009266:	465b      	mov	r3, fp
 8009268:	7828      	ldrb	r0, [r5, #0]
 800926a:	9303      	str	r3, [sp, #12]
 800926c:	f7ff feda 	bl	8009024 <__hexdig_fun>
 8009270:	9b03      	ldr	r3, [sp, #12]
 8009272:	f000 000f 	and.w	r0, r0, #15
 8009276:	4098      	lsls	r0, r3
 8009278:	ea4b 0b00 	orr.w	fp, fp, r0
 800927c:	3304      	adds	r3, #4
 800927e:	e7a1      	b.n	80091c4 <__gethex+0x174>
 8009280:	45a8      	cmp	r8, r5
 8009282:	d8e8      	bhi.n	8009256 <__gethex+0x206>
 8009284:	2201      	movs	r2, #1
 8009286:	4628      	mov	r0, r5
 8009288:	9303      	str	r3, [sp, #12]
 800928a:	f7ff fe0b 	bl	8008ea4 <strncmp>
 800928e:	4926      	ldr	r1, [pc, #152]	; (8009328 <__gethex+0x2d8>)
 8009290:	9b03      	ldr	r3, [sp, #12]
 8009292:	2800      	cmp	r0, #0
 8009294:	d1df      	bne.n	8009256 <__gethex+0x206>
 8009296:	e795      	b.n	80091c4 <__gethex+0x174>
 8009298:	f04f 0b03 	mov.w	fp, #3
 800929c:	e7c5      	b.n	800922a <__gethex+0x1da>
 800929e:	da0b      	bge.n	80092b8 <__gethex+0x268>
 80092a0:	eba5 0800 	sub.w	r8, r5, r0
 80092a4:	4621      	mov	r1, r4
 80092a6:	4642      	mov	r2, r8
 80092a8:	4648      	mov	r0, r9
 80092aa:	f7fe fb75 	bl	8007998 <__lshift>
 80092ae:	eba6 0608 	sub.w	r6, r6, r8
 80092b2:	4604      	mov	r4, r0
 80092b4:	f100 0a14 	add.w	sl, r0, #20
 80092b8:	f04f 0b00 	mov.w	fp, #0
 80092bc:	e7ba      	b.n	8009234 <__gethex+0x1e4>
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	42b3      	cmp	r3, r6
 80092c2:	dd73      	ble.n	80093ac <__gethex+0x35c>
 80092c4:	1b9e      	subs	r6, r3, r6
 80092c6:	42b5      	cmp	r5, r6
 80092c8:	dc34      	bgt.n	8009334 <__gethex+0x2e4>
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	2b02      	cmp	r3, #2
 80092ce:	d023      	beq.n	8009318 <__gethex+0x2c8>
 80092d0:	2b03      	cmp	r3, #3
 80092d2:	d025      	beq.n	8009320 <__gethex+0x2d0>
 80092d4:	2b01      	cmp	r3, #1
 80092d6:	d115      	bne.n	8009304 <__gethex+0x2b4>
 80092d8:	42b5      	cmp	r5, r6
 80092da:	d113      	bne.n	8009304 <__gethex+0x2b4>
 80092dc:	2d01      	cmp	r5, #1
 80092de:	d10b      	bne.n	80092f8 <__gethex+0x2a8>
 80092e0:	9a02      	ldr	r2, [sp, #8]
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6013      	str	r3, [r2, #0]
 80092e6:	2301      	movs	r3, #1
 80092e8:	6123      	str	r3, [r4, #16]
 80092ea:	f8ca 3000 	str.w	r3, [sl]
 80092ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80092f0:	f04f 0862 	mov.w	r8, #98	; 0x62
 80092f4:	601c      	str	r4, [r3, #0]
 80092f6:	e735      	b.n	8009164 <__gethex+0x114>
 80092f8:	1e69      	subs	r1, r5, #1
 80092fa:	4620      	mov	r0, r4
 80092fc:	f7fe fd7e 	bl	8007dfc <__any_on>
 8009300:	2800      	cmp	r0, #0
 8009302:	d1ed      	bne.n	80092e0 <__gethex+0x290>
 8009304:	4621      	mov	r1, r4
 8009306:	4648      	mov	r0, r9
 8009308:	f7fe f92c 	bl	8007564 <_Bfree>
 800930c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800930e:	2300      	movs	r3, #0
 8009310:	6013      	str	r3, [r2, #0]
 8009312:	f04f 0850 	mov.w	r8, #80	; 0x50
 8009316:	e725      	b.n	8009164 <__gethex+0x114>
 8009318:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800931a:	2b00      	cmp	r3, #0
 800931c:	d1f2      	bne.n	8009304 <__gethex+0x2b4>
 800931e:	e7df      	b.n	80092e0 <__gethex+0x290>
 8009320:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009322:	2b00      	cmp	r3, #0
 8009324:	d1dc      	bne.n	80092e0 <__gethex+0x290>
 8009326:	e7ed      	b.n	8009304 <__gethex+0x2b4>
 8009328:	0800a09c 	.word	0x0800a09c
 800932c:	08009f32 	.word	0x08009f32
 8009330:	0800a145 	.word	0x0800a145
 8009334:	f106 38ff 	add.w	r8, r6, #4294967295
 8009338:	f1bb 0f00 	cmp.w	fp, #0
 800933c:	d133      	bne.n	80093a6 <__gethex+0x356>
 800933e:	f1b8 0f00 	cmp.w	r8, #0
 8009342:	d004      	beq.n	800934e <__gethex+0x2fe>
 8009344:	4641      	mov	r1, r8
 8009346:	4620      	mov	r0, r4
 8009348:	f7fe fd58 	bl	8007dfc <__any_on>
 800934c:	4683      	mov	fp, r0
 800934e:	ea4f 1268 	mov.w	r2, r8, asr #5
 8009352:	2301      	movs	r3, #1
 8009354:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009358:	f008 081f 	and.w	r8, r8, #31
 800935c:	fa03 f308 	lsl.w	r3, r3, r8
 8009360:	4213      	tst	r3, r2
 8009362:	4631      	mov	r1, r6
 8009364:	4620      	mov	r0, r4
 8009366:	bf18      	it	ne
 8009368:	f04b 0b02 	orrne.w	fp, fp, #2
 800936c:	1bad      	subs	r5, r5, r6
 800936e:	f7ff fe07 	bl	8008f80 <rshift>
 8009372:	687e      	ldr	r6, [r7, #4]
 8009374:	f04f 0802 	mov.w	r8, #2
 8009378:	f1bb 0f00 	cmp.w	fp, #0
 800937c:	d04a      	beq.n	8009414 <__gethex+0x3c4>
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	2b02      	cmp	r3, #2
 8009382:	d016      	beq.n	80093b2 <__gethex+0x362>
 8009384:	2b03      	cmp	r3, #3
 8009386:	d018      	beq.n	80093ba <__gethex+0x36a>
 8009388:	2b01      	cmp	r3, #1
 800938a:	d109      	bne.n	80093a0 <__gethex+0x350>
 800938c:	f01b 0f02 	tst.w	fp, #2
 8009390:	d006      	beq.n	80093a0 <__gethex+0x350>
 8009392:	f8da 3000 	ldr.w	r3, [sl]
 8009396:	ea4b 0b03 	orr.w	fp, fp, r3
 800939a:	f01b 0f01 	tst.w	fp, #1
 800939e:	d10f      	bne.n	80093c0 <__gethex+0x370>
 80093a0:	f048 0810 	orr.w	r8, r8, #16
 80093a4:	e036      	b.n	8009414 <__gethex+0x3c4>
 80093a6:	f04f 0b01 	mov.w	fp, #1
 80093aa:	e7d0      	b.n	800934e <__gethex+0x2fe>
 80093ac:	f04f 0801 	mov.w	r8, #1
 80093b0:	e7e2      	b.n	8009378 <__gethex+0x328>
 80093b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80093b4:	f1c3 0301 	rsb	r3, r3, #1
 80093b8:	930f      	str	r3, [sp, #60]	; 0x3c
 80093ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d0ef      	beq.n	80093a0 <__gethex+0x350>
 80093c0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80093c4:	f104 0214 	add.w	r2, r4, #20
 80093c8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80093cc:	9301      	str	r3, [sp, #4]
 80093ce:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80093d2:	2300      	movs	r3, #0
 80093d4:	4694      	mov	ip, r2
 80093d6:	f852 1b04 	ldr.w	r1, [r2], #4
 80093da:	f1b1 3fff 	cmp.w	r1, #4294967295
 80093de:	d01e      	beq.n	800941e <__gethex+0x3ce>
 80093e0:	3101      	adds	r1, #1
 80093e2:	f8cc 1000 	str.w	r1, [ip]
 80093e6:	f1b8 0f02 	cmp.w	r8, #2
 80093ea:	f104 0214 	add.w	r2, r4, #20
 80093ee:	d13d      	bne.n	800946c <__gethex+0x41c>
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	3b01      	subs	r3, #1
 80093f4:	42ab      	cmp	r3, r5
 80093f6:	d10b      	bne.n	8009410 <__gethex+0x3c0>
 80093f8:	1169      	asrs	r1, r5, #5
 80093fa:	2301      	movs	r3, #1
 80093fc:	f005 051f 	and.w	r5, r5, #31
 8009400:	fa03 f505 	lsl.w	r5, r3, r5
 8009404:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009408:	421d      	tst	r5, r3
 800940a:	bf18      	it	ne
 800940c:	f04f 0801 	movne.w	r8, #1
 8009410:	f048 0820 	orr.w	r8, r8, #32
 8009414:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009416:	601c      	str	r4, [r3, #0]
 8009418:	9b02      	ldr	r3, [sp, #8]
 800941a:	601e      	str	r6, [r3, #0]
 800941c:	e6a2      	b.n	8009164 <__gethex+0x114>
 800941e:	4290      	cmp	r0, r2
 8009420:	f842 3c04 	str.w	r3, [r2, #-4]
 8009424:	d8d6      	bhi.n	80093d4 <__gethex+0x384>
 8009426:	68a2      	ldr	r2, [r4, #8]
 8009428:	4593      	cmp	fp, r2
 800942a:	db17      	blt.n	800945c <__gethex+0x40c>
 800942c:	6861      	ldr	r1, [r4, #4]
 800942e:	4648      	mov	r0, r9
 8009430:	3101      	adds	r1, #1
 8009432:	f7fe f857 	bl	80074e4 <_Balloc>
 8009436:	4682      	mov	sl, r0
 8009438:	b918      	cbnz	r0, 8009442 <__gethex+0x3f2>
 800943a:	4b1b      	ldr	r3, [pc, #108]	; (80094a8 <__gethex+0x458>)
 800943c:	4602      	mov	r2, r0
 800943e:	2184      	movs	r1, #132	; 0x84
 8009440:	e6b3      	b.n	80091aa <__gethex+0x15a>
 8009442:	6922      	ldr	r2, [r4, #16]
 8009444:	3202      	adds	r2, #2
 8009446:	f104 010c 	add.w	r1, r4, #12
 800944a:	0092      	lsls	r2, r2, #2
 800944c:	300c      	adds	r0, #12
 800944e:	f7ff fd4b 	bl	8008ee8 <memcpy>
 8009452:	4621      	mov	r1, r4
 8009454:	4648      	mov	r0, r9
 8009456:	f7fe f885 	bl	8007564 <_Bfree>
 800945a:	4654      	mov	r4, sl
 800945c:	6922      	ldr	r2, [r4, #16]
 800945e:	1c51      	adds	r1, r2, #1
 8009460:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009464:	6121      	str	r1, [r4, #16]
 8009466:	2101      	movs	r1, #1
 8009468:	6151      	str	r1, [r2, #20]
 800946a:	e7bc      	b.n	80093e6 <__gethex+0x396>
 800946c:	6921      	ldr	r1, [r4, #16]
 800946e:	4559      	cmp	r1, fp
 8009470:	dd0b      	ble.n	800948a <__gethex+0x43a>
 8009472:	2101      	movs	r1, #1
 8009474:	4620      	mov	r0, r4
 8009476:	f7ff fd83 	bl	8008f80 <rshift>
 800947a:	68bb      	ldr	r3, [r7, #8]
 800947c:	3601      	adds	r6, #1
 800947e:	42b3      	cmp	r3, r6
 8009480:	f6ff aedb 	blt.w	800923a <__gethex+0x1ea>
 8009484:	f04f 0801 	mov.w	r8, #1
 8009488:	e7c2      	b.n	8009410 <__gethex+0x3c0>
 800948a:	f015 051f 	ands.w	r5, r5, #31
 800948e:	d0f9      	beq.n	8009484 <__gethex+0x434>
 8009490:	9b01      	ldr	r3, [sp, #4]
 8009492:	441a      	add	r2, r3
 8009494:	f1c5 0520 	rsb	r5, r5, #32
 8009498:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800949c:	f7fe f914 	bl	80076c8 <__hi0bits>
 80094a0:	42a8      	cmp	r0, r5
 80094a2:	dbe6      	blt.n	8009472 <__gethex+0x422>
 80094a4:	e7ee      	b.n	8009484 <__gethex+0x434>
 80094a6:	bf00      	nop
 80094a8:	08009f32 	.word	0x08009f32

080094ac <L_shift>:
 80094ac:	f1c2 0208 	rsb	r2, r2, #8
 80094b0:	0092      	lsls	r2, r2, #2
 80094b2:	b570      	push	{r4, r5, r6, lr}
 80094b4:	f1c2 0620 	rsb	r6, r2, #32
 80094b8:	6843      	ldr	r3, [r0, #4]
 80094ba:	6804      	ldr	r4, [r0, #0]
 80094bc:	fa03 f506 	lsl.w	r5, r3, r6
 80094c0:	432c      	orrs	r4, r5
 80094c2:	40d3      	lsrs	r3, r2
 80094c4:	6004      	str	r4, [r0, #0]
 80094c6:	f840 3f04 	str.w	r3, [r0, #4]!
 80094ca:	4288      	cmp	r0, r1
 80094cc:	d3f4      	bcc.n	80094b8 <L_shift+0xc>
 80094ce:	bd70      	pop	{r4, r5, r6, pc}

080094d0 <__match>:
 80094d0:	b530      	push	{r4, r5, lr}
 80094d2:	6803      	ldr	r3, [r0, #0]
 80094d4:	3301      	adds	r3, #1
 80094d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80094da:	b914      	cbnz	r4, 80094e2 <__match+0x12>
 80094dc:	6003      	str	r3, [r0, #0]
 80094de:	2001      	movs	r0, #1
 80094e0:	bd30      	pop	{r4, r5, pc}
 80094e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80094e6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80094ea:	2d19      	cmp	r5, #25
 80094ec:	bf98      	it	ls
 80094ee:	3220      	addls	r2, #32
 80094f0:	42a2      	cmp	r2, r4
 80094f2:	d0f0      	beq.n	80094d6 <__match+0x6>
 80094f4:	2000      	movs	r0, #0
 80094f6:	e7f3      	b.n	80094e0 <__match+0x10>

080094f8 <__hexnan>:
 80094f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094fc:	680b      	ldr	r3, [r1, #0]
 80094fe:	6801      	ldr	r1, [r0, #0]
 8009500:	115e      	asrs	r6, r3, #5
 8009502:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009506:	f013 031f 	ands.w	r3, r3, #31
 800950a:	b087      	sub	sp, #28
 800950c:	bf18      	it	ne
 800950e:	3604      	addne	r6, #4
 8009510:	2500      	movs	r5, #0
 8009512:	1f37      	subs	r7, r6, #4
 8009514:	4682      	mov	sl, r0
 8009516:	4690      	mov	r8, r2
 8009518:	9301      	str	r3, [sp, #4]
 800951a:	f846 5c04 	str.w	r5, [r6, #-4]
 800951e:	46b9      	mov	r9, r7
 8009520:	463c      	mov	r4, r7
 8009522:	9502      	str	r5, [sp, #8]
 8009524:	46ab      	mov	fp, r5
 8009526:	784a      	ldrb	r2, [r1, #1]
 8009528:	1c4b      	adds	r3, r1, #1
 800952a:	9303      	str	r3, [sp, #12]
 800952c:	b342      	cbz	r2, 8009580 <__hexnan+0x88>
 800952e:	4610      	mov	r0, r2
 8009530:	9105      	str	r1, [sp, #20]
 8009532:	9204      	str	r2, [sp, #16]
 8009534:	f7ff fd76 	bl	8009024 <__hexdig_fun>
 8009538:	2800      	cmp	r0, #0
 800953a:	d14f      	bne.n	80095dc <__hexnan+0xe4>
 800953c:	9a04      	ldr	r2, [sp, #16]
 800953e:	9905      	ldr	r1, [sp, #20]
 8009540:	2a20      	cmp	r2, #32
 8009542:	d818      	bhi.n	8009576 <__hexnan+0x7e>
 8009544:	9b02      	ldr	r3, [sp, #8]
 8009546:	459b      	cmp	fp, r3
 8009548:	dd13      	ble.n	8009572 <__hexnan+0x7a>
 800954a:	454c      	cmp	r4, r9
 800954c:	d206      	bcs.n	800955c <__hexnan+0x64>
 800954e:	2d07      	cmp	r5, #7
 8009550:	dc04      	bgt.n	800955c <__hexnan+0x64>
 8009552:	462a      	mov	r2, r5
 8009554:	4649      	mov	r1, r9
 8009556:	4620      	mov	r0, r4
 8009558:	f7ff ffa8 	bl	80094ac <L_shift>
 800955c:	4544      	cmp	r4, r8
 800955e:	d950      	bls.n	8009602 <__hexnan+0x10a>
 8009560:	2300      	movs	r3, #0
 8009562:	f1a4 0904 	sub.w	r9, r4, #4
 8009566:	f844 3c04 	str.w	r3, [r4, #-4]
 800956a:	f8cd b008 	str.w	fp, [sp, #8]
 800956e:	464c      	mov	r4, r9
 8009570:	461d      	mov	r5, r3
 8009572:	9903      	ldr	r1, [sp, #12]
 8009574:	e7d7      	b.n	8009526 <__hexnan+0x2e>
 8009576:	2a29      	cmp	r2, #41	; 0x29
 8009578:	d155      	bne.n	8009626 <__hexnan+0x12e>
 800957a:	3102      	adds	r1, #2
 800957c:	f8ca 1000 	str.w	r1, [sl]
 8009580:	f1bb 0f00 	cmp.w	fp, #0
 8009584:	d04f      	beq.n	8009626 <__hexnan+0x12e>
 8009586:	454c      	cmp	r4, r9
 8009588:	d206      	bcs.n	8009598 <__hexnan+0xa0>
 800958a:	2d07      	cmp	r5, #7
 800958c:	dc04      	bgt.n	8009598 <__hexnan+0xa0>
 800958e:	462a      	mov	r2, r5
 8009590:	4649      	mov	r1, r9
 8009592:	4620      	mov	r0, r4
 8009594:	f7ff ff8a 	bl	80094ac <L_shift>
 8009598:	4544      	cmp	r4, r8
 800959a:	d934      	bls.n	8009606 <__hexnan+0x10e>
 800959c:	f1a8 0204 	sub.w	r2, r8, #4
 80095a0:	4623      	mov	r3, r4
 80095a2:	f853 1b04 	ldr.w	r1, [r3], #4
 80095a6:	f842 1f04 	str.w	r1, [r2, #4]!
 80095aa:	429f      	cmp	r7, r3
 80095ac:	d2f9      	bcs.n	80095a2 <__hexnan+0xaa>
 80095ae:	1b3b      	subs	r3, r7, r4
 80095b0:	f023 0303 	bic.w	r3, r3, #3
 80095b4:	3304      	adds	r3, #4
 80095b6:	3e03      	subs	r6, #3
 80095b8:	3401      	adds	r4, #1
 80095ba:	42a6      	cmp	r6, r4
 80095bc:	bf38      	it	cc
 80095be:	2304      	movcc	r3, #4
 80095c0:	4443      	add	r3, r8
 80095c2:	2200      	movs	r2, #0
 80095c4:	f843 2b04 	str.w	r2, [r3], #4
 80095c8:	429f      	cmp	r7, r3
 80095ca:	d2fb      	bcs.n	80095c4 <__hexnan+0xcc>
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	b91b      	cbnz	r3, 80095d8 <__hexnan+0xe0>
 80095d0:	4547      	cmp	r7, r8
 80095d2:	d126      	bne.n	8009622 <__hexnan+0x12a>
 80095d4:	2301      	movs	r3, #1
 80095d6:	603b      	str	r3, [r7, #0]
 80095d8:	2005      	movs	r0, #5
 80095da:	e025      	b.n	8009628 <__hexnan+0x130>
 80095dc:	3501      	adds	r5, #1
 80095de:	2d08      	cmp	r5, #8
 80095e0:	f10b 0b01 	add.w	fp, fp, #1
 80095e4:	dd06      	ble.n	80095f4 <__hexnan+0xfc>
 80095e6:	4544      	cmp	r4, r8
 80095e8:	d9c3      	bls.n	8009572 <__hexnan+0x7a>
 80095ea:	2300      	movs	r3, #0
 80095ec:	f844 3c04 	str.w	r3, [r4, #-4]
 80095f0:	2501      	movs	r5, #1
 80095f2:	3c04      	subs	r4, #4
 80095f4:	6822      	ldr	r2, [r4, #0]
 80095f6:	f000 000f 	and.w	r0, r0, #15
 80095fa:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80095fe:	6020      	str	r0, [r4, #0]
 8009600:	e7b7      	b.n	8009572 <__hexnan+0x7a>
 8009602:	2508      	movs	r5, #8
 8009604:	e7b5      	b.n	8009572 <__hexnan+0x7a>
 8009606:	9b01      	ldr	r3, [sp, #4]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d0df      	beq.n	80095cc <__hexnan+0xd4>
 800960c:	f1c3 0320 	rsb	r3, r3, #32
 8009610:	f04f 32ff 	mov.w	r2, #4294967295
 8009614:	40da      	lsrs	r2, r3
 8009616:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800961a:	4013      	ands	r3, r2
 800961c:	f846 3c04 	str.w	r3, [r6, #-4]
 8009620:	e7d4      	b.n	80095cc <__hexnan+0xd4>
 8009622:	3f04      	subs	r7, #4
 8009624:	e7d2      	b.n	80095cc <__hexnan+0xd4>
 8009626:	2004      	movs	r0, #4
 8009628:	b007      	add	sp, #28
 800962a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800962e <__ascii_mbtowc>:
 800962e:	b082      	sub	sp, #8
 8009630:	b901      	cbnz	r1, 8009634 <__ascii_mbtowc+0x6>
 8009632:	a901      	add	r1, sp, #4
 8009634:	b142      	cbz	r2, 8009648 <__ascii_mbtowc+0x1a>
 8009636:	b14b      	cbz	r3, 800964c <__ascii_mbtowc+0x1e>
 8009638:	7813      	ldrb	r3, [r2, #0]
 800963a:	600b      	str	r3, [r1, #0]
 800963c:	7812      	ldrb	r2, [r2, #0]
 800963e:	1e10      	subs	r0, r2, #0
 8009640:	bf18      	it	ne
 8009642:	2001      	movne	r0, #1
 8009644:	b002      	add	sp, #8
 8009646:	4770      	bx	lr
 8009648:	4610      	mov	r0, r2
 800964a:	e7fb      	b.n	8009644 <__ascii_mbtowc+0x16>
 800964c:	f06f 0001 	mvn.w	r0, #1
 8009650:	e7f8      	b.n	8009644 <__ascii_mbtowc+0x16>

08009652 <_realloc_r>:
 8009652:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009656:	4680      	mov	r8, r0
 8009658:	4614      	mov	r4, r2
 800965a:	460e      	mov	r6, r1
 800965c:	b921      	cbnz	r1, 8009668 <_realloc_r+0x16>
 800965e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009662:	4611      	mov	r1, r2
 8009664:	f7fd beb2 	b.w	80073cc <_malloc_r>
 8009668:	b92a      	cbnz	r2, 8009676 <_realloc_r+0x24>
 800966a:	f7fd fe3b 	bl	80072e4 <_free_r>
 800966e:	4625      	mov	r5, r4
 8009670:	4628      	mov	r0, r5
 8009672:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009676:	f000 f842 	bl	80096fe <_malloc_usable_size_r>
 800967a:	4284      	cmp	r4, r0
 800967c:	4607      	mov	r7, r0
 800967e:	d802      	bhi.n	8009686 <_realloc_r+0x34>
 8009680:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009684:	d812      	bhi.n	80096ac <_realloc_r+0x5a>
 8009686:	4621      	mov	r1, r4
 8009688:	4640      	mov	r0, r8
 800968a:	f7fd fe9f 	bl	80073cc <_malloc_r>
 800968e:	4605      	mov	r5, r0
 8009690:	2800      	cmp	r0, #0
 8009692:	d0ed      	beq.n	8009670 <_realloc_r+0x1e>
 8009694:	42bc      	cmp	r4, r7
 8009696:	4622      	mov	r2, r4
 8009698:	4631      	mov	r1, r6
 800969a:	bf28      	it	cs
 800969c:	463a      	movcs	r2, r7
 800969e:	f7ff fc23 	bl	8008ee8 <memcpy>
 80096a2:	4631      	mov	r1, r6
 80096a4:	4640      	mov	r0, r8
 80096a6:	f7fd fe1d 	bl	80072e4 <_free_r>
 80096aa:	e7e1      	b.n	8009670 <_realloc_r+0x1e>
 80096ac:	4635      	mov	r5, r6
 80096ae:	e7df      	b.n	8009670 <_realloc_r+0x1e>

080096b0 <__ascii_wctomb>:
 80096b0:	b149      	cbz	r1, 80096c6 <__ascii_wctomb+0x16>
 80096b2:	2aff      	cmp	r2, #255	; 0xff
 80096b4:	bf85      	ittet	hi
 80096b6:	238a      	movhi	r3, #138	; 0x8a
 80096b8:	6003      	strhi	r3, [r0, #0]
 80096ba:	700a      	strbls	r2, [r1, #0]
 80096bc:	f04f 30ff 	movhi.w	r0, #4294967295
 80096c0:	bf98      	it	ls
 80096c2:	2001      	movls	r0, #1
 80096c4:	4770      	bx	lr
 80096c6:	4608      	mov	r0, r1
 80096c8:	4770      	bx	lr
	...

080096cc <fiprintf>:
 80096cc:	b40e      	push	{r1, r2, r3}
 80096ce:	b503      	push	{r0, r1, lr}
 80096d0:	4601      	mov	r1, r0
 80096d2:	ab03      	add	r3, sp, #12
 80096d4:	4805      	ldr	r0, [pc, #20]	; (80096ec <fiprintf+0x20>)
 80096d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80096da:	6800      	ldr	r0, [r0, #0]
 80096dc:	9301      	str	r3, [sp, #4]
 80096de:	f000 f83f 	bl	8009760 <_vfiprintf_r>
 80096e2:	b002      	add	sp, #8
 80096e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80096e8:	b003      	add	sp, #12
 80096ea:	4770      	bx	lr
 80096ec:	20000064 	.word	0x20000064

080096f0 <abort>:
 80096f0:	b508      	push	{r3, lr}
 80096f2:	2006      	movs	r0, #6
 80096f4:	f000 fa0c 	bl	8009b10 <raise>
 80096f8:	2001      	movs	r0, #1
 80096fa:	f7f8 fbe5 	bl	8001ec8 <_exit>

080096fe <_malloc_usable_size_r>:
 80096fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009702:	1f18      	subs	r0, r3, #4
 8009704:	2b00      	cmp	r3, #0
 8009706:	bfbc      	itt	lt
 8009708:	580b      	ldrlt	r3, [r1, r0]
 800970a:	18c0      	addlt	r0, r0, r3
 800970c:	4770      	bx	lr

0800970e <__sfputc_r>:
 800970e:	6893      	ldr	r3, [r2, #8]
 8009710:	3b01      	subs	r3, #1
 8009712:	2b00      	cmp	r3, #0
 8009714:	b410      	push	{r4}
 8009716:	6093      	str	r3, [r2, #8]
 8009718:	da08      	bge.n	800972c <__sfputc_r+0x1e>
 800971a:	6994      	ldr	r4, [r2, #24]
 800971c:	42a3      	cmp	r3, r4
 800971e:	db01      	blt.n	8009724 <__sfputc_r+0x16>
 8009720:	290a      	cmp	r1, #10
 8009722:	d103      	bne.n	800972c <__sfputc_r+0x1e>
 8009724:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009728:	f000 b934 	b.w	8009994 <__swbuf_r>
 800972c:	6813      	ldr	r3, [r2, #0]
 800972e:	1c58      	adds	r0, r3, #1
 8009730:	6010      	str	r0, [r2, #0]
 8009732:	7019      	strb	r1, [r3, #0]
 8009734:	4608      	mov	r0, r1
 8009736:	f85d 4b04 	ldr.w	r4, [sp], #4
 800973a:	4770      	bx	lr

0800973c <__sfputs_r>:
 800973c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800973e:	4606      	mov	r6, r0
 8009740:	460f      	mov	r7, r1
 8009742:	4614      	mov	r4, r2
 8009744:	18d5      	adds	r5, r2, r3
 8009746:	42ac      	cmp	r4, r5
 8009748:	d101      	bne.n	800974e <__sfputs_r+0x12>
 800974a:	2000      	movs	r0, #0
 800974c:	e007      	b.n	800975e <__sfputs_r+0x22>
 800974e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009752:	463a      	mov	r2, r7
 8009754:	4630      	mov	r0, r6
 8009756:	f7ff ffda 	bl	800970e <__sfputc_r>
 800975a:	1c43      	adds	r3, r0, #1
 800975c:	d1f3      	bne.n	8009746 <__sfputs_r+0xa>
 800975e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009760 <_vfiprintf_r>:
 8009760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009764:	460d      	mov	r5, r1
 8009766:	b09d      	sub	sp, #116	; 0x74
 8009768:	4614      	mov	r4, r2
 800976a:	4698      	mov	r8, r3
 800976c:	4606      	mov	r6, r0
 800976e:	b118      	cbz	r0, 8009778 <_vfiprintf_r+0x18>
 8009770:	6a03      	ldr	r3, [r0, #32]
 8009772:	b90b      	cbnz	r3, 8009778 <_vfiprintf_r+0x18>
 8009774:	f7fc fe1a 	bl	80063ac <__sinit>
 8009778:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800977a:	07d9      	lsls	r1, r3, #31
 800977c:	d405      	bmi.n	800978a <_vfiprintf_r+0x2a>
 800977e:	89ab      	ldrh	r3, [r5, #12]
 8009780:	059a      	lsls	r2, r3, #22
 8009782:	d402      	bmi.n	800978a <_vfiprintf_r+0x2a>
 8009784:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009786:	f7fc ff28 	bl	80065da <__retarget_lock_acquire_recursive>
 800978a:	89ab      	ldrh	r3, [r5, #12]
 800978c:	071b      	lsls	r3, r3, #28
 800978e:	d501      	bpl.n	8009794 <_vfiprintf_r+0x34>
 8009790:	692b      	ldr	r3, [r5, #16]
 8009792:	b99b      	cbnz	r3, 80097bc <_vfiprintf_r+0x5c>
 8009794:	4629      	mov	r1, r5
 8009796:	4630      	mov	r0, r6
 8009798:	f000 f93a 	bl	8009a10 <__swsetup_r>
 800979c:	b170      	cbz	r0, 80097bc <_vfiprintf_r+0x5c>
 800979e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80097a0:	07dc      	lsls	r4, r3, #31
 80097a2:	d504      	bpl.n	80097ae <_vfiprintf_r+0x4e>
 80097a4:	f04f 30ff 	mov.w	r0, #4294967295
 80097a8:	b01d      	add	sp, #116	; 0x74
 80097aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097ae:	89ab      	ldrh	r3, [r5, #12]
 80097b0:	0598      	lsls	r0, r3, #22
 80097b2:	d4f7      	bmi.n	80097a4 <_vfiprintf_r+0x44>
 80097b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80097b6:	f7fc ff11 	bl	80065dc <__retarget_lock_release_recursive>
 80097ba:	e7f3      	b.n	80097a4 <_vfiprintf_r+0x44>
 80097bc:	2300      	movs	r3, #0
 80097be:	9309      	str	r3, [sp, #36]	; 0x24
 80097c0:	2320      	movs	r3, #32
 80097c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80097c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80097ca:	2330      	movs	r3, #48	; 0x30
 80097cc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009980 <_vfiprintf_r+0x220>
 80097d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80097d4:	f04f 0901 	mov.w	r9, #1
 80097d8:	4623      	mov	r3, r4
 80097da:	469a      	mov	sl, r3
 80097dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80097e0:	b10a      	cbz	r2, 80097e6 <_vfiprintf_r+0x86>
 80097e2:	2a25      	cmp	r2, #37	; 0x25
 80097e4:	d1f9      	bne.n	80097da <_vfiprintf_r+0x7a>
 80097e6:	ebba 0b04 	subs.w	fp, sl, r4
 80097ea:	d00b      	beq.n	8009804 <_vfiprintf_r+0xa4>
 80097ec:	465b      	mov	r3, fp
 80097ee:	4622      	mov	r2, r4
 80097f0:	4629      	mov	r1, r5
 80097f2:	4630      	mov	r0, r6
 80097f4:	f7ff ffa2 	bl	800973c <__sfputs_r>
 80097f8:	3001      	adds	r0, #1
 80097fa:	f000 80a9 	beq.w	8009950 <_vfiprintf_r+0x1f0>
 80097fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009800:	445a      	add	r2, fp
 8009802:	9209      	str	r2, [sp, #36]	; 0x24
 8009804:	f89a 3000 	ldrb.w	r3, [sl]
 8009808:	2b00      	cmp	r3, #0
 800980a:	f000 80a1 	beq.w	8009950 <_vfiprintf_r+0x1f0>
 800980e:	2300      	movs	r3, #0
 8009810:	f04f 32ff 	mov.w	r2, #4294967295
 8009814:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009818:	f10a 0a01 	add.w	sl, sl, #1
 800981c:	9304      	str	r3, [sp, #16]
 800981e:	9307      	str	r3, [sp, #28]
 8009820:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009824:	931a      	str	r3, [sp, #104]	; 0x68
 8009826:	4654      	mov	r4, sl
 8009828:	2205      	movs	r2, #5
 800982a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800982e:	4854      	ldr	r0, [pc, #336]	; (8009980 <_vfiprintf_r+0x220>)
 8009830:	f7f6 fcde 	bl	80001f0 <memchr>
 8009834:	9a04      	ldr	r2, [sp, #16]
 8009836:	b9d8      	cbnz	r0, 8009870 <_vfiprintf_r+0x110>
 8009838:	06d1      	lsls	r1, r2, #27
 800983a:	bf44      	itt	mi
 800983c:	2320      	movmi	r3, #32
 800983e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009842:	0713      	lsls	r3, r2, #28
 8009844:	bf44      	itt	mi
 8009846:	232b      	movmi	r3, #43	; 0x2b
 8009848:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800984c:	f89a 3000 	ldrb.w	r3, [sl]
 8009850:	2b2a      	cmp	r3, #42	; 0x2a
 8009852:	d015      	beq.n	8009880 <_vfiprintf_r+0x120>
 8009854:	9a07      	ldr	r2, [sp, #28]
 8009856:	4654      	mov	r4, sl
 8009858:	2000      	movs	r0, #0
 800985a:	f04f 0c0a 	mov.w	ip, #10
 800985e:	4621      	mov	r1, r4
 8009860:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009864:	3b30      	subs	r3, #48	; 0x30
 8009866:	2b09      	cmp	r3, #9
 8009868:	d94d      	bls.n	8009906 <_vfiprintf_r+0x1a6>
 800986a:	b1b0      	cbz	r0, 800989a <_vfiprintf_r+0x13a>
 800986c:	9207      	str	r2, [sp, #28]
 800986e:	e014      	b.n	800989a <_vfiprintf_r+0x13a>
 8009870:	eba0 0308 	sub.w	r3, r0, r8
 8009874:	fa09 f303 	lsl.w	r3, r9, r3
 8009878:	4313      	orrs	r3, r2
 800987a:	9304      	str	r3, [sp, #16]
 800987c:	46a2      	mov	sl, r4
 800987e:	e7d2      	b.n	8009826 <_vfiprintf_r+0xc6>
 8009880:	9b03      	ldr	r3, [sp, #12]
 8009882:	1d19      	adds	r1, r3, #4
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	9103      	str	r1, [sp, #12]
 8009888:	2b00      	cmp	r3, #0
 800988a:	bfbb      	ittet	lt
 800988c:	425b      	neglt	r3, r3
 800988e:	f042 0202 	orrlt.w	r2, r2, #2
 8009892:	9307      	strge	r3, [sp, #28]
 8009894:	9307      	strlt	r3, [sp, #28]
 8009896:	bfb8      	it	lt
 8009898:	9204      	strlt	r2, [sp, #16]
 800989a:	7823      	ldrb	r3, [r4, #0]
 800989c:	2b2e      	cmp	r3, #46	; 0x2e
 800989e:	d10c      	bne.n	80098ba <_vfiprintf_r+0x15a>
 80098a0:	7863      	ldrb	r3, [r4, #1]
 80098a2:	2b2a      	cmp	r3, #42	; 0x2a
 80098a4:	d134      	bne.n	8009910 <_vfiprintf_r+0x1b0>
 80098a6:	9b03      	ldr	r3, [sp, #12]
 80098a8:	1d1a      	adds	r2, r3, #4
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	9203      	str	r2, [sp, #12]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	bfb8      	it	lt
 80098b2:	f04f 33ff 	movlt.w	r3, #4294967295
 80098b6:	3402      	adds	r4, #2
 80098b8:	9305      	str	r3, [sp, #20]
 80098ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009990 <_vfiprintf_r+0x230>
 80098be:	7821      	ldrb	r1, [r4, #0]
 80098c0:	2203      	movs	r2, #3
 80098c2:	4650      	mov	r0, sl
 80098c4:	f7f6 fc94 	bl	80001f0 <memchr>
 80098c8:	b138      	cbz	r0, 80098da <_vfiprintf_r+0x17a>
 80098ca:	9b04      	ldr	r3, [sp, #16]
 80098cc:	eba0 000a 	sub.w	r0, r0, sl
 80098d0:	2240      	movs	r2, #64	; 0x40
 80098d2:	4082      	lsls	r2, r0
 80098d4:	4313      	orrs	r3, r2
 80098d6:	3401      	adds	r4, #1
 80098d8:	9304      	str	r3, [sp, #16]
 80098da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098de:	4829      	ldr	r0, [pc, #164]	; (8009984 <_vfiprintf_r+0x224>)
 80098e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80098e4:	2206      	movs	r2, #6
 80098e6:	f7f6 fc83 	bl	80001f0 <memchr>
 80098ea:	2800      	cmp	r0, #0
 80098ec:	d03f      	beq.n	800996e <_vfiprintf_r+0x20e>
 80098ee:	4b26      	ldr	r3, [pc, #152]	; (8009988 <_vfiprintf_r+0x228>)
 80098f0:	bb1b      	cbnz	r3, 800993a <_vfiprintf_r+0x1da>
 80098f2:	9b03      	ldr	r3, [sp, #12]
 80098f4:	3307      	adds	r3, #7
 80098f6:	f023 0307 	bic.w	r3, r3, #7
 80098fa:	3308      	adds	r3, #8
 80098fc:	9303      	str	r3, [sp, #12]
 80098fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009900:	443b      	add	r3, r7
 8009902:	9309      	str	r3, [sp, #36]	; 0x24
 8009904:	e768      	b.n	80097d8 <_vfiprintf_r+0x78>
 8009906:	fb0c 3202 	mla	r2, ip, r2, r3
 800990a:	460c      	mov	r4, r1
 800990c:	2001      	movs	r0, #1
 800990e:	e7a6      	b.n	800985e <_vfiprintf_r+0xfe>
 8009910:	2300      	movs	r3, #0
 8009912:	3401      	adds	r4, #1
 8009914:	9305      	str	r3, [sp, #20]
 8009916:	4619      	mov	r1, r3
 8009918:	f04f 0c0a 	mov.w	ip, #10
 800991c:	4620      	mov	r0, r4
 800991e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009922:	3a30      	subs	r2, #48	; 0x30
 8009924:	2a09      	cmp	r2, #9
 8009926:	d903      	bls.n	8009930 <_vfiprintf_r+0x1d0>
 8009928:	2b00      	cmp	r3, #0
 800992a:	d0c6      	beq.n	80098ba <_vfiprintf_r+0x15a>
 800992c:	9105      	str	r1, [sp, #20]
 800992e:	e7c4      	b.n	80098ba <_vfiprintf_r+0x15a>
 8009930:	fb0c 2101 	mla	r1, ip, r1, r2
 8009934:	4604      	mov	r4, r0
 8009936:	2301      	movs	r3, #1
 8009938:	e7f0      	b.n	800991c <_vfiprintf_r+0x1bc>
 800993a:	ab03      	add	r3, sp, #12
 800993c:	9300      	str	r3, [sp, #0]
 800993e:	462a      	mov	r2, r5
 8009940:	4b12      	ldr	r3, [pc, #72]	; (800998c <_vfiprintf_r+0x22c>)
 8009942:	a904      	add	r1, sp, #16
 8009944:	4630      	mov	r0, r6
 8009946:	f7fb fecf 	bl	80056e8 <_printf_float>
 800994a:	4607      	mov	r7, r0
 800994c:	1c78      	adds	r0, r7, #1
 800994e:	d1d6      	bne.n	80098fe <_vfiprintf_r+0x19e>
 8009950:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009952:	07d9      	lsls	r1, r3, #31
 8009954:	d405      	bmi.n	8009962 <_vfiprintf_r+0x202>
 8009956:	89ab      	ldrh	r3, [r5, #12]
 8009958:	059a      	lsls	r2, r3, #22
 800995a:	d402      	bmi.n	8009962 <_vfiprintf_r+0x202>
 800995c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800995e:	f7fc fe3d 	bl	80065dc <__retarget_lock_release_recursive>
 8009962:	89ab      	ldrh	r3, [r5, #12]
 8009964:	065b      	lsls	r3, r3, #25
 8009966:	f53f af1d 	bmi.w	80097a4 <_vfiprintf_r+0x44>
 800996a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800996c:	e71c      	b.n	80097a8 <_vfiprintf_r+0x48>
 800996e:	ab03      	add	r3, sp, #12
 8009970:	9300      	str	r3, [sp, #0]
 8009972:	462a      	mov	r2, r5
 8009974:	4b05      	ldr	r3, [pc, #20]	; (800998c <_vfiprintf_r+0x22c>)
 8009976:	a904      	add	r1, sp, #16
 8009978:	4630      	mov	r0, r6
 800997a:	f7fc f959 	bl	8005c30 <_printf_i>
 800997e:	e7e4      	b.n	800994a <_vfiprintf_r+0x1ea>
 8009980:	0800a0f0 	.word	0x0800a0f0
 8009984:	0800a0fa 	.word	0x0800a0fa
 8009988:	080056e9 	.word	0x080056e9
 800998c:	0800973d 	.word	0x0800973d
 8009990:	0800a0f6 	.word	0x0800a0f6

08009994 <__swbuf_r>:
 8009994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009996:	460e      	mov	r6, r1
 8009998:	4614      	mov	r4, r2
 800999a:	4605      	mov	r5, r0
 800999c:	b118      	cbz	r0, 80099a6 <__swbuf_r+0x12>
 800999e:	6a03      	ldr	r3, [r0, #32]
 80099a0:	b90b      	cbnz	r3, 80099a6 <__swbuf_r+0x12>
 80099a2:	f7fc fd03 	bl	80063ac <__sinit>
 80099a6:	69a3      	ldr	r3, [r4, #24]
 80099a8:	60a3      	str	r3, [r4, #8]
 80099aa:	89a3      	ldrh	r3, [r4, #12]
 80099ac:	071a      	lsls	r2, r3, #28
 80099ae:	d525      	bpl.n	80099fc <__swbuf_r+0x68>
 80099b0:	6923      	ldr	r3, [r4, #16]
 80099b2:	b31b      	cbz	r3, 80099fc <__swbuf_r+0x68>
 80099b4:	6823      	ldr	r3, [r4, #0]
 80099b6:	6922      	ldr	r2, [r4, #16]
 80099b8:	1a98      	subs	r0, r3, r2
 80099ba:	6963      	ldr	r3, [r4, #20]
 80099bc:	b2f6      	uxtb	r6, r6
 80099be:	4283      	cmp	r3, r0
 80099c0:	4637      	mov	r7, r6
 80099c2:	dc04      	bgt.n	80099ce <__swbuf_r+0x3a>
 80099c4:	4621      	mov	r1, r4
 80099c6:	4628      	mov	r0, r5
 80099c8:	f7ff fa2a 	bl	8008e20 <_fflush_r>
 80099cc:	b9e0      	cbnz	r0, 8009a08 <__swbuf_r+0x74>
 80099ce:	68a3      	ldr	r3, [r4, #8]
 80099d0:	3b01      	subs	r3, #1
 80099d2:	60a3      	str	r3, [r4, #8]
 80099d4:	6823      	ldr	r3, [r4, #0]
 80099d6:	1c5a      	adds	r2, r3, #1
 80099d8:	6022      	str	r2, [r4, #0]
 80099da:	701e      	strb	r6, [r3, #0]
 80099dc:	6962      	ldr	r2, [r4, #20]
 80099de:	1c43      	adds	r3, r0, #1
 80099e0:	429a      	cmp	r2, r3
 80099e2:	d004      	beq.n	80099ee <__swbuf_r+0x5a>
 80099e4:	89a3      	ldrh	r3, [r4, #12]
 80099e6:	07db      	lsls	r3, r3, #31
 80099e8:	d506      	bpl.n	80099f8 <__swbuf_r+0x64>
 80099ea:	2e0a      	cmp	r6, #10
 80099ec:	d104      	bne.n	80099f8 <__swbuf_r+0x64>
 80099ee:	4621      	mov	r1, r4
 80099f0:	4628      	mov	r0, r5
 80099f2:	f7ff fa15 	bl	8008e20 <_fflush_r>
 80099f6:	b938      	cbnz	r0, 8009a08 <__swbuf_r+0x74>
 80099f8:	4638      	mov	r0, r7
 80099fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099fc:	4621      	mov	r1, r4
 80099fe:	4628      	mov	r0, r5
 8009a00:	f000 f806 	bl	8009a10 <__swsetup_r>
 8009a04:	2800      	cmp	r0, #0
 8009a06:	d0d5      	beq.n	80099b4 <__swbuf_r+0x20>
 8009a08:	f04f 37ff 	mov.w	r7, #4294967295
 8009a0c:	e7f4      	b.n	80099f8 <__swbuf_r+0x64>
	...

08009a10 <__swsetup_r>:
 8009a10:	b538      	push	{r3, r4, r5, lr}
 8009a12:	4b2a      	ldr	r3, [pc, #168]	; (8009abc <__swsetup_r+0xac>)
 8009a14:	4605      	mov	r5, r0
 8009a16:	6818      	ldr	r0, [r3, #0]
 8009a18:	460c      	mov	r4, r1
 8009a1a:	b118      	cbz	r0, 8009a24 <__swsetup_r+0x14>
 8009a1c:	6a03      	ldr	r3, [r0, #32]
 8009a1e:	b90b      	cbnz	r3, 8009a24 <__swsetup_r+0x14>
 8009a20:	f7fc fcc4 	bl	80063ac <__sinit>
 8009a24:	89a3      	ldrh	r3, [r4, #12]
 8009a26:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009a2a:	0718      	lsls	r0, r3, #28
 8009a2c:	d422      	bmi.n	8009a74 <__swsetup_r+0x64>
 8009a2e:	06d9      	lsls	r1, r3, #27
 8009a30:	d407      	bmi.n	8009a42 <__swsetup_r+0x32>
 8009a32:	2309      	movs	r3, #9
 8009a34:	602b      	str	r3, [r5, #0]
 8009a36:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009a3a:	81a3      	strh	r3, [r4, #12]
 8009a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8009a40:	e034      	b.n	8009aac <__swsetup_r+0x9c>
 8009a42:	0758      	lsls	r0, r3, #29
 8009a44:	d512      	bpl.n	8009a6c <__swsetup_r+0x5c>
 8009a46:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a48:	b141      	cbz	r1, 8009a5c <__swsetup_r+0x4c>
 8009a4a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a4e:	4299      	cmp	r1, r3
 8009a50:	d002      	beq.n	8009a58 <__swsetup_r+0x48>
 8009a52:	4628      	mov	r0, r5
 8009a54:	f7fd fc46 	bl	80072e4 <_free_r>
 8009a58:	2300      	movs	r3, #0
 8009a5a:	6363      	str	r3, [r4, #52]	; 0x34
 8009a5c:	89a3      	ldrh	r3, [r4, #12]
 8009a5e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009a62:	81a3      	strh	r3, [r4, #12]
 8009a64:	2300      	movs	r3, #0
 8009a66:	6063      	str	r3, [r4, #4]
 8009a68:	6923      	ldr	r3, [r4, #16]
 8009a6a:	6023      	str	r3, [r4, #0]
 8009a6c:	89a3      	ldrh	r3, [r4, #12]
 8009a6e:	f043 0308 	orr.w	r3, r3, #8
 8009a72:	81a3      	strh	r3, [r4, #12]
 8009a74:	6923      	ldr	r3, [r4, #16]
 8009a76:	b94b      	cbnz	r3, 8009a8c <__swsetup_r+0x7c>
 8009a78:	89a3      	ldrh	r3, [r4, #12]
 8009a7a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009a7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a82:	d003      	beq.n	8009a8c <__swsetup_r+0x7c>
 8009a84:	4621      	mov	r1, r4
 8009a86:	4628      	mov	r0, r5
 8009a88:	f000 f884 	bl	8009b94 <__smakebuf_r>
 8009a8c:	89a0      	ldrh	r0, [r4, #12]
 8009a8e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009a92:	f010 0301 	ands.w	r3, r0, #1
 8009a96:	d00a      	beq.n	8009aae <__swsetup_r+0x9e>
 8009a98:	2300      	movs	r3, #0
 8009a9a:	60a3      	str	r3, [r4, #8]
 8009a9c:	6963      	ldr	r3, [r4, #20]
 8009a9e:	425b      	negs	r3, r3
 8009aa0:	61a3      	str	r3, [r4, #24]
 8009aa2:	6923      	ldr	r3, [r4, #16]
 8009aa4:	b943      	cbnz	r3, 8009ab8 <__swsetup_r+0xa8>
 8009aa6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009aaa:	d1c4      	bne.n	8009a36 <__swsetup_r+0x26>
 8009aac:	bd38      	pop	{r3, r4, r5, pc}
 8009aae:	0781      	lsls	r1, r0, #30
 8009ab0:	bf58      	it	pl
 8009ab2:	6963      	ldrpl	r3, [r4, #20]
 8009ab4:	60a3      	str	r3, [r4, #8]
 8009ab6:	e7f4      	b.n	8009aa2 <__swsetup_r+0x92>
 8009ab8:	2000      	movs	r0, #0
 8009aba:	e7f7      	b.n	8009aac <__swsetup_r+0x9c>
 8009abc:	20000064 	.word	0x20000064

08009ac0 <_raise_r>:
 8009ac0:	291f      	cmp	r1, #31
 8009ac2:	b538      	push	{r3, r4, r5, lr}
 8009ac4:	4604      	mov	r4, r0
 8009ac6:	460d      	mov	r5, r1
 8009ac8:	d904      	bls.n	8009ad4 <_raise_r+0x14>
 8009aca:	2316      	movs	r3, #22
 8009acc:	6003      	str	r3, [r0, #0]
 8009ace:	f04f 30ff 	mov.w	r0, #4294967295
 8009ad2:	bd38      	pop	{r3, r4, r5, pc}
 8009ad4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009ad6:	b112      	cbz	r2, 8009ade <_raise_r+0x1e>
 8009ad8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009adc:	b94b      	cbnz	r3, 8009af2 <_raise_r+0x32>
 8009ade:	4620      	mov	r0, r4
 8009ae0:	f000 f830 	bl	8009b44 <_getpid_r>
 8009ae4:	462a      	mov	r2, r5
 8009ae6:	4601      	mov	r1, r0
 8009ae8:	4620      	mov	r0, r4
 8009aea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009aee:	f000 b817 	b.w	8009b20 <_kill_r>
 8009af2:	2b01      	cmp	r3, #1
 8009af4:	d00a      	beq.n	8009b0c <_raise_r+0x4c>
 8009af6:	1c59      	adds	r1, r3, #1
 8009af8:	d103      	bne.n	8009b02 <_raise_r+0x42>
 8009afa:	2316      	movs	r3, #22
 8009afc:	6003      	str	r3, [r0, #0]
 8009afe:	2001      	movs	r0, #1
 8009b00:	e7e7      	b.n	8009ad2 <_raise_r+0x12>
 8009b02:	2400      	movs	r4, #0
 8009b04:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009b08:	4628      	mov	r0, r5
 8009b0a:	4798      	blx	r3
 8009b0c:	2000      	movs	r0, #0
 8009b0e:	e7e0      	b.n	8009ad2 <_raise_r+0x12>

08009b10 <raise>:
 8009b10:	4b02      	ldr	r3, [pc, #8]	; (8009b1c <raise+0xc>)
 8009b12:	4601      	mov	r1, r0
 8009b14:	6818      	ldr	r0, [r3, #0]
 8009b16:	f7ff bfd3 	b.w	8009ac0 <_raise_r>
 8009b1a:	bf00      	nop
 8009b1c:	20000064 	.word	0x20000064

08009b20 <_kill_r>:
 8009b20:	b538      	push	{r3, r4, r5, lr}
 8009b22:	4d07      	ldr	r5, [pc, #28]	; (8009b40 <_kill_r+0x20>)
 8009b24:	2300      	movs	r3, #0
 8009b26:	4604      	mov	r4, r0
 8009b28:	4608      	mov	r0, r1
 8009b2a:	4611      	mov	r1, r2
 8009b2c:	602b      	str	r3, [r5, #0]
 8009b2e:	f7f8 f9bb 	bl	8001ea8 <_kill>
 8009b32:	1c43      	adds	r3, r0, #1
 8009b34:	d102      	bne.n	8009b3c <_kill_r+0x1c>
 8009b36:	682b      	ldr	r3, [r5, #0]
 8009b38:	b103      	cbz	r3, 8009b3c <_kill_r+0x1c>
 8009b3a:	6023      	str	r3, [r4, #0]
 8009b3c:	bd38      	pop	{r3, r4, r5, pc}
 8009b3e:	bf00      	nop
 8009b40:	20000910 	.word	0x20000910

08009b44 <_getpid_r>:
 8009b44:	f7f8 b9a8 	b.w	8001e98 <_getpid>

08009b48 <__swhatbuf_r>:
 8009b48:	b570      	push	{r4, r5, r6, lr}
 8009b4a:	460c      	mov	r4, r1
 8009b4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b50:	2900      	cmp	r1, #0
 8009b52:	b096      	sub	sp, #88	; 0x58
 8009b54:	4615      	mov	r5, r2
 8009b56:	461e      	mov	r6, r3
 8009b58:	da0d      	bge.n	8009b76 <__swhatbuf_r+0x2e>
 8009b5a:	89a3      	ldrh	r3, [r4, #12]
 8009b5c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009b60:	f04f 0100 	mov.w	r1, #0
 8009b64:	bf0c      	ite	eq
 8009b66:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009b6a:	2340      	movne	r3, #64	; 0x40
 8009b6c:	2000      	movs	r0, #0
 8009b6e:	6031      	str	r1, [r6, #0]
 8009b70:	602b      	str	r3, [r5, #0]
 8009b72:	b016      	add	sp, #88	; 0x58
 8009b74:	bd70      	pop	{r4, r5, r6, pc}
 8009b76:	466a      	mov	r2, sp
 8009b78:	f000 f848 	bl	8009c0c <_fstat_r>
 8009b7c:	2800      	cmp	r0, #0
 8009b7e:	dbec      	blt.n	8009b5a <__swhatbuf_r+0x12>
 8009b80:	9901      	ldr	r1, [sp, #4]
 8009b82:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009b86:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009b8a:	4259      	negs	r1, r3
 8009b8c:	4159      	adcs	r1, r3
 8009b8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b92:	e7eb      	b.n	8009b6c <__swhatbuf_r+0x24>

08009b94 <__smakebuf_r>:
 8009b94:	898b      	ldrh	r3, [r1, #12]
 8009b96:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009b98:	079d      	lsls	r5, r3, #30
 8009b9a:	4606      	mov	r6, r0
 8009b9c:	460c      	mov	r4, r1
 8009b9e:	d507      	bpl.n	8009bb0 <__smakebuf_r+0x1c>
 8009ba0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009ba4:	6023      	str	r3, [r4, #0]
 8009ba6:	6123      	str	r3, [r4, #16]
 8009ba8:	2301      	movs	r3, #1
 8009baa:	6163      	str	r3, [r4, #20]
 8009bac:	b002      	add	sp, #8
 8009bae:	bd70      	pop	{r4, r5, r6, pc}
 8009bb0:	ab01      	add	r3, sp, #4
 8009bb2:	466a      	mov	r2, sp
 8009bb4:	f7ff ffc8 	bl	8009b48 <__swhatbuf_r>
 8009bb8:	9900      	ldr	r1, [sp, #0]
 8009bba:	4605      	mov	r5, r0
 8009bbc:	4630      	mov	r0, r6
 8009bbe:	f7fd fc05 	bl	80073cc <_malloc_r>
 8009bc2:	b948      	cbnz	r0, 8009bd8 <__smakebuf_r+0x44>
 8009bc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bc8:	059a      	lsls	r2, r3, #22
 8009bca:	d4ef      	bmi.n	8009bac <__smakebuf_r+0x18>
 8009bcc:	f023 0303 	bic.w	r3, r3, #3
 8009bd0:	f043 0302 	orr.w	r3, r3, #2
 8009bd4:	81a3      	strh	r3, [r4, #12]
 8009bd6:	e7e3      	b.n	8009ba0 <__smakebuf_r+0xc>
 8009bd8:	89a3      	ldrh	r3, [r4, #12]
 8009bda:	6020      	str	r0, [r4, #0]
 8009bdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009be0:	81a3      	strh	r3, [r4, #12]
 8009be2:	9b00      	ldr	r3, [sp, #0]
 8009be4:	6163      	str	r3, [r4, #20]
 8009be6:	9b01      	ldr	r3, [sp, #4]
 8009be8:	6120      	str	r0, [r4, #16]
 8009bea:	b15b      	cbz	r3, 8009c04 <__smakebuf_r+0x70>
 8009bec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009bf0:	4630      	mov	r0, r6
 8009bf2:	f000 f81d 	bl	8009c30 <_isatty_r>
 8009bf6:	b128      	cbz	r0, 8009c04 <__smakebuf_r+0x70>
 8009bf8:	89a3      	ldrh	r3, [r4, #12]
 8009bfa:	f023 0303 	bic.w	r3, r3, #3
 8009bfe:	f043 0301 	orr.w	r3, r3, #1
 8009c02:	81a3      	strh	r3, [r4, #12]
 8009c04:	89a3      	ldrh	r3, [r4, #12]
 8009c06:	431d      	orrs	r5, r3
 8009c08:	81a5      	strh	r5, [r4, #12]
 8009c0a:	e7cf      	b.n	8009bac <__smakebuf_r+0x18>

08009c0c <_fstat_r>:
 8009c0c:	b538      	push	{r3, r4, r5, lr}
 8009c0e:	4d07      	ldr	r5, [pc, #28]	; (8009c2c <_fstat_r+0x20>)
 8009c10:	2300      	movs	r3, #0
 8009c12:	4604      	mov	r4, r0
 8009c14:	4608      	mov	r0, r1
 8009c16:	4611      	mov	r1, r2
 8009c18:	602b      	str	r3, [r5, #0]
 8009c1a:	f7f8 f9a4 	bl	8001f66 <_fstat>
 8009c1e:	1c43      	adds	r3, r0, #1
 8009c20:	d102      	bne.n	8009c28 <_fstat_r+0x1c>
 8009c22:	682b      	ldr	r3, [r5, #0]
 8009c24:	b103      	cbz	r3, 8009c28 <_fstat_r+0x1c>
 8009c26:	6023      	str	r3, [r4, #0]
 8009c28:	bd38      	pop	{r3, r4, r5, pc}
 8009c2a:	bf00      	nop
 8009c2c:	20000910 	.word	0x20000910

08009c30 <_isatty_r>:
 8009c30:	b538      	push	{r3, r4, r5, lr}
 8009c32:	4d06      	ldr	r5, [pc, #24]	; (8009c4c <_isatty_r+0x1c>)
 8009c34:	2300      	movs	r3, #0
 8009c36:	4604      	mov	r4, r0
 8009c38:	4608      	mov	r0, r1
 8009c3a:	602b      	str	r3, [r5, #0]
 8009c3c:	f7f8 f9a3 	bl	8001f86 <_isatty>
 8009c40:	1c43      	adds	r3, r0, #1
 8009c42:	d102      	bne.n	8009c4a <_isatty_r+0x1a>
 8009c44:	682b      	ldr	r3, [r5, #0]
 8009c46:	b103      	cbz	r3, 8009c4a <_isatty_r+0x1a>
 8009c48:	6023      	str	r3, [r4, #0]
 8009c4a:	bd38      	pop	{r3, r4, r5, pc}
 8009c4c:	20000910 	.word	0x20000910

08009c50 <round>:
 8009c50:	ec53 2b10 	vmov	r2, r3, d0
 8009c54:	b570      	push	{r4, r5, r6, lr}
 8009c56:	f3c3 540a 	ubfx	r4, r3, #20, #11
 8009c5a:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 8009c5e:	2813      	cmp	r0, #19
 8009c60:	ee10 5a10 	vmov	r5, s0
 8009c64:	4619      	mov	r1, r3
 8009c66:	dc18      	bgt.n	8009c9a <round+0x4a>
 8009c68:	2800      	cmp	r0, #0
 8009c6a:	da09      	bge.n	8009c80 <round+0x30>
 8009c6c:	3001      	adds	r0, #1
 8009c6e:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 8009c72:	d103      	bne.n	8009c7c <round+0x2c>
 8009c74:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8009c78:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	e02a      	b.n	8009cd6 <round+0x86>
 8009c80:	4c16      	ldr	r4, [pc, #88]	; (8009cdc <round+0x8c>)
 8009c82:	4104      	asrs	r4, r0
 8009c84:	ea03 0604 	and.w	r6, r3, r4
 8009c88:	4316      	orrs	r6, r2
 8009c8a:	d011      	beq.n	8009cb0 <round+0x60>
 8009c8c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009c90:	4103      	asrs	r3, r0
 8009c92:	440b      	add	r3, r1
 8009c94:	ea23 0104 	bic.w	r1, r3, r4
 8009c98:	e7f0      	b.n	8009c7c <round+0x2c>
 8009c9a:	2833      	cmp	r0, #51	; 0x33
 8009c9c:	dd0b      	ble.n	8009cb6 <round+0x66>
 8009c9e:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8009ca2:	d105      	bne.n	8009cb0 <round+0x60>
 8009ca4:	ee10 0a10 	vmov	r0, s0
 8009ca8:	f7f6 fb00 	bl	80002ac <__adddf3>
 8009cac:	4602      	mov	r2, r0
 8009cae:	460b      	mov	r3, r1
 8009cb0:	ec43 2b10 	vmov	d0, r2, r3
 8009cb4:	bd70      	pop	{r4, r5, r6, pc}
 8009cb6:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 8009cba:	f04f 34ff 	mov.w	r4, #4294967295
 8009cbe:	40f4      	lsrs	r4, r6
 8009cc0:	4214      	tst	r4, r2
 8009cc2:	d0f5      	beq.n	8009cb0 <round+0x60>
 8009cc4:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 8009cc8:	2301      	movs	r3, #1
 8009cca:	4083      	lsls	r3, r0
 8009ccc:	195b      	adds	r3, r3, r5
 8009cce:	bf28      	it	cs
 8009cd0:	3101      	addcs	r1, #1
 8009cd2:	ea23 0304 	bic.w	r3, r3, r4
 8009cd6:	461a      	mov	r2, r3
 8009cd8:	460b      	mov	r3, r1
 8009cda:	e7e9      	b.n	8009cb0 <round+0x60>
 8009cdc:	000fffff 	.word	0x000fffff

08009ce0 <roundf>:
 8009ce0:	ee10 0a10 	vmov	r0, s0
 8009ce4:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8009ce8:	3a7f      	subs	r2, #127	; 0x7f
 8009cea:	2a16      	cmp	r2, #22
 8009cec:	dc15      	bgt.n	8009d1a <roundf+0x3a>
 8009cee:	2a00      	cmp	r2, #0
 8009cf0:	da08      	bge.n	8009d04 <roundf+0x24>
 8009cf2:	3201      	adds	r2, #1
 8009cf4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8009cf8:	d101      	bne.n	8009cfe <roundf+0x1e>
 8009cfa:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8009cfe:	ee00 3a10 	vmov	s0, r3
 8009d02:	4770      	bx	lr
 8009d04:	4907      	ldr	r1, [pc, #28]	; (8009d24 <roundf+0x44>)
 8009d06:	4111      	asrs	r1, r2
 8009d08:	4208      	tst	r0, r1
 8009d0a:	d0fa      	beq.n	8009d02 <roundf+0x22>
 8009d0c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009d10:	4113      	asrs	r3, r2
 8009d12:	4403      	add	r3, r0
 8009d14:	ea23 0301 	bic.w	r3, r3, r1
 8009d18:	e7f1      	b.n	8009cfe <roundf+0x1e>
 8009d1a:	2a80      	cmp	r2, #128	; 0x80
 8009d1c:	d1f1      	bne.n	8009d02 <roundf+0x22>
 8009d1e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009d22:	4770      	bx	lr
 8009d24:	007fffff 	.word	0x007fffff

08009d28 <_init>:
 8009d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d2a:	bf00      	nop
 8009d2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d2e:	bc08      	pop	{r3}
 8009d30:	469e      	mov	lr, r3
 8009d32:	4770      	bx	lr

08009d34 <_fini>:
 8009d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d36:	bf00      	nop
 8009d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d3a:	bc08      	pop	{r3}
 8009d3c:	469e      	mov	lr, r3
 8009d3e:	4770      	bx	lr
