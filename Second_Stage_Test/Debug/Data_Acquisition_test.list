
Data_Acquisition_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006be8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c4  08006d98  08006d98  00016d98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800715c  0800715c  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800715c  0800715c  0001715c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007164  08007164  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007164  08007164  00017164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007168  08007168  00017168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800716c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d4  2**0
                  CONTENTS
 10 .bss          0000071c  200001d4  200001d4  000201d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200008f0  200008f0  000201d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000e2aa  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002588  00000000  00000000  0002e4f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000c70  00000000  00000000  00030a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000974  00000000  00000000  000316f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00025506  00000000  00000000  00032064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001145c  00000000  00000000  0005756a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d99cd  00000000  00000000  000689c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004300  00000000  00000000  00142394  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000084  00000000  00000000  00146694  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001d4 	.word	0x200001d4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006d80 	.word	0x08006d80

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	08006d80 	.word	0x08006d80

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b970 	b.w	8000ec0 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9e08      	ldr	r6, [sp, #32]
 8000bfe:	460d      	mov	r5, r1
 8000c00:	4604      	mov	r4, r0
 8000c02:	460f      	mov	r7, r1
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d14a      	bne.n	8000c9e <__udivmoddi4+0xa6>
 8000c08:	428a      	cmp	r2, r1
 8000c0a:	4694      	mov	ip, r2
 8000c0c:	d965      	bls.n	8000cda <__udivmoddi4+0xe2>
 8000c0e:	fab2 f382 	clz	r3, r2
 8000c12:	b143      	cbz	r3, 8000c26 <__udivmoddi4+0x2e>
 8000c14:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c18:	f1c3 0220 	rsb	r2, r3, #32
 8000c1c:	409f      	lsls	r7, r3
 8000c1e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c22:	4317      	orrs	r7, r2
 8000c24:	409c      	lsls	r4, r3
 8000c26:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c2a:	fa1f f58c 	uxth.w	r5, ip
 8000c2e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c32:	0c22      	lsrs	r2, r4, #16
 8000c34:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c38:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c3c:	fb01 f005 	mul.w	r0, r1, r5
 8000c40:	4290      	cmp	r0, r2
 8000c42:	d90a      	bls.n	8000c5a <__udivmoddi4+0x62>
 8000c44:	eb1c 0202 	adds.w	r2, ip, r2
 8000c48:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c4c:	f080 811c 	bcs.w	8000e88 <__udivmoddi4+0x290>
 8000c50:	4290      	cmp	r0, r2
 8000c52:	f240 8119 	bls.w	8000e88 <__udivmoddi4+0x290>
 8000c56:	3902      	subs	r1, #2
 8000c58:	4462      	add	r2, ip
 8000c5a:	1a12      	subs	r2, r2, r0
 8000c5c:	b2a4      	uxth	r4, r4
 8000c5e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c62:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c66:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c6a:	fb00 f505 	mul.w	r5, r0, r5
 8000c6e:	42a5      	cmp	r5, r4
 8000c70:	d90a      	bls.n	8000c88 <__udivmoddi4+0x90>
 8000c72:	eb1c 0404 	adds.w	r4, ip, r4
 8000c76:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c7a:	f080 8107 	bcs.w	8000e8c <__udivmoddi4+0x294>
 8000c7e:	42a5      	cmp	r5, r4
 8000c80:	f240 8104 	bls.w	8000e8c <__udivmoddi4+0x294>
 8000c84:	4464      	add	r4, ip
 8000c86:	3802      	subs	r0, #2
 8000c88:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c8c:	1b64      	subs	r4, r4, r5
 8000c8e:	2100      	movs	r1, #0
 8000c90:	b11e      	cbz	r6, 8000c9a <__udivmoddi4+0xa2>
 8000c92:	40dc      	lsrs	r4, r3
 8000c94:	2300      	movs	r3, #0
 8000c96:	e9c6 4300 	strd	r4, r3, [r6]
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d908      	bls.n	8000cb4 <__udivmoddi4+0xbc>
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	f000 80ed 	beq.w	8000e82 <__udivmoddi4+0x28a>
 8000ca8:	2100      	movs	r1, #0
 8000caa:	e9c6 0500 	strd	r0, r5, [r6]
 8000cae:	4608      	mov	r0, r1
 8000cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb4:	fab3 f183 	clz	r1, r3
 8000cb8:	2900      	cmp	r1, #0
 8000cba:	d149      	bne.n	8000d50 <__udivmoddi4+0x158>
 8000cbc:	42ab      	cmp	r3, r5
 8000cbe:	d302      	bcc.n	8000cc6 <__udivmoddi4+0xce>
 8000cc0:	4282      	cmp	r2, r0
 8000cc2:	f200 80f8 	bhi.w	8000eb6 <__udivmoddi4+0x2be>
 8000cc6:	1a84      	subs	r4, r0, r2
 8000cc8:	eb65 0203 	sbc.w	r2, r5, r3
 8000ccc:	2001      	movs	r0, #1
 8000cce:	4617      	mov	r7, r2
 8000cd0:	2e00      	cmp	r6, #0
 8000cd2:	d0e2      	beq.n	8000c9a <__udivmoddi4+0xa2>
 8000cd4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cd8:	e7df      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000cda:	b902      	cbnz	r2, 8000cde <__udivmoddi4+0xe6>
 8000cdc:	deff      	udf	#255	; 0xff
 8000cde:	fab2 f382 	clz	r3, r2
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	f040 8090 	bne.w	8000e08 <__udivmoddi4+0x210>
 8000ce8:	1a8a      	subs	r2, r1, r2
 8000cea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cee:	fa1f fe8c 	uxth.w	lr, ip
 8000cf2:	2101      	movs	r1, #1
 8000cf4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cf8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cfc:	0c22      	lsrs	r2, r4, #16
 8000cfe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d02:	fb0e f005 	mul.w	r0, lr, r5
 8000d06:	4290      	cmp	r0, r2
 8000d08:	d908      	bls.n	8000d1c <__udivmoddi4+0x124>
 8000d0a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d0e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x122>
 8000d14:	4290      	cmp	r0, r2
 8000d16:	f200 80cb 	bhi.w	8000eb0 <__udivmoddi4+0x2b8>
 8000d1a:	4645      	mov	r5, r8
 8000d1c:	1a12      	subs	r2, r2, r0
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d24:	fb07 2210 	mls	r2, r7, r0, r2
 8000d28:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d2c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d30:	45a6      	cmp	lr, r4
 8000d32:	d908      	bls.n	8000d46 <__udivmoddi4+0x14e>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d3c:	d202      	bcs.n	8000d44 <__udivmoddi4+0x14c>
 8000d3e:	45a6      	cmp	lr, r4
 8000d40:	f200 80bb 	bhi.w	8000eba <__udivmoddi4+0x2c2>
 8000d44:	4610      	mov	r0, r2
 8000d46:	eba4 040e 	sub.w	r4, r4, lr
 8000d4a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d4e:	e79f      	b.n	8000c90 <__udivmoddi4+0x98>
 8000d50:	f1c1 0720 	rsb	r7, r1, #32
 8000d54:	408b      	lsls	r3, r1
 8000d56:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d5a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d5e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d62:	fa20 f307 	lsr.w	r3, r0, r7
 8000d66:	40fd      	lsrs	r5, r7
 8000d68:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d6c:	4323      	orrs	r3, r4
 8000d6e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d72:	fa1f fe8c 	uxth.w	lr, ip
 8000d76:	fb09 5518 	mls	r5, r9, r8, r5
 8000d7a:	0c1c      	lsrs	r4, r3, #16
 8000d7c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d80:	fb08 f50e 	mul.w	r5, r8, lr
 8000d84:	42a5      	cmp	r5, r4
 8000d86:	fa02 f201 	lsl.w	r2, r2, r1
 8000d8a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d8e:	d90b      	bls.n	8000da8 <__udivmoddi4+0x1b0>
 8000d90:	eb1c 0404 	adds.w	r4, ip, r4
 8000d94:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d98:	f080 8088 	bcs.w	8000eac <__udivmoddi4+0x2b4>
 8000d9c:	42a5      	cmp	r5, r4
 8000d9e:	f240 8085 	bls.w	8000eac <__udivmoddi4+0x2b4>
 8000da2:	f1a8 0802 	sub.w	r8, r8, #2
 8000da6:	4464      	add	r4, ip
 8000da8:	1b64      	subs	r4, r4, r5
 8000daa:	b29d      	uxth	r5, r3
 8000dac:	fbb4 f3f9 	udiv	r3, r4, r9
 8000db0:	fb09 4413 	mls	r4, r9, r3, r4
 8000db4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000db8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dbc:	45a6      	cmp	lr, r4
 8000dbe:	d908      	bls.n	8000dd2 <__udivmoddi4+0x1da>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000dc8:	d26c      	bcs.n	8000ea4 <__udivmoddi4+0x2ac>
 8000dca:	45a6      	cmp	lr, r4
 8000dcc:	d96a      	bls.n	8000ea4 <__udivmoddi4+0x2ac>
 8000dce:	3b02      	subs	r3, #2
 8000dd0:	4464      	add	r4, ip
 8000dd2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dd6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dda:	eba4 040e 	sub.w	r4, r4, lr
 8000dde:	42ac      	cmp	r4, r5
 8000de0:	46c8      	mov	r8, r9
 8000de2:	46ae      	mov	lr, r5
 8000de4:	d356      	bcc.n	8000e94 <__udivmoddi4+0x29c>
 8000de6:	d053      	beq.n	8000e90 <__udivmoddi4+0x298>
 8000de8:	b156      	cbz	r6, 8000e00 <__udivmoddi4+0x208>
 8000dea:	ebb0 0208 	subs.w	r2, r0, r8
 8000dee:	eb64 040e 	sbc.w	r4, r4, lr
 8000df2:	fa04 f707 	lsl.w	r7, r4, r7
 8000df6:	40ca      	lsrs	r2, r1
 8000df8:	40cc      	lsrs	r4, r1
 8000dfa:	4317      	orrs	r7, r2
 8000dfc:	e9c6 7400 	strd	r7, r4, [r6]
 8000e00:	4618      	mov	r0, r3
 8000e02:	2100      	movs	r1, #0
 8000e04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e08:	f1c3 0120 	rsb	r1, r3, #32
 8000e0c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e10:	fa20 f201 	lsr.w	r2, r0, r1
 8000e14:	fa25 f101 	lsr.w	r1, r5, r1
 8000e18:	409d      	lsls	r5, r3
 8000e1a:	432a      	orrs	r2, r5
 8000e1c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e20:	fa1f fe8c 	uxth.w	lr, ip
 8000e24:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e28:	fb07 1510 	mls	r5, r7, r0, r1
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e32:	fb00 f50e 	mul.w	r5, r0, lr
 8000e36:	428d      	cmp	r5, r1
 8000e38:	fa04 f403 	lsl.w	r4, r4, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x258>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e46:	d22f      	bcs.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e48:	428d      	cmp	r5, r1
 8000e4a:	d92d      	bls.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e4c:	3802      	subs	r0, #2
 8000e4e:	4461      	add	r1, ip
 8000e50:	1b49      	subs	r1, r1, r5
 8000e52:	b292      	uxth	r2, r2
 8000e54:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e58:	fb07 1115 	mls	r1, r7, r5, r1
 8000e5c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e60:	fb05 f10e 	mul.w	r1, r5, lr
 8000e64:	4291      	cmp	r1, r2
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x282>
 8000e68:	eb1c 0202 	adds.w	r2, ip, r2
 8000e6c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e70:	d216      	bcs.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e72:	4291      	cmp	r1, r2
 8000e74:	d914      	bls.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e76:	3d02      	subs	r5, #2
 8000e78:	4462      	add	r2, ip
 8000e7a:	1a52      	subs	r2, r2, r1
 8000e7c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e80:	e738      	b.n	8000cf4 <__udivmoddi4+0xfc>
 8000e82:	4631      	mov	r1, r6
 8000e84:	4630      	mov	r0, r6
 8000e86:	e708      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000e88:	4639      	mov	r1, r7
 8000e8a:	e6e6      	b.n	8000c5a <__udivmoddi4+0x62>
 8000e8c:	4610      	mov	r0, r2
 8000e8e:	e6fb      	b.n	8000c88 <__udivmoddi4+0x90>
 8000e90:	4548      	cmp	r0, r9
 8000e92:	d2a9      	bcs.n	8000de8 <__udivmoddi4+0x1f0>
 8000e94:	ebb9 0802 	subs.w	r8, r9, r2
 8000e98:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e9c:	3b01      	subs	r3, #1
 8000e9e:	e7a3      	b.n	8000de8 <__udivmoddi4+0x1f0>
 8000ea0:	4645      	mov	r5, r8
 8000ea2:	e7ea      	b.n	8000e7a <__udivmoddi4+0x282>
 8000ea4:	462b      	mov	r3, r5
 8000ea6:	e794      	b.n	8000dd2 <__udivmoddi4+0x1da>
 8000ea8:	4640      	mov	r0, r8
 8000eaa:	e7d1      	b.n	8000e50 <__udivmoddi4+0x258>
 8000eac:	46d0      	mov	r8, sl
 8000eae:	e77b      	b.n	8000da8 <__udivmoddi4+0x1b0>
 8000eb0:	3d02      	subs	r5, #2
 8000eb2:	4462      	add	r2, ip
 8000eb4:	e732      	b.n	8000d1c <__udivmoddi4+0x124>
 8000eb6:	4608      	mov	r0, r1
 8000eb8:	e70a      	b.n	8000cd0 <__udivmoddi4+0xd8>
 8000eba:	4464      	add	r4, ip
 8000ebc:	3802      	subs	r0, #2
 8000ebe:	e742      	b.n	8000d46 <__udivmoddi4+0x14e>

08000ec0 <__aeabi_idiv0>:
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop

08000ec4 <AD7606_Init>:
#include "ad7606_stm32_JL.h"

static SPI_HandleTypeDef *ad7606_hspi;

void AD7606_Init(SPI_HandleTypeDef *hspi) {
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
    ad7606_hspi = hspi;
 8000ecc:	4a0d      	ldr	r2, [pc, #52]	; (8000f04 <AD7606_Init+0x40>)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6013      	str	r3, [r2, #0]

    HAL_GPIO_WritePin(AD7606_RESET_Port, AD7606_RESET_Pin, GPIO_PIN_RESET);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ed8:	480b      	ldr	r0, [pc, #44]	; (8000f08 <AD7606_Init+0x44>)
 8000eda:	f001 f929 	bl	8002130 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(AD7606_CONVST_Port, AD7606_CONVST_Pin, GPIO_PIN_RESET);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ee4:	4808      	ldr	r0, [pc, #32]	; (8000f08 <AD7606_Init+0x44>)
 8000ee6:	f001 f923 	bl	8002130 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(AD7606_CS_Port, AD7606_CS_Pin, GPIO_PIN_SET);
 8000eea:	2201      	movs	r2, #1
 8000eec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ef0:	4806      	ldr	r0, [pc, #24]	; (8000f0c <AD7606_Init+0x48>)
 8000ef2:	f001 f91d 	bl	8002130 <HAL_GPIO_WritePin>

    AD7606_Reset();
 8000ef6:	f000 f80b 	bl	8000f10 <AD7606_Reset>
}
 8000efa:	bf00      	nop
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	200001f0 	.word	0x200001f0
 8000f08:	40021400 	.word	0x40021400
 8000f0c:	40020c00 	.word	0x40020c00

08000f10 <AD7606_Reset>:

void AD7606_Reset() {
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_SET);
 8000f14:	2201      	movs	r2, #1
 8000f16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f1a:	4808      	ldr	r0, [pc, #32]	; (8000f3c <AD7606_Reset+0x2c>)
 8000f1c:	f001 f908 	bl	8002130 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000f20:	2001      	movs	r0, #1
 8000f22:	f000 fe37 	bl	8001b94 <HAL_Delay>
    HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_RESET);
 8000f26:	2200      	movs	r2, #0
 8000f28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f2c:	4803      	ldr	r0, [pc, #12]	; (8000f3c <AD7606_Reset+0x2c>)
 8000f2e:	f001 f8ff 	bl	8002130 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000f32:	2001      	movs	r0, #1
 8000f34:	f000 fe2e 	bl	8001b94 <HAL_Delay>
}
 8000f38:	bf00      	nop
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	40021400 	.word	0x40021400

08000f40 <AD7606_StartConversion>:

void AD7606_StartConversion(void) {
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(AD7606_CONVST_Port, AD7606_CONVST_Pin, GPIO_PIN_SET);
 8000f44:	2201      	movs	r2, #1
 8000f46:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f4a:	4807      	ldr	r0, [pc, #28]	; (8000f68 <AD7606_StartConversion+0x28>)
 8000f4c:	f001 f8f0 	bl	8002130 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000f50:	2001      	movs	r0, #1
 8000f52:	f000 fe1f 	bl	8001b94 <HAL_Delay>
    HAL_GPIO_WritePin(AD7606_CONVST_Port, AD7606_CONVST_Pin, GPIO_PIN_RESET);
 8000f56:	2200      	movs	r2, #0
 8000f58:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f5c:	4802      	ldr	r0, [pc, #8]	; (8000f68 <AD7606_StartConversion+0x28>)
 8000f5e:	f001 f8e7 	bl	8002130 <HAL_GPIO_WritePin>
}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40021400 	.word	0x40021400

08000f6c <AD7606_ReadData>:
        }
    }
    return true;
}

bool AD7606_ReadData(uint16_t *data, uint8_t num_channels) {
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	460b      	mov	r3, r1
 8000f76:	70fb      	strb	r3, [r7, #3]
    if (num_channels > 4) { //
 8000f78:	78fb      	ldrb	r3, [r7, #3]
 8000f7a:	2b04      	cmp	r3, #4
 8000f7c:	d901      	bls.n	8000f82 <AD7606_ReadData+0x16>
        return false;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	e032      	b.n	8000fe8 <AD7606_ReadData+0x7c>
    }

    HAL_GPIO_WritePin(AD7606_CS_Port, AD7606_CS_Pin, GPIO_PIN_RESET);
 8000f82:	2200      	movs	r2, #0
 8000f84:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f88:	4819      	ldr	r0, [pc, #100]	; (8000ff0 <AD7606_ReadData+0x84>)
 8000f8a:	f001 f8d1 	bl	8002130 <HAL_GPIO_WritePin>

    uint16_t tmp_data = 0;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	81bb      	strh	r3, [r7, #12]

    for (uint8_t i = 0; i < num_channels; i++) {
 8000f92:	2300      	movs	r3, #0
 8000f94:	73fb      	strb	r3, [r7, #15]
 8000f96:	e01c      	b.n	8000fd2 <AD7606_ReadData+0x66>
        if (HAL_SPI_Receive(ad7606_hspi, (uint8_t *)&tmp_data, 1, HAL_MAX_DELAY) != HAL_OK) {
 8000f98:	4b16      	ldr	r3, [pc, #88]	; (8000ff4 <AD7606_ReadData+0x88>)
 8000f9a:	6818      	ldr	r0, [r3, #0]
 8000f9c:	f107 010c 	add.w	r1, r7, #12
 8000fa0:	f04f 33ff 	mov.w	r3, #4294967295
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	f001 ff1a 	bl	8002dde <HAL_SPI_Receive>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d007      	beq.n	8000fc0 <AD7606_ReadData+0x54>
            HAL_GPIO_WritePin(AD7606_CS_Port, AD7606_CS_Pin, GPIO_PIN_SET);
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fb6:	480e      	ldr	r0, [pc, #56]	; (8000ff0 <AD7606_ReadData+0x84>)
 8000fb8:	f001 f8ba 	bl	8002130 <HAL_GPIO_WritePin>
            return false;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	e013      	b.n	8000fe8 <AD7606_ReadData+0x7c>
        }
        data[i] = tmp_data;
 8000fc0:	7bfb      	ldrb	r3, [r7, #15]
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	687a      	ldr	r2, [r7, #4]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	89ba      	ldrh	r2, [r7, #12]
 8000fca:	801a      	strh	r2, [r3, #0]
    for (uint8_t i = 0; i < num_channels; i++) {
 8000fcc:	7bfb      	ldrb	r3, [r7, #15]
 8000fce:	3301      	adds	r3, #1
 8000fd0:	73fb      	strb	r3, [r7, #15]
 8000fd2:	7bfa      	ldrb	r2, [r7, #15]
 8000fd4:	78fb      	ldrb	r3, [r7, #3]
 8000fd6:	429a      	cmp	r2, r3
 8000fd8:	d3de      	bcc.n	8000f98 <AD7606_ReadData+0x2c>
    }

    HAL_GPIO_WritePin(AD7606_CS_Port, AD7606_CS_Pin, GPIO_PIN_SET);
 8000fda:	2201      	movs	r2, #1
 8000fdc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fe0:	4803      	ldr	r0, [pc, #12]	; (8000ff0 <AD7606_ReadData+0x84>)
 8000fe2:	f001 f8a5 	bl	8002130 <HAL_GPIO_WritePin>
    return true;
 8000fe6:	2301      	movs	r3, #1
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3710      	adds	r7, #16
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	40020c00 	.word	0x40020c00
 8000ff4:	200001f0 	.word	0x200001f0

08000ff8 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b08c      	sub	sp, #48	; 0x30
 8000ffc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffe:	f107 031c 	add.w	r3, r7, #28
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	605a      	str	r2, [r3, #4]
 8001008:	609a      	str	r2, [r3, #8]
 800100a:	60da      	str	r2, [r3, #12]
 800100c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	61bb      	str	r3, [r7, #24]
 8001012:	4b9d      	ldr	r3, [pc, #628]	; (8001288 <MX_GPIO_Init+0x290>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	4a9c      	ldr	r2, [pc, #624]	; (8001288 <MX_GPIO_Init+0x290>)
 8001018:	f043 0304 	orr.w	r3, r3, #4
 800101c:	6313      	str	r3, [r2, #48]	; 0x30
 800101e:	4b9a      	ldr	r3, [pc, #616]	; (8001288 <MX_GPIO_Init+0x290>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	f003 0304 	and.w	r3, r3, #4
 8001026:	61bb      	str	r3, [r7, #24]
 8001028:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	617b      	str	r3, [r7, #20]
 800102e:	4b96      	ldr	r3, [pc, #600]	; (8001288 <MX_GPIO_Init+0x290>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	4a95      	ldr	r2, [pc, #596]	; (8001288 <MX_GPIO_Init+0x290>)
 8001034:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001038:	6313      	str	r3, [r2, #48]	; 0x30
 800103a:	4b93      	ldr	r3, [pc, #588]	; (8001288 <MX_GPIO_Init+0x290>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001042:	617b      	str	r3, [r7, #20]
 8001044:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	613b      	str	r3, [r7, #16]
 800104a:	4b8f      	ldr	r3, [pc, #572]	; (8001288 <MX_GPIO_Init+0x290>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	4a8e      	ldr	r2, [pc, #568]	; (8001288 <MX_GPIO_Init+0x290>)
 8001050:	f043 0301 	orr.w	r3, r3, #1
 8001054:	6313      	str	r3, [r2, #48]	; 0x30
 8001056:	4b8c      	ldr	r3, [pc, #560]	; (8001288 <MX_GPIO_Init+0x290>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	613b      	str	r3, [r7, #16]
 8001060:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	60fb      	str	r3, [r7, #12]
 8001066:	4b88      	ldr	r3, [pc, #544]	; (8001288 <MX_GPIO_Init+0x290>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	4a87      	ldr	r2, [pc, #540]	; (8001288 <MX_GPIO_Init+0x290>)
 800106c:	f043 0302 	orr.w	r3, r3, #2
 8001070:	6313      	str	r3, [r2, #48]	; 0x30
 8001072:	4b85      	ldr	r3, [pc, #532]	; (8001288 <MX_GPIO_Init+0x290>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	f003 0302 	and.w	r3, r3, #2
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	60bb      	str	r3, [r7, #8]
 8001082:	4b81      	ldr	r3, [pc, #516]	; (8001288 <MX_GPIO_Init+0x290>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	4a80      	ldr	r2, [pc, #512]	; (8001288 <MX_GPIO_Init+0x290>)
 8001088:	f043 0320 	orr.w	r3, r3, #32
 800108c:	6313      	str	r3, [r2, #48]	; 0x30
 800108e:	4b7e      	ldr	r3, [pc, #504]	; (8001288 <MX_GPIO_Init+0x290>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	f003 0320 	and.w	r3, r3, #32
 8001096:	60bb      	str	r3, [r7, #8]
 8001098:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	607b      	str	r3, [r7, #4]
 800109e:	4b7a      	ldr	r3, [pc, #488]	; (8001288 <MX_GPIO_Init+0x290>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	4a79      	ldr	r2, [pc, #484]	; (8001288 <MX_GPIO_Init+0x290>)
 80010a4:	f043 0308 	orr.w	r3, r3, #8
 80010a8:	6313      	str	r3, [r2, #48]	; 0x30
 80010aa:	4b77      	ldr	r3, [pc, #476]	; (8001288 <MX_GPIO_Init+0x290>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	f003 0308 	and.w	r3, r3, #8
 80010b2:	607b      	str	r3, [r7, #4]
 80010b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	603b      	str	r3, [r7, #0]
 80010ba:	4b73      	ldr	r3, [pc, #460]	; (8001288 <MX_GPIO_Init+0x290>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	4a72      	ldr	r2, [pc, #456]	; (8001288 <MX_GPIO_Init+0x290>)
 80010c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010c4:	6313      	str	r3, [r2, #48]	; 0x30
 80010c6:	4b70      	ldr	r3, [pc, #448]	; (8001288 <MX_GPIO_Init+0x290>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010ce:	603b      	str	r3, [r7, #0]
 80010d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80010d2:	2200      	movs	r2, #0
 80010d4:	f244 0181 	movw	r1, #16513	; 0x4081
 80010d8:	486c      	ldr	r0, [pc, #432]	; (800128c <MX_GPIO_Init+0x294>)
 80010da:	f001 f829 	bl	8002130 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, RESET_Pin|CONV_Pin, GPIO_PIN_RESET);
 80010de:	2200      	movs	r2, #0
 80010e0:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80010e4:	486a      	ldr	r0, [pc, #424]	; (8001290 <MX_GPIO_Init+0x298>)
 80010e6:	f001 f823 	bl	8002130 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 80010ea:	2201      	movs	r2, #1
 80010ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010f0:	4868      	ldr	r0, [pc, #416]	; (8001294 <MX_GPIO_Init+0x29c>)
 80010f2:	f001 f81d 	bl	8002130 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80010f6:	2200      	movs	r2, #0
 80010f8:	2140      	movs	r1, #64	; 0x40
 80010fa:	4867      	ldr	r0, [pc, #412]	; (8001298 <MX_GPIO_Init+0x2a0>)
 80010fc:	f001 f818 	bl	8002130 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001100:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001104:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001106:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800110a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	2300      	movs	r3, #0
 800110e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001110:	f107 031c 	add.w	r3, r7, #28
 8001114:	4619      	mov	r1, r3
 8001116:	4861      	ldr	r0, [pc, #388]	; (800129c <MX_GPIO_Init+0x2a4>)
 8001118:	f000 fe46 	bl	8001da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800111c:	2332      	movs	r3, #50	; 0x32
 800111e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001120:	2302      	movs	r3, #2
 8001122:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001128:	2303      	movs	r3, #3
 800112a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800112c:	230b      	movs	r3, #11
 800112e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001130:	f107 031c 	add.w	r3, r7, #28
 8001134:	4619      	mov	r1, r3
 8001136:	4859      	ldr	r0, [pc, #356]	; (800129c <MX_GPIO_Init+0x2a4>)
 8001138:	f000 fe36 	bl	8001da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin;
 800113c:	2306      	movs	r3, #6
 800113e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001140:	2302      	movs	r3, #2
 8001142:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	2300      	movs	r3, #0
 8001146:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001148:	2303      	movs	r3, #3
 800114a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800114c:	230b      	movs	r3, #11
 800114e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001150:	f107 031c 	add.w	r3, r7, #28
 8001154:	4619      	mov	r1, r3
 8001156:	4852      	ldr	r0, [pc, #328]	; (80012a0 <MX_GPIO_Init+0x2a8>)
 8001158:	f000 fe26 	bl	8001da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FDATA_Pin;
 800115c:	2380      	movs	r3, #128	; 0x80
 800115e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001160:	2300      	movs	r3, #0
 8001162:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001164:	2300      	movs	r3, #0
 8001166:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(FDATA_GPIO_Port, &GPIO_InitStruct);
 8001168:	f107 031c 	add.w	r3, r7, #28
 800116c:	4619      	mov	r1, r3
 800116e:	484c      	ldr	r0, [pc, #304]	; (80012a0 <MX_GPIO_Init+0x2a8>)
 8001170:	f000 fe1a 	bl	8001da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001174:	f244 0381 	movw	r3, #16513	; 0x4081
 8001178:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800117a:	2301      	movs	r3, #1
 800117c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117e:	2300      	movs	r3, #0
 8001180:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001182:	2300      	movs	r3, #0
 8001184:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001186:	f107 031c 	add.w	r3, r7, #28
 800118a:	4619      	mov	r1, r3
 800118c:	483f      	ldr	r0, [pc, #252]	; (800128c <MX_GPIO_Init+0x294>)
 800118e:	f000 fe0b 	bl	8001da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RESET_Pin;
 8001192:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001196:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001198:	2301      	movs	r3, #1
 800119a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a0:	2303      	movs	r3, #3
 80011a2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(RESET_GPIO_Port, &GPIO_InitStruct);
 80011a4:	f107 031c 	add.w	r3, r7, #28
 80011a8:	4619      	mov	r1, r3
 80011aa:	4839      	ldr	r0, [pc, #228]	; (8001290 <MX_GPIO_Init+0x298>)
 80011ac:	f000 fdfc 	bl	8001da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CONV_Pin;
 80011b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b6:	2301      	movs	r3, #1
 80011b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ba:	2300      	movs	r3, #0
 80011bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011be:	2300      	movs	r3, #0
 80011c0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CONV_GPIO_Port, &GPIO_InitStruct);
 80011c2:	f107 031c 	add.w	r3, r7, #28
 80011c6:	4619      	mov	r1, r3
 80011c8:	4831      	ldr	r0, [pc, #196]	; (8001290 <MX_GPIO_Init+0x298>)
 80011ca:	f000 fded 	bl	8001da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80011ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d4:	2302      	movs	r3, #2
 80011d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d8:	2300      	movs	r3, #0
 80011da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011dc:	2303      	movs	r3, #3
 80011de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011e0:	230b      	movs	r3, #11
 80011e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80011e4:	f107 031c 	add.w	r3, r7, #28
 80011e8:	4619      	mov	r1, r3
 80011ea:	4828      	ldr	r0, [pc, #160]	; (800128c <MX_GPIO_Init+0x294>)
 80011ec:	f000 fddc 	bl	8001da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUSY_Pin;
 80011f0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80011f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011f6:	2300      	movs	r3, #0
 80011f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fa:	2300      	movs	r3, #0
 80011fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUSY_GPIO_Port, &GPIO_InitStruct);
 80011fe:	f107 031c 	add.w	r3, r7, #28
 8001202:	4619      	mov	r1, r3
 8001204:	4823      	ldr	r0, [pc, #140]	; (8001294 <MX_GPIO_Init+0x29c>)
 8001206:	f000 fdcf 	bl	8001da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_Pin;
 800120a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800120e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001210:	2301      	movs	r3, #1
 8001212:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001218:	2303      	movs	r3, #3
 800121a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 800121c:	f107 031c 	add.w	r3, r7, #28
 8001220:	4619      	mov	r1, r3
 8001222:	481c      	ldr	r0, [pc, #112]	; (8001294 <MX_GPIO_Init+0x29c>)
 8001224:	f000 fdc0 	bl	8001da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001228:	2340      	movs	r3, #64	; 0x40
 800122a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800122c:	2301      	movs	r3, #1
 800122e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001230:	2300      	movs	r3, #0
 8001232:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001234:	2300      	movs	r3, #0
 8001236:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001238:	f107 031c 	add.w	r3, r7, #28
 800123c:	4619      	mov	r1, r3
 800123e:	4816      	ldr	r0, [pc, #88]	; (8001298 <MX_GPIO_Init+0x2a0>)
 8001240:	f000 fdb2 	bl	8001da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001244:	2380      	movs	r3, #128	; 0x80
 8001246:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001248:	2300      	movs	r3, #0
 800124a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124c:	2300      	movs	r3, #0
 800124e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001250:	f107 031c 	add.w	r3, r7, #28
 8001254:	4619      	mov	r1, r3
 8001256:	4810      	ldr	r0, [pc, #64]	; (8001298 <MX_GPIO_Init+0x2a0>)
 8001258:	f000 fda6 	bl	8001da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800125c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001260:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001262:	2302      	movs	r3, #2
 8001264:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001266:	2300      	movs	r3, #0
 8001268:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800126a:	2303      	movs	r3, #3
 800126c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800126e:	230b      	movs	r3, #11
 8001270:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001272:	f107 031c 	add.w	r3, r7, #28
 8001276:	4619      	mov	r1, r3
 8001278:	4807      	ldr	r0, [pc, #28]	; (8001298 <MX_GPIO_Init+0x2a0>)
 800127a:	f000 fd95 	bl	8001da8 <HAL_GPIO_Init>

}
 800127e:	bf00      	nop
 8001280:	3730      	adds	r7, #48	; 0x30
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	40023800 	.word	0x40023800
 800128c:	40020400 	.word	0x40020400
 8001290:	40021400 	.word	0x40021400
 8001294:	40020c00 	.word	0x40020c00
 8001298:	40021800 	.word	0x40021800
 800129c:	40020800 	.word	0x40020800
 80012a0:	40020000 	.word	0x40020000

080012a4 <_write>:
#define NUM_MEASUREMENTS 50
#define NUM_CHANNELS 4

void SystemClock_Config(void);

int _write(int file, char *ptr, int len) {
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	60b9      	str	r1, [r7, #8]
 80012ae:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	b29a      	uxth	r2, r3
 80012b4:	f04f 33ff 	mov.w	r3, #4294967295
 80012b8:	68b9      	ldr	r1, [r7, #8]
 80012ba:	4804      	ldr	r0, [pc, #16]	; (80012cc <_write+0x28>)
 80012bc:	f002 f9bf 	bl	800363e <HAL_UART_Transmit>
    return len;
 80012c0:	687b      	ldr	r3, [r7, #4]
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3710      	adds	r7, #16
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	20000250 	.word	0x20000250

080012d0 <main>:

int main(void) {
 80012d0:	b590      	push	{r4, r7, lr}
 80012d2:	b08f      	sub	sp, #60	; 0x3c
 80012d4:	af00      	add	r7, sp, #0
    HAL_Init();
 80012d6:	f000 fbeb 	bl	8001ab0 <HAL_Init>
    SystemClock_Config();
 80012da:	f000 f8a7 	bl	800142c <SystemClock_Config>
    MX_GPIO_Init();
 80012de:	f7ff fe8b 	bl	8000ff8 <MX_GPIO_Init>
    MX_USART3_UART_Init();
 80012e2:	f000 fac1 	bl	8001868 <MX_USART3_UART_Init>
    MX_USB_OTG_FS_PCD_Init();
 80012e6:	f000 fb31 	bl	800194c <MX_USB_OTG_FS_PCD_Init>
    MX_SPI1_Init();
 80012ea:	f000 f90f 	bl	800150c <MX_SPI1_Init>

    uint16_t adc_data[NUM_CHANNELS];
    uint32_t sum_data[NUM_CHANNELS] = {0};
 80012ee:	f107 0310 	add.w	r3, r7, #16
 80012f2:	2200      	movs	r2, #0
 80012f4:	601a      	str	r2, [r3, #0]
 80012f6:	605a      	str	r2, [r3, #4]
 80012f8:	609a      	str	r2, [r3, #8]
 80012fa:	60da      	str	r2, [r3, #12]
    float avg_data[NUM_CHANNELS];

    AD7606_Init(&hspi1);
 80012fc:	4845      	ldr	r0, [pc, #276]	; (8001414 <main+0x144>)
 80012fe:	f7ff fde1 	bl	8000ec4 <AD7606_Init>

    while (1) {
    	printf("\033[2J\033[H");
 8001302:	4845      	ldr	r0, [pc, #276]	; (8001418 <main+0x148>)
 8001304:	f003 fd3a 	bl	8004d7c <iprintf>
        memset(sum_data, 0, sizeof(sum_data));
 8001308:	f107 0310 	add.w	r3, r7, #16
 800130c:	2210      	movs	r2, #16
 800130e:	2100      	movs	r1, #0
 8001310:	4618      	mov	r0, r3
 8001312:	f003 fe79 	bl	8005008 <memset>

        for (int measurement = 0; measurement < NUM_MEASUREMENTS; measurement++) {
 8001316:	2300      	movs	r3, #0
 8001318:	637b      	str	r3, [r7, #52]	; 0x34
 800131a:	e03b      	b.n	8001394 <main+0xc4>
            AD7606_Reset();
 800131c:	f7ff fdf8 	bl	8000f10 <AD7606_Reset>
            AD7606_StartConversion();
 8001320:	f7ff fe0e 	bl	8000f40 <AD7606_StartConversion>

            while (HAL_GPIO_ReadPin(BUSY_GPIO_Port, BUSY_Pin) == GPIO_PIN_SET) {
 8001324:	bf00      	nop
 8001326:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800132a:	483c      	ldr	r0, [pc, #240]	; (800141c <main+0x14c>)
 800132c:	f000 fee8 	bl	8002100 <HAL_GPIO_ReadPin>
 8001330:	4603      	mov	r3, r0
 8001332:	2b01      	cmp	r3, #1
 8001334:	d0f7      	beq.n	8001326 <main+0x56>
            }

            if (AD7606_ReadData(adc_data, NUM_CHANNELS)) {
 8001336:	f107 0320 	add.w	r3, r7, #32
 800133a:	2104      	movs	r1, #4
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff fe15 	bl	8000f6c <AD7606_ReadData>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d01c      	beq.n	8001382 <main+0xb2>
                for (int i = 0; i < NUM_CHANNELS; i++) {
 8001348:	2300      	movs	r3, #0
 800134a:	633b      	str	r3, [r7, #48]	; 0x30
 800134c:	e015      	b.n	800137a <main+0xaa>
                    sum_data[i] += adc_data[i];
 800134e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	3338      	adds	r3, #56	; 0x38
 8001354:	443b      	add	r3, r7
 8001356:	f853 2c28 	ldr.w	r2, [r3, #-40]
 800135a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	3338      	adds	r3, #56	; 0x38
 8001360:	443b      	add	r3, r7
 8001362:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001366:	441a      	add	r2, r3
 8001368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	3338      	adds	r3, #56	; 0x38
 800136e:	443b      	add	r3, r7
 8001370:	f843 2c28 	str.w	r2, [r3, #-40]
                for (int i = 0; i < NUM_CHANNELS; i++) {
 8001374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001376:	3301      	adds	r3, #1
 8001378:	633b      	str	r3, [r7, #48]	; 0x30
 800137a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800137c:	2b03      	cmp	r3, #3
 800137e:	dde6      	ble.n	800134e <main+0x7e>
 8001380:	e002      	b.n	8001388 <main+0xb8>
                }
            } else {
                printf("Data reading error\r\n");
 8001382:	4827      	ldr	r0, [pc, #156]	; (8001420 <main+0x150>)
 8001384:	f003 fd60 	bl	8004e48 <puts>
            }

            HAL_Delay(5);
 8001388:	2005      	movs	r0, #5
 800138a:	f000 fc03 	bl	8001b94 <HAL_Delay>
        for (int measurement = 0; measurement < NUM_MEASUREMENTS; measurement++) {
 800138e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001390:	3301      	adds	r3, #1
 8001392:	637b      	str	r3, [r7, #52]	; 0x34
 8001394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001396:	2b31      	cmp	r3, #49	; 0x31
 8001398:	ddc0      	ble.n	800131c <main+0x4c>
        }

        for (int i = 0; i < NUM_CHANNELS; i++) {
 800139a:	2300      	movs	r3, #0
 800139c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800139e:	e017      	b.n	80013d0 <main+0x100>
            avg_data[i] = (float)sum_data[i] / NUM_MEASUREMENTS;
 80013a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	3338      	adds	r3, #56	; 0x38
 80013a6:	443b      	add	r3, r7
 80013a8:	f853 3c28 	ldr.w	r3, [r3, #-40]
 80013ac:	ee07 3a90 	vmov	s15, r3
 80013b0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80013b4:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8001424 <main+0x154>
 80013b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	3338      	adds	r3, #56	; 0x38
 80013c2:	443b      	add	r3, r7
 80013c4:	3b38      	subs	r3, #56	; 0x38
 80013c6:	edc3 7a00 	vstr	s15, [r3]
        for (int i = 0; i < NUM_CHANNELS; i++) {
 80013ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013cc:	3301      	adds	r3, #1
 80013ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013d2:	2b03      	cmp	r3, #3
 80013d4:	dde4      	ble.n	80013a0 <main+0xd0>
        }

        for (int i = 0; i < NUM_CHANNELS; i++) {
 80013d6:	2300      	movs	r3, #0
 80013d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80013da:	e013      	b.n	8001404 <main+0x134>
            printf("Channel %d average: %.2f\r\n", i + 1, avg_data[i]);
 80013dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013de:	1c5c      	adds	r4, r3, #1
 80013e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	3338      	adds	r3, #56	; 0x38
 80013e6:	443b      	add	r3, r7
 80013e8:	3b38      	subs	r3, #56	; 0x38
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff f8bb 	bl	8000568 <__aeabi_f2d>
 80013f2:	4602      	mov	r2, r0
 80013f4:	460b      	mov	r3, r1
 80013f6:	4621      	mov	r1, r4
 80013f8:	480b      	ldr	r0, [pc, #44]	; (8001428 <main+0x158>)
 80013fa:	f003 fcbf 	bl	8004d7c <iprintf>
        for (int i = 0; i < NUM_CHANNELS; i++) {
 80013fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001400:	3301      	adds	r3, #1
 8001402:	62bb      	str	r3, [r7, #40]	; 0x28
 8001404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001406:	2b03      	cmp	r3, #3
 8001408:	dde8      	ble.n	80013dc <main+0x10c>
        }

        HAL_Delay(2000);
 800140a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800140e:	f000 fbc1 	bl	8001b94 <HAL_Delay>
    	printf("\033[2J\033[H");
 8001412:	e776      	b.n	8001302 <main+0x32>
 8001414:	200001f4 	.word	0x200001f4
 8001418:	08006d98 	.word	0x08006d98
 800141c:	40020c00 	.word	0x40020c00
 8001420:	08006da0 	.word	0x08006da0
 8001424:	42480000 	.word	0x42480000
 8001428:	08006db4 	.word	0x08006db4

0800142c <SystemClock_Config>:
    }
}

void SystemClock_Config(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b094      	sub	sp, #80	; 0x50
 8001430:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001432:	f107 0320 	add.w	r3, r7, #32
 8001436:	2230      	movs	r2, #48	; 0x30
 8001438:	2100      	movs	r1, #0
 800143a:	4618      	mov	r0, r3
 800143c:	f003 fde4 	bl	8005008 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001440:	f107 030c 	add.w	r3, r7, #12
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	605a      	str	r2, [r3, #4]
 800144a:	609a      	str	r2, [r3, #8]
 800144c:	60da      	str	r2, [r3, #12]
 800144e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001450:	2300      	movs	r3, #0
 8001452:	60bb      	str	r3, [r7, #8]
 8001454:	4b28      	ldr	r3, [pc, #160]	; (80014f8 <SystemClock_Config+0xcc>)
 8001456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001458:	4a27      	ldr	r2, [pc, #156]	; (80014f8 <SystemClock_Config+0xcc>)
 800145a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800145e:	6413      	str	r3, [r2, #64]	; 0x40
 8001460:	4b25      	ldr	r3, [pc, #148]	; (80014f8 <SystemClock_Config+0xcc>)
 8001462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001464:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001468:	60bb      	str	r3, [r7, #8]
 800146a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800146c:	2300      	movs	r3, #0
 800146e:	607b      	str	r3, [r7, #4]
 8001470:	4b22      	ldr	r3, [pc, #136]	; (80014fc <SystemClock_Config+0xd0>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a21      	ldr	r2, [pc, #132]	; (80014fc <SystemClock_Config+0xd0>)
 8001476:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800147a:	6013      	str	r3, [r2, #0]
 800147c:	4b1f      	ldr	r3, [pc, #124]	; (80014fc <SystemClock_Config+0xd0>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001484:	607b      	str	r3, [r7, #4]
 8001486:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001488:	2301      	movs	r3, #1
 800148a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800148c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001490:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001492:	2302      	movs	r3, #2
 8001494:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001496:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800149a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800149c:	2304      	movs	r3, #4
 800149e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80014a0:	23a8      	movs	r3, #168	; 0xa8
 80014a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014a4:	2302      	movs	r3, #2
 80014a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80014a8:	2307      	movs	r3, #7
 80014aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014ac:	f107 0320 	add.w	r3, r7, #32
 80014b0:	4618      	mov	r0, r3
 80014b2:	f000 ff73 	bl	800239c <HAL_RCC_OscConfig>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80014bc:	f000 f820 	bl	8001500 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014c0:	230f      	movs	r3, #15
 80014c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014c4:	2302      	movs	r3, #2
 80014c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014c8:	2300      	movs	r3, #0
 80014ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80014cc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80014d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80014d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80014d8:	f107 030c 	add.w	r3, r7, #12
 80014dc:	2105      	movs	r1, #5
 80014de:	4618      	mov	r0, r3
 80014e0:	f001 f9d4 	bl	800288c <HAL_RCC_ClockConfig>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80014ea:	f000 f809 	bl	8001500 <Error_Handler>
  }
}
 80014ee:	bf00      	nop
 80014f0:	3750      	adds	r7, #80	; 0x50
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	40023800 	.word	0x40023800
 80014fc:	40007000 	.word	0x40007000

08001500 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001504:	b672      	cpsid	i
}
 8001506:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001508:	e7fe      	b.n	8001508 <Error_Handler+0x8>
	...

0800150c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001510:	4b18      	ldr	r3, [pc, #96]	; (8001574 <MX_SPI1_Init+0x68>)
 8001512:	4a19      	ldr	r2, [pc, #100]	; (8001578 <MX_SPI1_Init+0x6c>)
 8001514:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001516:	4b17      	ldr	r3, [pc, #92]	; (8001574 <MX_SPI1_Init+0x68>)
 8001518:	f44f 7282 	mov.w	r2, #260	; 0x104
 800151c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800151e:	4b15      	ldr	r3, [pc, #84]	; (8001574 <MX_SPI1_Init+0x68>)
 8001520:	2200      	movs	r2, #0
 8001522:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001524:	4b13      	ldr	r3, [pc, #76]	; (8001574 <MX_SPI1_Init+0x68>)
 8001526:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800152a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800152c:	4b11      	ldr	r3, [pc, #68]	; (8001574 <MX_SPI1_Init+0x68>)
 800152e:	2200      	movs	r2, #0
 8001530:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001532:	4b10      	ldr	r3, [pc, #64]	; (8001574 <MX_SPI1_Init+0x68>)
 8001534:	2201      	movs	r2, #1
 8001536:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001538:	4b0e      	ldr	r3, [pc, #56]	; (8001574 <MX_SPI1_Init+0x68>)
 800153a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800153e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001540:	4b0c      	ldr	r3, [pc, #48]	; (8001574 <MX_SPI1_Init+0x68>)
 8001542:	2220      	movs	r2, #32
 8001544:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001546:	4b0b      	ldr	r3, [pc, #44]	; (8001574 <MX_SPI1_Init+0x68>)
 8001548:	2200      	movs	r2, #0
 800154a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800154c:	4b09      	ldr	r3, [pc, #36]	; (8001574 <MX_SPI1_Init+0x68>)
 800154e:	2200      	movs	r2, #0
 8001550:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001552:	4b08      	ldr	r3, [pc, #32]	; (8001574 <MX_SPI1_Init+0x68>)
 8001554:	2200      	movs	r2, #0
 8001556:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001558:	4b06      	ldr	r3, [pc, #24]	; (8001574 <MX_SPI1_Init+0x68>)
 800155a:	220a      	movs	r2, #10
 800155c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800155e:	4805      	ldr	r0, [pc, #20]	; (8001574 <MX_SPI1_Init+0x68>)
 8001560:	f001 fbb4 	bl	8002ccc <HAL_SPI_Init>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 800156a:	f7ff ffc9 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	200001f4 	.word	0x200001f4
 8001578:	40013000 	.word	0x40013000

0800157c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b08a      	sub	sp, #40	; 0x28
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001584:	f107 0314 	add.w	r3, r7, #20
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	605a      	str	r2, [r3, #4]
 800158e:	609a      	str	r2, [r3, #8]
 8001590:	60da      	str	r2, [r3, #12]
 8001592:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a28      	ldr	r2, [pc, #160]	; (800163c <HAL_SPI_MspInit+0xc0>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d149      	bne.n	8001632 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800159e:	2300      	movs	r3, #0
 80015a0:	613b      	str	r3, [r7, #16]
 80015a2:	4b27      	ldr	r3, [pc, #156]	; (8001640 <HAL_SPI_MspInit+0xc4>)
 80015a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a6:	4a26      	ldr	r2, [pc, #152]	; (8001640 <HAL_SPI_MspInit+0xc4>)
 80015a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015ac:	6453      	str	r3, [r2, #68]	; 0x44
 80015ae:	4b24      	ldr	r3, [pc, #144]	; (8001640 <HAL_SPI_MspInit+0xc4>)
 80015b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015b6:	613b      	str	r3, [r7, #16]
 80015b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ba:	2300      	movs	r3, #0
 80015bc:	60fb      	str	r3, [r7, #12]
 80015be:	4b20      	ldr	r3, [pc, #128]	; (8001640 <HAL_SPI_MspInit+0xc4>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c2:	4a1f      	ldr	r2, [pc, #124]	; (8001640 <HAL_SPI_MspInit+0xc4>)
 80015c4:	f043 0301 	orr.w	r3, r3, #1
 80015c8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ca:	4b1d      	ldr	r3, [pc, #116]	; (8001640 <HAL_SPI_MspInit+0xc4>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ce:	f003 0301 	and.w	r3, r3, #1
 80015d2:	60fb      	str	r3, [r7, #12]
 80015d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015d6:	2300      	movs	r3, #0
 80015d8:	60bb      	str	r3, [r7, #8]
 80015da:	4b19      	ldr	r3, [pc, #100]	; (8001640 <HAL_SPI_MspInit+0xc4>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	4a18      	ldr	r2, [pc, #96]	; (8001640 <HAL_SPI_MspInit+0xc4>)
 80015e0:	f043 0302 	orr.w	r3, r3, #2
 80015e4:	6313      	str	r3, [r2, #48]	; 0x30
 80015e6:	4b16      	ldr	r3, [pc, #88]	; (8001640 <HAL_SPI_MspInit+0xc4>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	f003 0302 	and.w	r3, r3, #2
 80015ee:	60bb      	str	r3, [r7, #8]
 80015f0:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80015f2:	2360      	movs	r3, #96	; 0x60
 80015f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f6:	2302      	movs	r3, #2
 80015f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fa:	2300      	movs	r3, #0
 80015fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015fe:	2303      	movs	r3, #3
 8001600:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001602:	2305      	movs	r3, #5
 8001604:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001606:	f107 0314 	add.w	r3, r7, #20
 800160a:	4619      	mov	r1, r3
 800160c:	480d      	ldr	r0, [pc, #52]	; (8001644 <HAL_SPI_MspInit+0xc8>)
 800160e:	f000 fbcb 	bl	8001da8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001612:	2320      	movs	r3, #32
 8001614:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001616:	2302      	movs	r3, #2
 8001618:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161a:	2300      	movs	r3, #0
 800161c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800161e:	2303      	movs	r3, #3
 8001620:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001622:	2305      	movs	r3, #5
 8001624:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001626:	f107 0314 	add.w	r3, r7, #20
 800162a:	4619      	mov	r1, r3
 800162c:	4806      	ldr	r0, [pc, #24]	; (8001648 <HAL_SPI_MspInit+0xcc>)
 800162e:	f000 fbbb 	bl	8001da8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001632:	bf00      	nop
 8001634:	3728      	adds	r7, #40	; 0x28
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	40013000 	.word	0x40013000
 8001640:	40023800 	.word	0x40023800
 8001644:	40020000 	.word	0x40020000
 8001648:	40020400 	.word	0x40020400

0800164c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	607b      	str	r3, [r7, #4]
 8001656:	4b10      	ldr	r3, [pc, #64]	; (8001698 <HAL_MspInit+0x4c>)
 8001658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165a:	4a0f      	ldr	r2, [pc, #60]	; (8001698 <HAL_MspInit+0x4c>)
 800165c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001660:	6453      	str	r3, [r2, #68]	; 0x44
 8001662:	4b0d      	ldr	r3, [pc, #52]	; (8001698 <HAL_MspInit+0x4c>)
 8001664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001666:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800166a:	607b      	str	r3, [r7, #4]
 800166c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	603b      	str	r3, [r7, #0]
 8001672:	4b09      	ldr	r3, [pc, #36]	; (8001698 <HAL_MspInit+0x4c>)
 8001674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001676:	4a08      	ldr	r2, [pc, #32]	; (8001698 <HAL_MspInit+0x4c>)
 8001678:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800167c:	6413      	str	r3, [r2, #64]	; 0x40
 800167e:	4b06      	ldr	r3, [pc, #24]	; (8001698 <HAL_MspInit+0x4c>)
 8001680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001686:	603b      	str	r3, [r7, #0]
 8001688:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800168a:	bf00      	nop
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	40023800 	.word	0x40023800

0800169c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016a0:	e7fe      	b.n	80016a0 <NMI_Handler+0x4>

080016a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016a2:	b480      	push	{r7}
 80016a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016a6:	e7fe      	b.n	80016a6 <HardFault_Handler+0x4>

080016a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016ac:	e7fe      	b.n	80016ac <MemManage_Handler+0x4>

080016ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016ae:	b480      	push	{r7}
 80016b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016b2:	e7fe      	b.n	80016b2 <BusFault_Handler+0x4>

080016b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016b8:	e7fe      	b.n	80016b8 <UsageFault_Handler+0x4>

080016ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016ba:	b480      	push	{r7}
 80016bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016be:	bf00      	nop
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr

080016c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016cc:	bf00      	nop
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr

080016d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016d6:	b480      	push	{r7}
 80016d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016da:	bf00      	nop
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016e8:	f000 fa34 	bl	8001b54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016ec:	bf00      	nop
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  return 1;
 80016f4:	2301      	movs	r3, #1
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <_kill>:

int _kill(int pid, int sig)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800170a:	f003 fccf 	bl	80050ac <__errno>
 800170e:	4603      	mov	r3, r0
 8001710:	2216      	movs	r2, #22
 8001712:	601a      	str	r2, [r3, #0]
  return -1;
 8001714:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001718:	4618      	mov	r0, r3
 800171a:	3708      	adds	r7, #8
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <_exit>:

void _exit (int status)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001728:	f04f 31ff 	mov.w	r1, #4294967295
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f7ff ffe7 	bl	8001700 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001732:	e7fe      	b.n	8001732 <_exit+0x12>

08001734 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b086      	sub	sp, #24
 8001738:	af00      	add	r7, sp, #0
 800173a:	60f8      	str	r0, [r7, #12]
 800173c:	60b9      	str	r1, [r7, #8]
 800173e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001740:	2300      	movs	r3, #0
 8001742:	617b      	str	r3, [r7, #20]
 8001744:	e00a      	b.n	800175c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001746:	f3af 8000 	nop.w
 800174a:	4601      	mov	r1, r0
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	1c5a      	adds	r2, r3, #1
 8001750:	60ba      	str	r2, [r7, #8]
 8001752:	b2ca      	uxtb	r2, r1
 8001754:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	3301      	adds	r3, #1
 800175a:	617b      	str	r3, [r7, #20]
 800175c:	697a      	ldr	r2, [r7, #20]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	429a      	cmp	r2, r3
 8001762:	dbf0      	blt.n	8001746 <_read+0x12>
  }

  return len;
 8001764:	687b      	ldr	r3, [r7, #4]
}
 8001766:	4618      	mov	r0, r3
 8001768:	3718      	adds	r7, #24
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}

0800176e <_close>:
  }
  return len;
}

int _close(int file)
{
 800176e:	b480      	push	{r7}
 8001770:	b083      	sub	sp, #12
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001776:	f04f 33ff 	mov.w	r3, #4294967295
}
 800177a:	4618      	mov	r0, r3
 800177c:	370c      	adds	r7, #12
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr

08001786 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001786:	b480      	push	{r7}
 8001788:	b083      	sub	sp, #12
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]
 800178e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001796:	605a      	str	r2, [r3, #4]
  return 0;
 8001798:	2300      	movs	r3, #0
}
 800179a:	4618      	mov	r0, r3
 800179c:	370c      	adds	r7, #12
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr

080017a6 <_isatty>:

int _isatty(int file)
{
 80017a6:	b480      	push	{r7}
 80017a8:	b083      	sub	sp, #12
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017ae:	2301      	movs	r3, #1
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017bc:	b480      	push	{r7}
 80017be:	b085      	sub	sp, #20
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	60f8      	str	r0, [r7, #12]
 80017c4:	60b9      	str	r1, [r7, #8]
 80017c6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017c8:	2300      	movs	r3, #0
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3714      	adds	r7, #20
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
	...

080017d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b086      	sub	sp, #24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017e0:	4a14      	ldr	r2, [pc, #80]	; (8001834 <_sbrk+0x5c>)
 80017e2:	4b15      	ldr	r3, [pc, #84]	; (8001838 <_sbrk+0x60>)
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017ec:	4b13      	ldr	r3, [pc, #76]	; (800183c <_sbrk+0x64>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d102      	bne.n	80017fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017f4:	4b11      	ldr	r3, [pc, #68]	; (800183c <_sbrk+0x64>)
 80017f6:	4a12      	ldr	r2, [pc, #72]	; (8001840 <_sbrk+0x68>)
 80017f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017fa:	4b10      	ldr	r3, [pc, #64]	; (800183c <_sbrk+0x64>)
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4413      	add	r3, r2
 8001802:	693a      	ldr	r2, [r7, #16]
 8001804:	429a      	cmp	r2, r3
 8001806:	d207      	bcs.n	8001818 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001808:	f003 fc50 	bl	80050ac <__errno>
 800180c:	4603      	mov	r3, r0
 800180e:	220c      	movs	r2, #12
 8001810:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001812:	f04f 33ff 	mov.w	r3, #4294967295
 8001816:	e009      	b.n	800182c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001818:	4b08      	ldr	r3, [pc, #32]	; (800183c <_sbrk+0x64>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800181e:	4b07      	ldr	r3, [pc, #28]	; (800183c <_sbrk+0x64>)
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4413      	add	r3, r2
 8001826:	4a05      	ldr	r2, [pc, #20]	; (800183c <_sbrk+0x64>)
 8001828:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800182a:	68fb      	ldr	r3, [r7, #12]
}
 800182c:	4618      	mov	r0, r3
 800182e:	3718      	adds	r7, #24
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	20030000 	.word	0x20030000
 8001838:	00000400 	.word	0x00000400
 800183c:	2000024c 	.word	0x2000024c
 8001840:	200008f0 	.word	0x200008f0

08001844 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001848:	4b06      	ldr	r3, [pc, #24]	; (8001864 <SystemInit+0x20>)
 800184a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800184e:	4a05      	ldr	r2, [pc, #20]	; (8001864 <SystemInit+0x20>)
 8001850:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001854:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001858:	bf00      	nop
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	e000ed00 	.word	0xe000ed00

08001868 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800186c:	4b11      	ldr	r3, [pc, #68]	; (80018b4 <MX_USART3_UART_Init+0x4c>)
 800186e:	4a12      	ldr	r2, [pc, #72]	; (80018b8 <MX_USART3_UART_Init+0x50>)
 8001870:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001872:	4b10      	ldr	r3, [pc, #64]	; (80018b4 <MX_USART3_UART_Init+0x4c>)
 8001874:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001878:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800187a:	4b0e      	ldr	r3, [pc, #56]	; (80018b4 <MX_USART3_UART_Init+0x4c>)
 800187c:	2200      	movs	r2, #0
 800187e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001880:	4b0c      	ldr	r3, [pc, #48]	; (80018b4 <MX_USART3_UART_Init+0x4c>)
 8001882:	2200      	movs	r2, #0
 8001884:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001886:	4b0b      	ldr	r3, [pc, #44]	; (80018b4 <MX_USART3_UART_Init+0x4c>)
 8001888:	2200      	movs	r2, #0
 800188a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800188c:	4b09      	ldr	r3, [pc, #36]	; (80018b4 <MX_USART3_UART_Init+0x4c>)
 800188e:	220c      	movs	r2, #12
 8001890:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001892:	4b08      	ldr	r3, [pc, #32]	; (80018b4 <MX_USART3_UART_Init+0x4c>)
 8001894:	2200      	movs	r2, #0
 8001896:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001898:	4b06      	ldr	r3, [pc, #24]	; (80018b4 <MX_USART3_UART_Init+0x4c>)
 800189a:	2200      	movs	r2, #0
 800189c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800189e:	4805      	ldr	r0, [pc, #20]	; (80018b4 <MX_USART3_UART_Init+0x4c>)
 80018a0:	f001 fe80 	bl	80035a4 <HAL_UART_Init>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80018aa:	f7ff fe29 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80018ae:	bf00      	nop
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	20000250 	.word	0x20000250
 80018b8:	40004800 	.word	0x40004800

080018bc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b08a      	sub	sp, #40	; 0x28
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c4:	f107 0314 	add.w	r3, r7, #20
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	605a      	str	r2, [r3, #4]
 80018ce:	609a      	str	r2, [r3, #8]
 80018d0:	60da      	str	r2, [r3, #12]
 80018d2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a19      	ldr	r2, [pc, #100]	; (8001940 <HAL_UART_MspInit+0x84>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d12c      	bne.n	8001938 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80018de:	2300      	movs	r3, #0
 80018e0:	613b      	str	r3, [r7, #16]
 80018e2:	4b18      	ldr	r3, [pc, #96]	; (8001944 <HAL_UART_MspInit+0x88>)
 80018e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e6:	4a17      	ldr	r2, [pc, #92]	; (8001944 <HAL_UART_MspInit+0x88>)
 80018e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018ec:	6413      	str	r3, [r2, #64]	; 0x40
 80018ee:	4b15      	ldr	r3, [pc, #84]	; (8001944 <HAL_UART_MspInit+0x88>)
 80018f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018f6:	613b      	str	r3, [r7, #16]
 80018f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018fa:	2300      	movs	r3, #0
 80018fc:	60fb      	str	r3, [r7, #12]
 80018fe:	4b11      	ldr	r3, [pc, #68]	; (8001944 <HAL_UART_MspInit+0x88>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	4a10      	ldr	r2, [pc, #64]	; (8001944 <HAL_UART_MspInit+0x88>)
 8001904:	f043 0308 	orr.w	r3, r3, #8
 8001908:	6313      	str	r3, [r2, #48]	; 0x30
 800190a:	4b0e      	ldr	r3, [pc, #56]	; (8001944 <HAL_UART_MspInit+0x88>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	f003 0308 	and.w	r3, r3, #8
 8001912:	60fb      	str	r3, [r7, #12]
 8001914:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001916:	f44f 7340 	mov.w	r3, #768	; 0x300
 800191a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191c:	2302      	movs	r3, #2
 800191e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001920:	2300      	movs	r3, #0
 8001922:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001924:	2303      	movs	r3, #3
 8001926:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001928:	2307      	movs	r3, #7
 800192a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800192c:	f107 0314 	add.w	r3, r7, #20
 8001930:	4619      	mov	r1, r3
 8001932:	4805      	ldr	r0, [pc, #20]	; (8001948 <HAL_UART_MspInit+0x8c>)
 8001934:	f000 fa38 	bl	8001da8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001938:	bf00      	nop
 800193a:	3728      	adds	r7, #40	; 0x28
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	40004800 	.word	0x40004800
 8001944:	40023800 	.word	0x40023800
 8001948:	40020c00 	.word	0x40020c00

0800194c <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001950:	4b14      	ldr	r3, [pc, #80]	; (80019a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001952:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001956:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001958:	4b12      	ldr	r3, [pc, #72]	; (80019a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800195a:	2204      	movs	r2, #4
 800195c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800195e:	4b11      	ldr	r3, [pc, #68]	; (80019a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001960:	2202      	movs	r2, #2
 8001962:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001964:	4b0f      	ldr	r3, [pc, #60]	; (80019a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001966:	2200      	movs	r2, #0
 8001968:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800196a:	4b0e      	ldr	r3, [pc, #56]	; (80019a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800196c:	2202      	movs	r2, #2
 800196e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001970:	4b0c      	ldr	r3, [pc, #48]	; (80019a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001972:	2201      	movs	r2, #1
 8001974:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001976:	4b0b      	ldr	r3, [pc, #44]	; (80019a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001978:	2200      	movs	r2, #0
 800197a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800197c:	4b09      	ldr	r3, [pc, #36]	; (80019a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800197e:	2200      	movs	r2, #0
 8001980:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001982:	4b08      	ldr	r3, [pc, #32]	; (80019a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001984:	2201      	movs	r2, #1
 8001986:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001988:	4b06      	ldr	r3, [pc, #24]	; (80019a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800198a:	2200      	movs	r2, #0
 800198c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800198e:	4805      	ldr	r0, [pc, #20]	; (80019a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001990:	f000 fbe7 	bl	8002162 <HAL_PCD_Init>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800199a:	f7ff fdb1 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800199e:	bf00      	nop
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	20000294 	.word	0x20000294

080019a8 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b08a      	sub	sp, #40	; 0x28
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b0:	f107 0314 	add.w	r3, r7, #20
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	605a      	str	r2, [r3, #4]
 80019ba:	609a      	str	r2, [r3, #8]
 80019bc:	60da      	str	r2, [r3, #12]
 80019be:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019c8:	d13f      	bne.n	8001a4a <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ca:	2300      	movs	r3, #0
 80019cc:	613b      	str	r3, [r7, #16]
 80019ce:	4b21      	ldr	r3, [pc, #132]	; (8001a54 <HAL_PCD_MspInit+0xac>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d2:	4a20      	ldr	r2, [pc, #128]	; (8001a54 <HAL_PCD_MspInit+0xac>)
 80019d4:	f043 0301 	orr.w	r3, r3, #1
 80019d8:	6313      	str	r3, [r2, #48]	; 0x30
 80019da:	4b1e      	ldr	r3, [pc, #120]	; (8001a54 <HAL_PCD_MspInit+0xac>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019de:	f003 0301 	and.w	r3, r3, #1
 80019e2:	613b      	str	r3, [r7, #16]
 80019e4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80019e6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80019ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ec:	2302      	movs	r3, #2
 80019ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f0:	2300      	movs	r3, #0
 80019f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f4:	2303      	movs	r3, #3
 80019f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80019f8:	230a      	movs	r3, #10
 80019fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019fc:	f107 0314 	add.w	r3, r7, #20
 8001a00:	4619      	mov	r1, r3
 8001a02:	4815      	ldr	r0, [pc, #84]	; (8001a58 <HAL_PCD_MspInit+0xb0>)
 8001a04:	f000 f9d0 	bl	8001da8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001a08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a12:	2300      	movs	r3, #0
 8001a14:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001a16:	f107 0314 	add.w	r3, r7, #20
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	480e      	ldr	r0, [pc, #56]	; (8001a58 <HAL_PCD_MspInit+0xb0>)
 8001a1e:	f000 f9c3 	bl	8001da8 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001a22:	4b0c      	ldr	r3, [pc, #48]	; (8001a54 <HAL_PCD_MspInit+0xac>)
 8001a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a26:	4a0b      	ldr	r2, [pc, #44]	; (8001a54 <HAL_PCD_MspInit+0xac>)
 8001a28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a2c:	6353      	str	r3, [r2, #52]	; 0x34
 8001a2e:	2300      	movs	r3, #0
 8001a30:	60fb      	str	r3, [r7, #12]
 8001a32:	4b08      	ldr	r3, [pc, #32]	; (8001a54 <HAL_PCD_MspInit+0xac>)
 8001a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a36:	4a07      	ldr	r2, [pc, #28]	; (8001a54 <HAL_PCD_MspInit+0xac>)
 8001a38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a3c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a3e:	4b05      	ldr	r3, [pc, #20]	; (8001a54 <HAL_PCD_MspInit+0xac>)
 8001a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a46:	60fb      	str	r3, [r7, #12]
 8001a48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001a4a:	bf00      	nop
 8001a4c:	3728      	adds	r7, #40	; 0x28
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	40023800 	.word	0x40023800
 8001a58:	40020000 	.word	0x40020000

08001a5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001a5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a94 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a60:	480d      	ldr	r0, [pc, #52]	; (8001a98 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a62:	490e      	ldr	r1, [pc, #56]	; (8001a9c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a64:	4a0e      	ldr	r2, [pc, #56]	; (8001aa0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a68:	e002      	b.n	8001a70 <LoopCopyDataInit>

08001a6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a6e:	3304      	adds	r3, #4

08001a70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a74:	d3f9      	bcc.n	8001a6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a76:	4a0b      	ldr	r2, [pc, #44]	; (8001aa4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a78:	4c0b      	ldr	r4, [pc, #44]	; (8001aa8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a7c:	e001      	b.n	8001a82 <LoopFillZerobss>

08001a7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a80:	3204      	adds	r2, #4

08001a82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a84:	d3fb      	bcc.n	8001a7e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a86:	f7ff fedd 	bl	8001844 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a8a:	f003 fb15 	bl	80050b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a8e:	f7ff fc1f 	bl	80012d0 <main>
  bx  lr    
 8001a92:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001a94:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001a98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a9c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001aa0:	0800716c 	.word	0x0800716c
  ldr r2, =_sbss
 8001aa4:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001aa8:	200008f0 	.word	0x200008f0

08001aac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001aac:	e7fe      	b.n	8001aac <ADC_IRQHandler>
	...

08001ab0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ab4:	4b0e      	ldr	r3, [pc, #56]	; (8001af0 <HAL_Init+0x40>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a0d      	ldr	r2, [pc, #52]	; (8001af0 <HAL_Init+0x40>)
 8001aba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001abe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ac0:	4b0b      	ldr	r3, [pc, #44]	; (8001af0 <HAL_Init+0x40>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a0a      	ldr	r2, [pc, #40]	; (8001af0 <HAL_Init+0x40>)
 8001ac6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001aca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001acc:	4b08      	ldr	r3, [pc, #32]	; (8001af0 <HAL_Init+0x40>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a07      	ldr	r2, [pc, #28]	; (8001af0 <HAL_Init+0x40>)
 8001ad2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ad6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ad8:	2003      	movs	r0, #3
 8001ada:	f000 f931 	bl	8001d40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ade:	2000      	movs	r0, #0
 8001ae0:	f000 f808 	bl	8001af4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ae4:	f7ff fdb2 	bl	800164c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ae8:	2300      	movs	r3, #0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	40023c00 	.word	0x40023c00

08001af4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001afc:	4b12      	ldr	r3, [pc, #72]	; (8001b48 <HAL_InitTick+0x54>)
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	4b12      	ldr	r3, [pc, #72]	; (8001b4c <HAL_InitTick+0x58>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	4619      	mov	r1, r3
 8001b06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b12:	4618      	mov	r0, r3
 8001b14:	f000 f93b 	bl	8001d8e <HAL_SYSTICK_Config>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e00e      	b.n	8001b40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2b0f      	cmp	r3, #15
 8001b26:	d80a      	bhi.n	8001b3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b28:	2200      	movs	r2, #0
 8001b2a:	6879      	ldr	r1, [r7, #4]
 8001b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b30:	f000 f911 	bl	8001d56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b34:	4a06      	ldr	r2, [pc, #24]	; (8001b50 <HAL_InitTick+0x5c>)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	e000      	b.n	8001b40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3708      	adds	r7, #8
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	20000000 	.word	0x20000000
 8001b4c:	20000008 	.word	0x20000008
 8001b50:	20000004 	.word	0x20000004

08001b54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b58:	4b06      	ldr	r3, [pc, #24]	; (8001b74 <HAL_IncTick+0x20>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	4b06      	ldr	r3, [pc, #24]	; (8001b78 <HAL_IncTick+0x24>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4413      	add	r3, r2
 8001b64:	4a04      	ldr	r2, [pc, #16]	; (8001b78 <HAL_IncTick+0x24>)
 8001b66:	6013      	str	r3, [r2, #0]
}
 8001b68:	bf00      	nop
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	20000008 	.word	0x20000008
 8001b78:	200007a0 	.word	0x200007a0

08001b7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b80:	4b03      	ldr	r3, [pc, #12]	; (8001b90 <HAL_GetTick+0x14>)
 8001b82:	681b      	ldr	r3, [r3, #0]
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	200007a0 	.word	0x200007a0

08001b94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b9c:	f7ff ffee 	bl	8001b7c <HAL_GetTick>
 8001ba0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bac:	d005      	beq.n	8001bba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bae:	4b0a      	ldr	r3, [pc, #40]	; (8001bd8 <HAL_Delay+0x44>)
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	4413      	add	r3, r2
 8001bb8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001bba:	bf00      	nop
 8001bbc:	f7ff ffde 	bl	8001b7c <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	68fa      	ldr	r2, [r7, #12]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d8f7      	bhi.n	8001bbc <HAL_Delay+0x28>
  {
  }
}
 8001bcc:	bf00      	nop
 8001bce:	bf00      	nop
 8001bd0:	3710      	adds	r7, #16
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	20000008 	.word	0x20000008

08001bdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b085      	sub	sp, #20
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f003 0307 	and.w	r3, r3, #7
 8001bea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bec:	4b0c      	ldr	r3, [pc, #48]	; (8001c20 <__NVIC_SetPriorityGrouping+0x44>)
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bf2:	68ba      	ldr	r2, [r7, #8]
 8001bf4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c0e:	4a04      	ldr	r2, [pc, #16]	; (8001c20 <__NVIC_SetPriorityGrouping+0x44>)
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	60d3      	str	r3, [r2, #12]
}
 8001c14:	bf00      	nop
 8001c16:	3714      	adds	r7, #20
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr
 8001c20:	e000ed00 	.word	0xe000ed00

08001c24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c28:	4b04      	ldr	r3, [pc, #16]	; (8001c3c <__NVIC_GetPriorityGrouping+0x18>)
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	0a1b      	lsrs	r3, r3, #8
 8001c2e:	f003 0307 	and.w	r3, r3, #7
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr
 8001c3c:	e000ed00 	.word	0xe000ed00

08001c40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	4603      	mov	r3, r0
 8001c48:	6039      	str	r1, [r7, #0]
 8001c4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	db0a      	blt.n	8001c6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	b2da      	uxtb	r2, r3
 8001c58:	490c      	ldr	r1, [pc, #48]	; (8001c8c <__NVIC_SetPriority+0x4c>)
 8001c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5e:	0112      	lsls	r2, r2, #4
 8001c60:	b2d2      	uxtb	r2, r2
 8001c62:	440b      	add	r3, r1
 8001c64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c68:	e00a      	b.n	8001c80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	b2da      	uxtb	r2, r3
 8001c6e:	4908      	ldr	r1, [pc, #32]	; (8001c90 <__NVIC_SetPriority+0x50>)
 8001c70:	79fb      	ldrb	r3, [r7, #7]
 8001c72:	f003 030f 	and.w	r3, r3, #15
 8001c76:	3b04      	subs	r3, #4
 8001c78:	0112      	lsls	r2, r2, #4
 8001c7a:	b2d2      	uxtb	r2, r2
 8001c7c:	440b      	add	r3, r1
 8001c7e:	761a      	strb	r2, [r3, #24]
}
 8001c80:	bf00      	nop
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr
 8001c8c:	e000e100 	.word	0xe000e100
 8001c90:	e000ed00 	.word	0xe000ed00

08001c94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b089      	sub	sp, #36	; 0x24
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	60f8      	str	r0, [r7, #12]
 8001c9c:	60b9      	str	r1, [r7, #8]
 8001c9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	f003 0307 	and.w	r3, r3, #7
 8001ca6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	f1c3 0307 	rsb	r3, r3, #7
 8001cae:	2b04      	cmp	r3, #4
 8001cb0:	bf28      	it	cs
 8001cb2:	2304      	movcs	r3, #4
 8001cb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	3304      	adds	r3, #4
 8001cba:	2b06      	cmp	r3, #6
 8001cbc:	d902      	bls.n	8001cc4 <NVIC_EncodePriority+0x30>
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	3b03      	subs	r3, #3
 8001cc2:	e000      	b.n	8001cc6 <NVIC_EncodePriority+0x32>
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc8:	f04f 32ff 	mov.w	r2, #4294967295
 8001ccc:	69bb      	ldr	r3, [r7, #24]
 8001cce:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd2:	43da      	mvns	r2, r3
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	401a      	ands	r2, r3
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cdc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce6:	43d9      	mvns	r1, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cec:	4313      	orrs	r3, r2
         );
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3724      	adds	r7, #36	; 0x24
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
	...

08001cfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	3b01      	subs	r3, #1
 8001d08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d0c:	d301      	bcc.n	8001d12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e00f      	b.n	8001d32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d12:	4a0a      	ldr	r2, [pc, #40]	; (8001d3c <SysTick_Config+0x40>)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	3b01      	subs	r3, #1
 8001d18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d1a:	210f      	movs	r1, #15
 8001d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d20:	f7ff ff8e 	bl	8001c40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d24:	4b05      	ldr	r3, [pc, #20]	; (8001d3c <SysTick_Config+0x40>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d2a:	4b04      	ldr	r3, [pc, #16]	; (8001d3c <SysTick_Config+0x40>)
 8001d2c:	2207      	movs	r2, #7
 8001d2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d30:	2300      	movs	r3, #0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	e000e010 	.word	0xe000e010

08001d40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f7ff ff47 	bl	8001bdc <__NVIC_SetPriorityGrouping>
}
 8001d4e:	bf00      	nop
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}

08001d56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d56:	b580      	push	{r7, lr}
 8001d58:	b086      	sub	sp, #24
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	60b9      	str	r1, [r7, #8]
 8001d60:	607a      	str	r2, [r7, #4]
 8001d62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d64:	2300      	movs	r3, #0
 8001d66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d68:	f7ff ff5c 	bl	8001c24 <__NVIC_GetPriorityGrouping>
 8001d6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	68b9      	ldr	r1, [r7, #8]
 8001d72:	6978      	ldr	r0, [r7, #20]
 8001d74:	f7ff ff8e 	bl	8001c94 <NVIC_EncodePriority>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d7e:	4611      	mov	r1, r2
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7ff ff5d 	bl	8001c40 <__NVIC_SetPriority>
}
 8001d86:	bf00      	nop
 8001d88:	3718      	adds	r7, #24
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b082      	sub	sp, #8
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f7ff ffb0 	bl	8001cfc <SysTick_Config>
 8001d9c:	4603      	mov	r3, r0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
	...

08001da8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b089      	sub	sp, #36	; 0x24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001db2:	2300      	movs	r3, #0
 8001db4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001db6:	2300      	movs	r3, #0
 8001db8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	61fb      	str	r3, [r7, #28]
 8001dc2:	e177      	b.n	80020b4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	697a      	ldr	r2, [r7, #20]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001dd8:	693a      	ldr	r2, [r7, #16]
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	f040 8166 	bne.w	80020ae <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f003 0303 	and.w	r3, r3, #3
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d005      	beq.n	8001dfa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d130      	bne.n	8001e5c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	005b      	lsls	r3, r3, #1
 8001e04:	2203      	movs	r2, #3
 8001e06:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0a:	43db      	mvns	r3, r3
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	4013      	ands	r3, r2
 8001e10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	68da      	ldr	r2, [r3, #12]
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1e:	69ba      	ldr	r2, [r7, #24]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	69ba      	ldr	r2, [r7, #24]
 8001e28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e30:	2201      	movs	r2, #1
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	43db      	mvns	r3, r3
 8001e3a:	69ba      	ldr	r2, [r7, #24]
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	091b      	lsrs	r3, r3, #4
 8001e46:	f003 0201 	and.w	r2, r3, #1
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e50:	69ba      	ldr	r2, [r7, #24]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f003 0303 	and.w	r3, r3, #3
 8001e64:	2b03      	cmp	r3, #3
 8001e66:	d017      	beq.n	8001e98 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	2203      	movs	r2, #3
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	69ba      	ldr	r2, [r7, #24]
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	689a      	ldr	r2, [r3, #8]
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f003 0303 	and.w	r3, r3, #3
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d123      	bne.n	8001eec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	08da      	lsrs	r2, r3, #3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	3208      	adds	r2, #8
 8001eac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	f003 0307 	and.w	r3, r3, #7
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	220f      	movs	r2, #15
 8001ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec0:	43db      	mvns	r3, r3
 8001ec2:	69ba      	ldr	r2, [r7, #24]
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	691a      	ldr	r2, [r3, #16]
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	f003 0307 	and.w	r3, r3, #7
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	08da      	lsrs	r2, r3, #3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	3208      	adds	r2, #8
 8001ee6:	69b9      	ldr	r1, [r7, #24]
 8001ee8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	2203      	movs	r2, #3
 8001ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8001efc:	43db      	mvns	r3, r3
 8001efe:	69ba      	ldr	r2, [r7, #24]
 8001f00:	4013      	ands	r3, r2
 8001f02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f003 0203 	and.w	r2, r3, #3
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	005b      	lsls	r3, r3, #1
 8001f10:	fa02 f303 	lsl.w	r3, r2, r3
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	f000 80c0 	beq.w	80020ae <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f2e:	2300      	movs	r3, #0
 8001f30:	60fb      	str	r3, [r7, #12]
 8001f32:	4b66      	ldr	r3, [pc, #408]	; (80020cc <HAL_GPIO_Init+0x324>)
 8001f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f36:	4a65      	ldr	r2, [pc, #404]	; (80020cc <HAL_GPIO_Init+0x324>)
 8001f38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f3c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f3e:	4b63      	ldr	r3, [pc, #396]	; (80020cc <HAL_GPIO_Init+0x324>)
 8001f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f46:	60fb      	str	r3, [r7, #12]
 8001f48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f4a:	4a61      	ldr	r2, [pc, #388]	; (80020d0 <HAL_GPIO_Init+0x328>)
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	089b      	lsrs	r3, r3, #2
 8001f50:	3302      	adds	r3, #2
 8001f52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	f003 0303 	and.w	r3, r3, #3
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	220f      	movs	r2, #15
 8001f62:	fa02 f303 	lsl.w	r3, r2, r3
 8001f66:	43db      	mvns	r3, r3
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a58      	ldr	r2, [pc, #352]	; (80020d4 <HAL_GPIO_Init+0x32c>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d037      	beq.n	8001fe6 <HAL_GPIO_Init+0x23e>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a57      	ldr	r2, [pc, #348]	; (80020d8 <HAL_GPIO_Init+0x330>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d031      	beq.n	8001fe2 <HAL_GPIO_Init+0x23a>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a56      	ldr	r2, [pc, #344]	; (80020dc <HAL_GPIO_Init+0x334>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d02b      	beq.n	8001fde <HAL_GPIO_Init+0x236>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a55      	ldr	r2, [pc, #340]	; (80020e0 <HAL_GPIO_Init+0x338>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d025      	beq.n	8001fda <HAL_GPIO_Init+0x232>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a54      	ldr	r2, [pc, #336]	; (80020e4 <HAL_GPIO_Init+0x33c>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d01f      	beq.n	8001fd6 <HAL_GPIO_Init+0x22e>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a53      	ldr	r2, [pc, #332]	; (80020e8 <HAL_GPIO_Init+0x340>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d019      	beq.n	8001fd2 <HAL_GPIO_Init+0x22a>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a52      	ldr	r2, [pc, #328]	; (80020ec <HAL_GPIO_Init+0x344>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d013      	beq.n	8001fce <HAL_GPIO_Init+0x226>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a51      	ldr	r2, [pc, #324]	; (80020f0 <HAL_GPIO_Init+0x348>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d00d      	beq.n	8001fca <HAL_GPIO_Init+0x222>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a50      	ldr	r2, [pc, #320]	; (80020f4 <HAL_GPIO_Init+0x34c>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d007      	beq.n	8001fc6 <HAL_GPIO_Init+0x21e>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a4f      	ldr	r2, [pc, #316]	; (80020f8 <HAL_GPIO_Init+0x350>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d101      	bne.n	8001fc2 <HAL_GPIO_Init+0x21a>
 8001fbe:	2309      	movs	r3, #9
 8001fc0:	e012      	b.n	8001fe8 <HAL_GPIO_Init+0x240>
 8001fc2:	230a      	movs	r3, #10
 8001fc4:	e010      	b.n	8001fe8 <HAL_GPIO_Init+0x240>
 8001fc6:	2308      	movs	r3, #8
 8001fc8:	e00e      	b.n	8001fe8 <HAL_GPIO_Init+0x240>
 8001fca:	2307      	movs	r3, #7
 8001fcc:	e00c      	b.n	8001fe8 <HAL_GPIO_Init+0x240>
 8001fce:	2306      	movs	r3, #6
 8001fd0:	e00a      	b.n	8001fe8 <HAL_GPIO_Init+0x240>
 8001fd2:	2305      	movs	r3, #5
 8001fd4:	e008      	b.n	8001fe8 <HAL_GPIO_Init+0x240>
 8001fd6:	2304      	movs	r3, #4
 8001fd8:	e006      	b.n	8001fe8 <HAL_GPIO_Init+0x240>
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e004      	b.n	8001fe8 <HAL_GPIO_Init+0x240>
 8001fde:	2302      	movs	r3, #2
 8001fe0:	e002      	b.n	8001fe8 <HAL_GPIO_Init+0x240>
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e000      	b.n	8001fe8 <HAL_GPIO_Init+0x240>
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	69fa      	ldr	r2, [r7, #28]
 8001fea:	f002 0203 	and.w	r2, r2, #3
 8001fee:	0092      	lsls	r2, r2, #2
 8001ff0:	4093      	lsls	r3, r2
 8001ff2:	69ba      	ldr	r2, [r7, #24]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ff8:	4935      	ldr	r1, [pc, #212]	; (80020d0 <HAL_GPIO_Init+0x328>)
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	089b      	lsrs	r3, r3, #2
 8001ffe:	3302      	adds	r3, #2
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002006:	4b3d      	ldr	r3, [pc, #244]	; (80020fc <HAL_GPIO_Init+0x354>)
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	43db      	mvns	r3, r3
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	4013      	ands	r3, r2
 8002014:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d003      	beq.n	800202a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	4313      	orrs	r3, r2
 8002028:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800202a:	4a34      	ldr	r2, [pc, #208]	; (80020fc <HAL_GPIO_Init+0x354>)
 800202c:	69bb      	ldr	r3, [r7, #24]
 800202e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002030:	4b32      	ldr	r3, [pc, #200]	; (80020fc <HAL_GPIO_Init+0x354>)
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	43db      	mvns	r3, r3
 800203a:	69ba      	ldr	r2, [r7, #24]
 800203c:	4013      	ands	r3, r2
 800203e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d003      	beq.n	8002054 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800204c:	69ba      	ldr	r2, [r7, #24]
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	4313      	orrs	r3, r2
 8002052:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002054:	4a29      	ldr	r2, [pc, #164]	; (80020fc <HAL_GPIO_Init+0x354>)
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800205a:	4b28      	ldr	r3, [pc, #160]	; (80020fc <HAL_GPIO_Init+0x354>)
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	43db      	mvns	r3, r3
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	4013      	ands	r3, r2
 8002068:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d003      	beq.n	800207e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002076:	69ba      	ldr	r2, [r7, #24]
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	4313      	orrs	r3, r2
 800207c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800207e:	4a1f      	ldr	r2, [pc, #124]	; (80020fc <HAL_GPIO_Init+0x354>)
 8002080:	69bb      	ldr	r3, [r7, #24]
 8002082:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002084:	4b1d      	ldr	r3, [pc, #116]	; (80020fc <HAL_GPIO_Init+0x354>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	43db      	mvns	r3, r3
 800208e:	69ba      	ldr	r2, [r7, #24]
 8002090:	4013      	ands	r3, r2
 8002092:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d003      	beq.n	80020a8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020a8:	4a14      	ldr	r2, [pc, #80]	; (80020fc <HAL_GPIO_Init+0x354>)
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	3301      	adds	r3, #1
 80020b2:	61fb      	str	r3, [r7, #28]
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	2b0f      	cmp	r3, #15
 80020b8:	f67f ae84 	bls.w	8001dc4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020bc:	bf00      	nop
 80020be:	bf00      	nop
 80020c0:	3724      	adds	r7, #36	; 0x24
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	40023800 	.word	0x40023800
 80020d0:	40013800 	.word	0x40013800
 80020d4:	40020000 	.word	0x40020000
 80020d8:	40020400 	.word	0x40020400
 80020dc:	40020800 	.word	0x40020800
 80020e0:	40020c00 	.word	0x40020c00
 80020e4:	40021000 	.word	0x40021000
 80020e8:	40021400 	.word	0x40021400
 80020ec:	40021800 	.word	0x40021800
 80020f0:	40021c00 	.word	0x40021c00
 80020f4:	40022000 	.word	0x40022000
 80020f8:	40022400 	.word	0x40022400
 80020fc:	40013c00 	.word	0x40013c00

08002100 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002100:	b480      	push	{r7}
 8002102:	b085      	sub	sp, #20
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	460b      	mov	r3, r1
 800210a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	691a      	ldr	r2, [r3, #16]
 8002110:	887b      	ldrh	r3, [r7, #2]
 8002112:	4013      	ands	r3, r2
 8002114:	2b00      	cmp	r3, #0
 8002116:	d002      	beq.n	800211e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002118:	2301      	movs	r3, #1
 800211a:	73fb      	strb	r3, [r7, #15]
 800211c:	e001      	b.n	8002122 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800211e:	2300      	movs	r3, #0
 8002120:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002122:	7bfb      	ldrb	r3, [r7, #15]
}
 8002124:	4618      	mov	r0, r3
 8002126:	3714      	adds	r7, #20
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	460b      	mov	r3, r1
 800213a:	807b      	strh	r3, [r7, #2]
 800213c:	4613      	mov	r3, r2
 800213e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002140:	787b      	ldrb	r3, [r7, #1]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d003      	beq.n	800214e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002146:	887a      	ldrh	r2, [r7, #2]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800214c:	e003      	b.n	8002156 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800214e:	887b      	ldrh	r3, [r7, #2]
 8002150:	041a      	lsls	r2, r3, #16
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	619a      	str	r2, [r3, #24]
}
 8002156:	bf00      	nop
 8002158:	370c      	adds	r7, #12
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr

08002162 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002162:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002164:	b08f      	sub	sp, #60	; 0x3c
 8002166:	af0a      	add	r7, sp, #40	; 0x28
 8002168:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d101      	bne.n	8002174 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e10f      	b.n	8002394 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002180:	b2db      	uxtb	r3, r3
 8002182:	2b00      	cmp	r3, #0
 8002184:	d106      	bne.n	8002194 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f7ff fc0a 	bl	80019a8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2203      	movs	r2, #3
 8002198:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d102      	bne.n	80021ae <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2200      	movs	r2, #0
 80021ac:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f001 fe19 	bl	8003dea <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	603b      	str	r3, [r7, #0]
 80021be:	687e      	ldr	r6, [r7, #4]
 80021c0:	466d      	mov	r5, sp
 80021c2:	f106 0410 	add.w	r4, r6, #16
 80021c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021ce:	e894 0003 	ldmia.w	r4, {r0, r1}
 80021d2:	e885 0003 	stmia.w	r5, {r0, r1}
 80021d6:	1d33      	adds	r3, r6, #4
 80021d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021da:	6838      	ldr	r0, [r7, #0]
 80021dc:	f001 fda4 	bl	8003d28 <USB_CoreInit>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d005      	beq.n	80021f2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2202      	movs	r2, #2
 80021ea:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e0d0      	b.n	8002394 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	2100      	movs	r1, #0
 80021f8:	4618      	mov	r0, r3
 80021fa:	f001 fe07 	bl	8003e0c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021fe:	2300      	movs	r3, #0
 8002200:	73fb      	strb	r3, [r7, #15]
 8002202:	e04a      	b.n	800229a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002204:	7bfa      	ldrb	r2, [r7, #15]
 8002206:	6879      	ldr	r1, [r7, #4]
 8002208:	4613      	mov	r3, r2
 800220a:	00db      	lsls	r3, r3, #3
 800220c:	4413      	add	r3, r2
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	440b      	add	r3, r1
 8002212:	333d      	adds	r3, #61	; 0x3d
 8002214:	2201      	movs	r2, #1
 8002216:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002218:	7bfa      	ldrb	r2, [r7, #15]
 800221a:	6879      	ldr	r1, [r7, #4]
 800221c:	4613      	mov	r3, r2
 800221e:	00db      	lsls	r3, r3, #3
 8002220:	4413      	add	r3, r2
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	440b      	add	r3, r1
 8002226:	333c      	adds	r3, #60	; 0x3c
 8002228:	7bfa      	ldrb	r2, [r7, #15]
 800222a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800222c:	7bfa      	ldrb	r2, [r7, #15]
 800222e:	7bfb      	ldrb	r3, [r7, #15]
 8002230:	b298      	uxth	r0, r3
 8002232:	6879      	ldr	r1, [r7, #4]
 8002234:	4613      	mov	r3, r2
 8002236:	00db      	lsls	r3, r3, #3
 8002238:	4413      	add	r3, r2
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	440b      	add	r3, r1
 800223e:	3344      	adds	r3, #68	; 0x44
 8002240:	4602      	mov	r2, r0
 8002242:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002244:	7bfa      	ldrb	r2, [r7, #15]
 8002246:	6879      	ldr	r1, [r7, #4]
 8002248:	4613      	mov	r3, r2
 800224a:	00db      	lsls	r3, r3, #3
 800224c:	4413      	add	r3, r2
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	440b      	add	r3, r1
 8002252:	3340      	adds	r3, #64	; 0x40
 8002254:	2200      	movs	r2, #0
 8002256:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002258:	7bfa      	ldrb	r2, [r7, #15]
 800225a:	6879      	ldr	r1, [r7, #4]
 800225c:	4613      	mov	r3, r2
 800225e:	00db      	lsls	r3, r3, #3
 8002260:	4413      	add	r3, r2
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	440b      	add	r3, r1
 8002266:	3348      	adds	r3, #72	; 0x48
 8002268:	2200      	movs	r2, #0
 800226a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800226c:	7bfa      	ldrb	r2, [r7, #15]
 800226e:	6879      	ldr	r1, [r7, #4]
 8002270:	4613      	mov	r3, r2
 8002272:	00db      	lsls	r3, r3, #3
 8002274:	4413      	add	r3, r2
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	440b      	add	r3, r1
 800227a:	334c      	adds	r3, #76	; 0x4c
 800227c:	2200      	movs	r2, #0
 800227e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002280:	7bfa      	ldrb	r2, [r7, #15]
 8002282:	6879      	ldr	r1, [r7, #4]
 8002284:	4613      	mov	r3, r2
 8002286:	00db      	lsls	r3, r3, #3
 8002288:	4413      	add	r3, r2
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	440b      	add	r3, r1
 800228e:	3354      	adds	r3, #84	; 0x54
 8002290:	2200      	movs	r2, #0
 8002292:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002294:	7bfb      	ldrb	r3, [r7, #15]
 8002296:	3301      	adds	r3, #1
 8002298:	73fb      	strb	r3, [r7, #15]
 800229a:	7bfa      	ldrb	r2, [r7, #15]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d3af      	bcc.n	8002204 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022a4:	2300      	movs	r3, #0
 80022a6:	73fb      	strb	r3, [r7, #15]
 80022a8:	e044      	b.n	8002334 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80022aa:	7bfa      	ldrb	r2, [r7, #15]
 80022ac:	6879      	ldr	r1, [r7, #4]
 80022ae:	4613      	mov	r3, r2
 80022b0:	00db      	lsls	r3, r3, #3
 80022b2:	4413      	add	r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	440b      	add	r3, r1
 80022b8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80022bc:	2200      	movs	r2, #0
 80022be:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80022c0:	7bfa      	ldrb	r2, [r7, #15]
 80022c2:	6879      	ldr	r1, [r7, #4]
 80022c4:	4613      	mov	r3, r2
 80022c6:	00db      	lsls	r3, r3, #3
 80022c8:	4413      	add	r3, r2
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	440b      	add	r3, r1
 80022ce:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80022d2:	7bfa      	ldrb	r2, [r7, #15]
 80022d4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80022d6:	7bfa      	ldrb	r2, [r7, #15]
 80022d8:	6879      	ldr	r1, [r7, #4]
 80022da:	4613      	mov	r3, r2
 80022dc:	00db      	lsls	r3, r3, #3
 80022de:	4413      	add	r3, r2
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	440b      	add	r3, r1
 80022e4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80022e8:	2200      	movs	r2, #0
 80022ea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80022ec:	7bfa      	ldrb	r2, [r7, #15]
 80022ee:	6879      	ldr	r1, [r7, #4]
 80022f0:	4613      	mov	r3, r2
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	4413      	add	r3, r2
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	440b      	add	r3, r1
 80022fa:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80022fe:	2200      	movs	r2, #0
 8002300:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002302:	7bfa      	ldrb	r2, [r7, #15]
 8002304:	6879      	ldr	r1, [r7, #4]
 8002306:	4613      	mov	r3, r2
 8002308:	00db      	lsls	r3, r3, #3
 800230a:	4413      	add	r3, r2
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	440b      	add	r3, r1
 8002310:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002318:	7bfa      	ldrb	r2, [r7, #15]
 800231a:	6879      	ldr	r1, [r7, #4]
 800231c:	4613      	mov	r3, r2
 800231e:	00db      	lsls	r3, r3, #3
 8002320:	4413      	add	r3, r2
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	440b      	add	r3, r1
 8002326:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800232a:	2200      	movs	r2, #0
 800232c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800232e:	7bfb      	ldrb	r3, [r7, #15]
 8002330:	3301      	adds	r3, #1
 8002332:	73fb      	strb	r3, [r7, #15]
 8002334:	7bfa      	ldrb	r2, [r7, #15]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	429a      	cmp	r2, r3
 800233c:	d3b5      	bcc.n	80022aa <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	603b      	str	r3, [r7, #0]
 8002344:	687e      	ldr	r6, [r7, #4]
 8002346:	466d      	mov	r5, sp
 8002348:	f106 0410 	add.w	r4, r6, #16
 800234c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800234e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002350:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002352:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002354:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002358:	e885 0003 	stmia.w	r5, {r0, r1}
 800235c:	1d33      	adds	r3, r6, #4
 800235e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002360:	6838      	ldr	r0, [r7, #0]
 8002362:	f001 fd9f 	bl	8003ea4 <USB_DevInit>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d005      	beq.n	8002378 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2202      	movs	r2, #2
 8002370:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e00d      	b.n	8002394 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2200      	movs	r2, #0
 800237c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2201      	movs	r2, #1
 8002384:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4618      	mov	r0, r3
 800238e:	f001 ff6a 	bl	8004266 <USB_DevDisconnect>

  return HAL_OK;
 8002392:	2300      	movs	r3, #0
}
 8002394:	4618      	mov	r0, r3
 8002396:	3714      	adds	r7, #20
 8002398:	46bd      	mov	sp, r7
 800239a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800239c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b086      	sub	sp, #24
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d101      	bne.n	80023ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e267      	b.n	800287e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0301 	and.w	r3, r3, #1
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d075      	beq.n	80024a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023ba:	4b88      	ldr	r3, [pc, #544]	; (80025dc <HAL_RCC_OscConfig+0x240>)
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f003 030c 	and.w	r3, r3, #12
 80023c2:	2b04      	cmp	r3, #4
 80023c4:	d00c      	beq.n	80023e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023c6:	4b85      	ldr	r3, [pc, #532]	; (80025dc <HAL_RCC_OscConfig+0x240>)
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023ce:	2b08      	cmp	r3, #8
 80023d0:	d112      	bne.n	80023f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023d2:	4b82      	ldr	r3, [pc, #520]	; (80025dc <HAL_RCC_OscConfig+0x240>)
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023de:	d10b      	bne.n	80023f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023e0:	4b7e      	ldr	r3, [pc, #504]	; (80025dc <HAL_RCC_OscConfig+0x240>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d05b      	beq.n	80024a4 <HAL_RCC_OscConfig+0x108>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d157      	bne.n	80024a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e242      	b.n	800287e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002400:	d106      	bne.n	8002410 <HAL_RCC_OscConfig+0x74>
 8002402:	4b76      	ldr	r3, [pc, #472]	; (80025dc <HAL_RCC_OscConfig+0x240>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a75      	ldr	r2, [pc, #468]	; (80025dc <HAL_RCC_OscConfig+0x240>)
 8002408:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800240c:	6013      	str	r3, [r2, #0]
 800240e:	e01d      	b.n	800244c <HAL_RCC_OscConfig+0xb0>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002418:	d10c      	bne.n	8002434 <HAL_RCC_OscConfig+0x98>
 800241a:	4b70      	ldr	r3, [pc, #448]	; (80025dc <HAL_RCC_OscConfig+0x240>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a6f      	ldr	r2, [pc, #444]	; (80025dc <HAL_RCC_OscConfig+0x240>)
 8002420:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002424:	6013      	str	r3, [r2, #0]
 8002426:	4b6d      	ldr	r3, [pc, #436]	; (80025dc <HAL_RCC_OscConfig+0x240>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a6c      	ldr	r2, [pc, #432]	; (80025dc <HAL_RCC_OscConfig+0x240>)
 800242c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002430:	6013      	str	r3, [r2, #0]
 8002432:	e00b      	b.n	800244c <HAL_RCC_OscConfig+0xb0>
 8002434:	4b69      	ldr	r3, [pc, #420]	; (80025dc <HAL_RCC_OscConfig+0x240>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a68      	ldr	r2, [pc, #416]	; (80025dc <HAL_RCC_OscConfig+0x240>)
 800243a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800243e:	6013      	str	r3, [r2, #0]
 8002440:	4b66      	ldr	r3, [pc, #408]	; (80025dc <HAL_RCC_OscConfig+0x240>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a65      	ldr	r2, [pc, #404]	; (80025dc <HAL_RCC_OscConfig+0x240>)
 8002446:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800244a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d013      	beq.n	800247c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002454:	f7ff fb92 	bl	8001b7c <HAL_GetTick>
 8002458:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800245a:	e008      	b.n	800246e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800245c:	f7ff fb8e 	bl	8001b7c <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	2b64      	cmp	r3, #100	; 0x64
 8002468:	d901      	bls.n	800246e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e207      	b.n	800287e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800246e:	4b5b      	ldr	r3, [pc, #364]	; (80025dc <HAL_RCC_OscConfig+0x240>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d0f0      	beq.n	800245c <HAL_RCC_OscConfig+0xc0>
 800247a:	e014      	b.n	80024a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800247c:	f7ff fb7e 	bl	8001b7c <HAL_GetTick>
 8002480:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002482:	e008      	b.n	8002496 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002484:	f7ff fb7a 	bl	8001b7c <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	2b64      	cmp	r3, #100	; 0x64
 8002490:	d901      	bls.n	8002496 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e1f3      	b.n	800287e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002496:	4b51      	ldr	r3, [pc, #324]	; (80025dc <HAL_RCC_OscConfig+0x240>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d1f0      	bne.n	8002484 <HAL_RCC_OscConfig+0xe8>
 80024a2:	e000      	b.n	80024a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0302 	and.w	r3, r3, #2
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d063      	beq.n	800257a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024b2:	4b4a      	ldr	r3, [pc, #296]	; (80025dc <HAL_RCC_OscConfig+0x240>)
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	f003 030c 	and.w	r3, r3, #12
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d00b      	beq.n	80024d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024be:	4b47      	ldr	r3, [pc, #284]	; (80025dc <HAL_RCC_OscConfig+0x240>)
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024c6:	2b08      	cmp	r3, #8
 80024c8:	d11c      	bne.n	8002504 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024ca:	4b44      	ldr	r3, [pc, #272]	; (80025dc <HAL_RCC_OscConfig+0x240>)
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d116      	bne.n	8002504 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024d6:	4b41      	ldr	r3, [pc, #260]	; (80025dc <HAL_RCC_OscConfig+0x240>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0302 	and.w	r3, r3, #2
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d005      	beq.n	80024ee <HAL_RCC_OscConfig+0x152>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d001      	beq.n	80024ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e1c7      	b.n	800287e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ee:	4b3b      	ldr	r3, [pc, #236]	; (80025dc <HAL_RCC_OscConfig+0x240>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	691b      	ldr	r3, [r3, #16]
 80024fa:	00db      	lsls	r3, r3, #3
 80024fc:	4937      	ldr	r1, [pc, #220]	; (80025dc <HAL_RCC_OscConfig+0x240>)
 80024fe:	4313      	orrs	r3, r2
 8002500:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002502:	e03a      	b.n	800257a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d020      	beq.n	800254e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800250c:	4b34      	ldr	r3, [pc, #208]	; (80025e0 <HAL_RCC_OscConfig+0x244>)
 800250e:	2201      	movs	r2, #1
 8002510:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002512:	f7ff fb33 	bl	8001b7c <HAL_GetTick>
 8002516:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002518:	e008      	b.n	800252c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800251a:	f7ff fb2f 	bl	8001b7c <HAL_GetTick>
 800251e:	4602      	mov	r2, r0
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	2b02      	cmp	r3, #2
 8002526:	d901      	bls.n	800252c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002528:	2303      	movs	r3, #3
 800252a:	e1a8      	b.n	800287e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800252c:	4b2b      	ldr	r3, [pc, #172]	; (80025dc <HAL_RCC_OscConfig+0x240>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0302 	and.w	r3, r3, #2
 8002534:	2b00      	cmp	r3, #0
 8002536:	d0f0      	beq.n	800251a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002538:	4b28      	ldr	r3, [pc, #160]	; (80025dc <HAL_RCC_OscConfig+0x240>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	691b      	ldr	r3, [r3, #16]
 8002544:	00db      	lsls	r3, r3, #3
 8002546:	4925      	ldr	r1, [pc, #148]	; (80025dc <HAL_RCC_OscConfig+0x240>)
 8002548:	4313      	orrs	r3, r2
 800254a:	600b      	str	r3, [r1, #0]
 800254c:	e015      	b.n	800257a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800254e:	4b24      	ldr	r3, [pc, #144]	; (80025e0 <HAL_RCC_OscConfig+0x244>)
 8002550:	2200      	movs	r2, #0
 8002552:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002554:	f7ff fb12 	bl	8001b7c <HAL_GetTick>
 8002558:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800255a:	e008      	b.n	800256e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800255c:	f7ff fb0e 	bl	8001b7c <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	2b02      	cmp	r3, #2
 8002568:	d901      	bls.n	800256e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e187      	b.n	800287e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800256e:	4b1b      	ldr	r3, [pc, #108]	; (80025dc <HAL_RCC_OscConfig+0x240>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0302 	and.w	r3, r3, #2
 8002576:	2b00      	cmp	r3, #0
 8002578:	d1f0      	bne.n	800255c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0308 	and.w	r3, r3, #8
 8002582:	2b00      	cmp	r3, #0
 8002584:	d036      	beq.n	80025f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	695b      	ldr	r3, [r3, #20]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d016      	beq.n	80025bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800258e:	4b15      	ldr	r3, [pc, #84]	; (80025e4 <HAL_RCC_OscConfig+0x248>)
 8002590:	2201      	movs	r2, #1
 8002592:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002594:	f7ff faf2 	bl	8001b7c <HAL_GetTick>
 8002598:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800259a:	e008      	b.n	80025ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800259c:	f7ff faee 	bl	8001b7c <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e167      	b.n	800287e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025ae:	4b0b      	ldr	r3, [pc, #44]	; (80025dc <HAL_RCC_OscConfig+0x240>)
 80025b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d0f0      	beq.n	800259c <HAL_RCC_OscConfig+0x200>
 80025ba:	e01b      	b.n	80025f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025bc:	4b09      	ldr	r3, [pc, #36]	; (80025e4 <HAL_RCC_OscConfig+0x248>)
 80025be:	2200      	movs	r2, #0
 80025c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025c2:	f7ff fadb 	bl	8001b7c <HAL_GetTick>
 80025c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025c8:	e00e      	b.n	80025e8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025ca:	f7ff fad7 	bl	8001b7c <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d907      	bls.n	80025e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80025d8:	2303      	movs	r3, #3
 80025da:	e150      	b.n	800287e <HAL_RCC_OscConfig+0x4e2>
 80025dc:	40023800 	.word	0x40023800
 80025e0:	42470000 	.word	0x42470000
 80025e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025e8:	4b88      	ldr	r3, [pc, #544]	; (800280c <HAL_RCC_OscConfig+0x470>)
 80025ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025ec:	f003 0302 	and.w	r3, r3, #2
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d1ea      	bne.n	80025ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0304 	and.w	r3, r3, #4
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	f000 8097 	beq.w	8002730 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002602:	2300      	movs	r3, #0
 8002604:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002606:	4b81      	ldr	r3, [pc, #516]	; (800280c <HAL_RCC_OscConfig+0x470>)
 8002608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d10f      	bne.n	8002632 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002612:	2300      	movs	r3, #0
 8002614:	60bb      	str	r3, [r7, #8]
 8002616:	4b7d      	ldr	r3, [pc, #500]	; (800280c <HAL_RCC_OscConfig+0x470>)
 8002618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261a:	4a7c      	ldr	r2, [pc, #496]	; (800280c <HAL_RCC_OscConfig+0x470>)
 800261c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002620:	6413      	str	r3, [r2, #64]	; 0x40
 8002622:	4b7a      	ldr	r3, [pc, #488]	; (800280c <HAL_RCC_OscConfig+0x470>)
 8002624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800262a:	60bb      	str	r3, [r7, #8]
 800262c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800262e:	2301      	movs	r3, #1
 8002630:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002632:	4b77      	ldr	r3, [pc, #476]	; (8002810 <HAL_RCC_OscConfig+0x474>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800263a:	2b00      	cmp	r3, #0
 800263c:	d118      	bne.n	8002670 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800263e:	4b74      	ldr	r3, [pc, #464]	; (8002810 <HAL_RCC_OscConfig+0x474>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a73      	ldr	r2, [pc, #460]	; (8002810 <HAL_RCC_OscConfig+0x474>)
 8002644:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002648:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800264a:	f7ff fa97 	bl	8001b7c <HAL_GetTick>
 800264e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002650:	e008      	b.n	8002664 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002652:	f7ff fa93 	bl	8001b7c <HAL_GetTick>
 8002656:	4602      	mov	r2, r0
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	2b02      	cmp	r3, #2
 800265e:	d901      	bls.n	8002664 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002660:	2303      	movs	r3, #3
 8002662:	e10c      	b.n	800287e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002664:	4b6a      	ldr	r3, [pc, #424]	; (8002810 <HAL_RCC_OscConfig+0x474>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800266c:	2b00      	cmp	r3, #0
 800266e:	d0f0      	beq.n	8002652 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	2b01      	cmp	r3, #1
 8002676:	d106      	bne.n	8002686 <HAL_RCC_OscConfig+0x2ea>
 8002678:	4b64      	ldr	r3, [pc, #400]	; (800280c <HAL_RCC_OscConfig+0x470>)
 800267a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800267c:	4a63      	ldr	r2, [pc, #396]	; (800280c <HAL_RCC_OscConfig+0x470>)
 800267e:	f043 0301 	orr.w	r3, r3, #1
 8002682:	6713      	str	r3, [r2, #112]	; 0x70
 8002684:	e01c      	b.n	80026c0 <HAL_RCC_OscConfig+0x324>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	2b05      	cmp	r3, #5
 800268c:	d10c      	bne.n	80026a8 <HAL_RCC_OscConfig+0x30c>
 800268e:	4b5f      	ldr	r3, [pc, #380]	; (800280c <HAL_RCC_OscConfig+0x470>)
 8002690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002692:	4a5e      	ldr	r2, [pc, #376]	; (800280c <HAL_RCC_OscConfig+0x470>)
 8002694:	f043 0304 	orr.w	r3, r3, #4
 8002698:	6713      	str	r3, [r2, #112]	; 0x70
 800269a:	4b5c      	ldr	r3, [pc, #368]	; (800280c <HAL_RCC_OscConfig+0x470>)
 800269c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800269e:	4a5b      	ldr	r2, [pc, #364]	; (800280c <HAL_RCC_OscConfig+0x470>)
 80026a0:	f043 0301 	orr.w	r3, r3, #1
 80026a4:	6713      	str	r3, [r2, #112]	; 0x70
 80026a6:	e00b      	b.n	80026c0 <HAL_RCC_OscConfig+0x324>
 80026a8:	4b58      	ldr	r3, [pc, #352]	; (800280c <HAL_RCC_OscConfig+0x470>)
 80026aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ac:	4a57      	ldr	r2, [pc, #348]	; (800280c <HAL_RCC_OscConfig+0x470>)
 80026ae:	f023 0301 	bic.w	r3, r3, #1
 80026b2:	6713      	str	r3, [r2, #112]	; 0x70
 80026b4:	4b55      	ldr	r3, [pc, #340]	; (800280c <HAL_RCC_OscConfig+0x470>)
 80026b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b8:	4a54      	ldr	r2, [pc, #336]	; (800280c <HAL_RCC_OscConfig+0x470>)
 80026ba:	f023 0304 	bic.w	r3, r3, #4
 80026be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d015      	beq.n	80026f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026c8:	f7ff fa58 	bl	8001b7c <HAL_GetTick>
 80026cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026ce:	e00a      	b.n	80026e6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026d0:	f7ff fa54 	bl	8001b7c <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	f241 3288 	movw	r2, #5000	; 0x1388
 80026de:	4293      	cmp	r3, r2
 80026e0:	d901      	bls.n	80026e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e0cb      	b.n	800287e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026e6:	4b49      	ldr	r3, [pc, #292]	; (800280c <HAL_RCC_OscConfig+0x470>)
 80026e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ea:	f003 0302 	and.w	r3, r3, #2
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d0ee      	beq.n	80026d0 <HAL_RCC_OscConfig+0x334>
 80026f2:	e014      	b.n	800271e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026f4:	f7ff fa42 	bl	8001b7c <HAL_GetTick>
 80026f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026fa:	e00a      	b.n	8002712 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026fc:	f7ff fa3e 	bl	8001b7c <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	f241 3288 	movw	r2, #5000	; 0x1388
 800270a:	4293      	cmp	r3, r2
 800270c:	d901      	bls.n	8002712 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e0b5      	b.n	800287e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002712:	4b3e      	ldr	r3, [pc, #248]	; (800280c <HAL_RCC_OscConfig+0x470>)
 8002714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002716:	f003 0302 	and.w	r3, r3, #2
 800271a:	2b00      	cmp	r3, #0
 800271c:	d1ee      	bne.n	80026fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800271e:	7dfb      	ldrb	r3, [r7, #23]
 8002720:	2b01      	cmp	r3, #1
 8002722:	d105      	bne.n	8002730 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002724:	4b39      	ldr	r3, [pc, #228]	; (800280c <HAL_RCC_OscConfig+0x470>)
 8002726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002728:	4a38      	ldr	r2, [pc, #224]	; (800280c <HAL_RCC_OscConfig+0x470>)
 800272a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800272e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	699b      	ldr	r3, [r3, #24]
 8002734:	2b00      	cmp	r3, #0
 8002736:	f000 80a1 	beq.w	800287c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800273a:	4b34      	ldr	r3, [pc, #208]	; (800280c <HAL_RCC_OscConfig+0x470>)
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f003 030c 	and.w	r3, r3, #12
 8002742:	2b08      	cmp	r3, #8
 8002744:	d05c      	beq.n	8002800 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	699b      	ldr	r3, [r3, #24]
 800274a:	2b02      	cmp	r3, #2
 800274c:	d141      	bne.n	80027d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800274e:	4b31      	ldr	r3, [pc, #196]	; (8002814 <HAL_RCC_OscConfig+0x478>)
 8002750:	2200      	movs	r2, #0
 8002752:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002754:	f7ff fa12 	bl	8001b7c <HAL_GetTick>
 8002758:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800275a:	e008      	b.n	800276e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800275c:	f7ff fa0e 	bl	8001b7c <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	2b02      	cmp	r3, #2
 8002768:	d901      	bls.n	800276e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e087      	b.n	800287e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800276e:	4b27      	ldr	r3, [pc, #156]	; (800280c <HAL_RCC_OscConfig+0x470>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d1f0      	bne.n	800275c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	69da      	ldr	r2, [r3, #28]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a1b      	ldr	r3, [r3, #32]
 8002782:	431a      	orrs	r2, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002788:	019b      	lsls	r3, r3, #6
 800278a:	431a      	orrs	r2, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002790:	085b      	lsrs	r3, r3, #1
 8002792:	3b01      	subs	r3, #1
 8002794:	041b      	lsls	r3, r3, #16
 8002796:	431a      	orrs	r2, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800279c:	061b      	lsls	r3, r3, #24
 800279e:	491b      	ldr	r1, [pc, #108]	; (800280c <HAL_RCC_OscConfig+0x470>)
 80027a0:	4313      	orrs	r3, r2
 80027a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027a4:	4b1b      	ldr	r3, [pc, #108]	; (8002814 <HAL_RCC_OscConfig+0x478>)
 80027a6:	2201      	movs	r2, #1
 80027a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027aa:	f7ff f9e7 	bl	8001b7c <HAL_GetTick>
 80027ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027b0:	e008      	b.n	80027c4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027b2:	f7ff f9e3 	bl	8001b7c <HAL_GetTick>
 80027b6:	4602      	mov	r2, r0
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d901      	bls.n	80027c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80027c0:	2303      	movs	r3, #3
 80027c2:	e05c      	b.n	800287e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027c4:	4b11      	ldr	r3, [pc, #68]	; (800280c <HAL_RCC_OscConfig+0x470>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d0f0      	beq.n	80027b2 <HAL_RCC_OscConfig+0x416>
 80027d0:	e054      	b.n	800287c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027d2:	4b10      	ldr	r3, [pc, #64]	; (8002814 <HAL_RCC_OscConfig+0x478>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d8:	f7ff f9d0 	bl	8001b7c <HAL_GetTick>
 80027dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027de:	e008      	b.n	80027f2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027e0:	f7ff f9cc 	bl	8001b7c <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e045      	b.n	800287e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027f2:	4b06      	ldr	r3, [pc, #24]	; (800280c <HAL_RCC_OscConfig+0x470>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d1f0      	bne.n	80027e0 <HAL_RCC_OscConfig+0x444>
 80027fe:	e03d      	b.n	800287c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	699b      	ldr	r3, [r3, #24]
 8002804:	2b01      	cmp	r3, #1
 8002806:	d107      	bne.n	8002818 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e038      	b.n	800287e <HAL_RCC_OscConfig+0x4e2>
 800280c:	40023800 	.word	0x40023800
 8002810:	40007000 	.word	0x40007000
 8002814:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002818:	4b1b      	ldr	r3, [pc, #108]	; (8002888 <HAL_RCC_OscConfig+0x4ec>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	699b      	ldr	r3, [r3, #24]
 8002822:	2b01      	cmp	r3, #1
 8002824:	d028      	beq.n	8002878 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002830:	429a      	cmp	r2, r3
 8002832:	d121      	bne.n	8002878 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800283e:	429a      	cmp	r2, r3
 8002840:	d11a      	bne.n	8002878 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002842:	68fa      	ldr	r2, [r7, #12]
 8002844:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002848:	4013      	ands	r3, r2
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800284e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002850:	4293      	cmp	r3, r2
 8002852:	d111      	bne.n	8002878 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800285e:	085b      	lsrs	r3, r3, #1
 8002860:	3b01      	subs	r3, #1
 8002862:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002864:	429a      	cmp	r2, r3
 8002866:	d107      	bne.n	8002878 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002872:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002874:	429a      	cmp	r2, r3
 8002876:	d001      	beq.n	800287c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e000      	b.n	800287e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3718      	adds	r7, #24
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	40023800 	.word	0x40023800

0800288c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d101      	bne.n	80028a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e0cc      	b.n	8002a3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028a0:	4b68      	ldr	r3, [pc, #416]	; (8002a44 <HAL_RCC_ClockConfig+0x1b8>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 030f 	and.w	r3, r3, #15
 80028a8:	683a      	ldr	r2, [r7, #0]
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d90c      	bls.n	80028c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ae:	4b65      	ldr	r3, [pc, #404]	; (8002a44 <HAL_RCC_ClockConfig+0x1b8>)
 80028b0:	683a      	ldr	r2, [r7, #0]
 80028b2:	b2d2      	uxtb	r2, r2
 80028b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028b6:	4b63      	ldr	r3, [pc, #396]	; (8002a44 <HAL_RCC_ClockConfig+0x1b8>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 030f 	and.w	r3, r3, #15
 80028be:	683a      	ldr	r2, [r7, #0]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d001      	beq.n	80028c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e0b8      	b.n	8002a3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0302 	and.w	r3, r3, #2
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d020      	beq.n	8002916 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0304 	and.w	r3, r3, #4
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d005      	beq.n	80028ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028e0:	4b59      	ldr	r3, [pc, #356]	; (8002a48 <HAL_RCC_ClockConfig+0x1bc>)
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	4a58      	ldr	r2, [pc, #352]	; (8002a48 <HAL_RCC_ClockConfig+0x1bc>)
 80028e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80028ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0308 	and.w	r3, r3, #8
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d005      	beq.n	8002904 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028f8:	4b53      	ldr	r3, [pc, #332]	; (8002a48 <HAL_RCC_ClockConfig+0x1bc>)
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	4a52      	ldr	r2, [pc, #328]	; (8002a48 <HAL_RCC_ClockConfig+0x1bc>)
 80028fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002902:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002904:	4b50      	ldr	r3, [pc, #320]	; (8002a48 <HAL_RCC_ClockConfig+0x1bc>)
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	494d      	ldr	r1, [pc, #308]	; (8002a48 <HAL_RCC_ClockConfig+0x1bc>)
 8002912:	4313      	orrs	r3, r2
 8002914:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0301 	and.w	r3, r3, #1
 800291e:	2b00      	cmp	r3, #0
 8002920:	d044      	beq.n	80029ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	2b01      	cmp	r3, #1
 8002928:	d107      	bne.n	800293a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800292a:	4b47      	ldr	r3, [pc, #284]	; (8002a48 <HAL_RCC_ClockConfig+0x1bc>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d119      	bne.n	800296a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e07f      	b.n	8002a3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	2b02      	cmp	r3, #2
 8002940:	d003      	beq.n	800294a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002946:	2b03      	cmp	r3, #3
 8002948:	d107      	bne.n	800295a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800294a:	4b3f      	ldr	r3, [pc, #252]	; (8002a48 <HAL_RCC_ClockConfig+0x1bc>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d109      	bne.n	800296a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e06f      	b.n	8002a3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800295a:	4b3b      	ldr	r3, [pc, #236]	; (8002a48 <HAL_RCC_ClockConfig+0x1bc>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0302 	and.w	r3, r3, #2
 8002962:	2b00      	cmp	r3, #0
 8002964:	d101      	bne.n	800296a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e067      	b.n	8002a3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800296a:	4b37      	ldr	r3, [pc, #220]	; (8002a48 <HAL_RCC_ClockConfig+0x1bc>)
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f023 0203 	bic.w	r2, r3, #3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	4934      	ldr	r1, [pc, #208]	; (8002a48 <HAL_RCC_ClockConfig+0x1bc>)
 8002978:	4313      	orrs	r3, r2
 800297a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800297c:	f7ff f8fe 	bl	8001b7c <HAL_GetTick>
 8002980:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002982:	e00a      	b.n	800299a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002984:	f7ff f8fa 	bl	8001b7c <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002992:	4293      	cmp	r3, r2
 8002994:	d901      	bls.n	800299a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e04f      	b.n	8002a3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800299a:	4b2b      	ldr	r3, [pc, #172]	; (8002a48 <HAL_RCC_ClockConfig+0x1bc>)
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	f003 020c 	and.w	r2, r3, #12
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d1eb      	bne.n	8002984 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029ac:	4b25      	ldr	r3, [pc, #148]	; (8002a44 <HAL_RCC_ClockConfig+0x1b8>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 030f 	and.w	r3, r3, #15
 80029b4:	683a      	ldr	r2, [r7, #0]
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d20c      	bcs.n	80029d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ba:	4b22      	ldr	r3, [pc, #136]	; (8002a44 <HAL_RCC_ClockConfig+0x1b8>)
 80029bc:	683a      	ldr	r2, [r7, #0]
 80029be:	b2d2      	uxtb	r2, r2
 80029c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029c2:	4b20      	ldr	r3, [pc, #128]	; (8002a44 <HAL_RCC_ClockConfig+0x1b8>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 030f 	and.w	r3, r3, #15
 80029ca:	683a      	ldr	r2, [r7, #0]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d001      	beq.n	80029d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e032      	b.n	8002a3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0304 	and.w	r3, r3, #4
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d008      	beq.n	80029f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029e0:	4b19      	ldr	r3, [pc, #100]	; (8002a48 <HAL_RCC_ClockConfig+0x1bc>)
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	4916      	ldr	r1, [pc, #88]	; (8002a48 <HAL_RCC_ClockConfig+0x1bc>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0308 	and.w	r3, r3, #8
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d009      	beq.n	8002a12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029fe:	4b12      	ldr	r3, [pc, #72]	; (8002a48 <HAL_RCC_ClockConfig+0x1bc>)
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	00db      	lsls	r3, r3, #3
 8002a0c:	490e      	ldr	r1, [pc, #56]	; (8002a48 <HAL_RCC_ClockConfig+0x1bc>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a12:	f000 f821 	bl	8002a58 <HAL_RCC_GetSysClockFreq>
 8002a16:	4602      	mov	r2, r0
 8002a18:	4b0b      	ldr	r3, [pc, #44]	; (8002a48 <HAL_RCC_ClockConfig+0x1bc>)
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	091b      	lsrs	r3, r3, #4
 8002a1e:	f003 030f 	and.w	r3, r3, #15
 8002a22:	490a      	ldr	r1, [pc, #40]	; (8002a4c <HAL_RCC_ClockConfig+0x1c0>)
 8002a24:	5ccb      	ldrb	r3, [r1, r3]
 8002a26:	fa22 f303 	lsr.w	r3, r2, r3
 8002a2a:	4a09      	ldr	r2, [pc, #36]	; (8002a50 <HAL_RCC_ClockConfig+0x1c4>)
 8002a2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a2e:	4b09      	ldr	r3, [pc, #36]	; (8002a54 <HAL_RCC_ClockConfig+0x1c8>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4618      	mov	r0, r3
 8002a34:	f7ff f85e 	bl	8001af4 <HAL_InitTick>

  return HAL_OK;
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3710      	adds	r7, #16
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	40023c00 	.word	0x40023c00
 8002a48:	40023800 	.word	0x40023800
 8002a4c:	08006dd0 	.word	0x08006dd0
 8002a50:	20000000 	.word	0x20000000
 8002a54:	20000004 	.word	0x20000004

08002a58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a5c:	b094      	sub	sp, #80	; 0x50
 8002a5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002a60:	2300      	movs	r3, #0
 8002a62:	647b      	str	r3, [r7, #68]	; 0x44
 8002a64:	2300      	movs	r3, #0
 8002a66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a68:	2300      	movs	r3, #0
 8002a6a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a70:	4b79      	ldr	r3, [pc, #484]	; (8002c58 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f003 030c 	and.w	r3, r3, #12
 8002a78:	2b08      	cmp	r3, #8
 8002a7a:	d00d      	beq.n	8002a98 <HAL_RCC_GetSysClockFreq+0x40>
 8002a7c:	2b08      	cmp	r3, #8
 8002a7e:	f200 80e1 	bhi.w	8002c44 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d002      	beq.n	8002a8c <HAL_RCC_GetSysClockFreq+0x34>
 8002a86:	2b04      	cmp	r3, #4
 8002a88:	d003      	beq.n	8002a92 <HAL_RCC_GetSysClockFreq+0x3a>
 8002a8a:	e0db      	b.n	8002c44 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a8c:	4b73      	ldr	r3, [pc, #460]	; (8002c5c <HAL_RCC_GetSysClockFreq+0x204>)
 8002a8e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002a90:	e0db      	b.n	8002c4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a92:	4b73      	ldr	r3, [pc, #460]	; (8002c60 <HAL_RCC_GetSysClockFreq+0x208>)
 8002a94:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a96:	e0d8      	b.n	8002c4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a98:	4b6f      	ldr	r3, [pc, #444]	; (8002c58 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002aa0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002aa2:	4b6d      	ldr	r3, [pc, #436]	; (8002c58 <HAL_RCC_GetSysClockFreq+0x200>)
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d063      	beq.n	8002b76 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002aae:	4b6a      	ldr	r3, [pc, #424]	; (8002c58 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	099b      	lsrs	r3, r3, #6
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ab8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002abc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ac0:	633b      	str	r3, [r7, #48]	; 0x30
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	637b      	str	r3, [r7, #52]	; 0x34
 8002ac6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002aca:	4622      	mov	r2, r4
 8002acc:	462b      	mov	r3, r5
 8002ace:	f04f 0000 	mov.w	r0, #0
 8002ad2:	f04f 0100 	mov.w	r1, #0
 8002ad6:	0159      	lsls	r1, r3, #5
 8002ad8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002adc:	0150      	lsls	r0, r2, #5
 8002ade:	4602      	mov	r2, r0
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	4621      	mov	r1, r4
 8002ae4:	1a51      	subs	r1, r2, r1
 8002ae6:	6139      	str	r1, [r7, #16]
 8002ae8:	4629      	mov	r1, r5
 8002aea:	eb63 0301 	sbc.w	r3, r3, r1
 8002aee:	617b      	str	r3, [r7, #20]
 8002af0:	f04f 0200 	mov.w	r2, #0
 8002af4:	f04f 0300 	mov.w	r3, #0
 8002af8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002afc:	4659      	mov	r1, fp
 8002afe:	018b      	lsls	r3, r1, #6
 8002b00:	4651      	mov	r1, sl
 8002b02:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b06:	4651      	mov	r1, sl
 8002b08:	018a      	lsls	r2, r1, #6
 8002b0a:	4651      	mov	r1, sl
 8002b0c:	ebb2 0801 	subs.w	r8, r2, r1
 8002b10:	4659      	mov	r1, fp
 8002b12:	eb63 0901 	sbc.w	r9, r3, r1
 8002b16:	f04f 0200 	mov.w	r2, #0
 8002b1a:	f04f 0300 	mov.w	r3, #0
 8002b1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b2a:	4690      	mov	r8, r2
 8002b2c:	4699      	mov	r9, r3
 8002b2e:	4623      	mov	r3, r4
 8002b30:	eb18 0303 	adds.w	r3, r8, r3
 8002b34:	60bb      	str	r3, [r7, #8]
 8002b36:	462b      	mov	r3, r5
 8002b38:	eb49 0303 	adc.w	r3, r9, r3
 8002b3c:	60fb      	str	r3, [r7, #12]
 8002b3e:	f04f 0200 	mov.w	r2, #0
 8002b42:	f04f 0300 	mov.w	r3, #0
 8002b46:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002b4a:	4629      	mov	r1, r5
 8002b4c:	024b      	lsls	r3, r1, #9
 8002b4e:	4621      	mov	r1, r4
 8002b50:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b54:	4621      	mov	r1, r4
 8002b56:	024a      	lsls	r2, r1, #9
 8002b58:	4610      	mov	r0, r2
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b5e:	2200      	movs	r2, #0
 8002b60:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b62:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b64:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002b68:	f7fe f82e 	bl	8000bc8 <__aeabi_uldivmod>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	460b      	mov	r3, r1
 8002b70:	4613      	mov	r3, r2
 8002b72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b74:	e058      	b.n	8002c28 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b76:	4b38      	ldr	r3, [pc, #224]	; (8002c58 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	099b      	lsrs	r3, r3, #6
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	4618      	mov	r0, r3
 8002b80:	4611      	mov	r1, r2
 8002b82:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002b86:	623b      	str	r3, [r7, #32]
 8002b88:	2300      	movs	r3, #0
 8002b8a:	627b      	str	r3, [r7, #36]	; 0x24
 8002b8c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002b90:	4642      	mov	r2, r8
 8002b92:	464b      	mov	r3, r9
 8002b94:	f04f 0000 	mov.w	r0, #0
 8002b98:	f04f 0100 	mov.w	r1, #0
 8002b9c:	0159      	lsls	r1, r3, #5
 8002b9e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ba2:	0150      	lsls	r0, r2, #5
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	460b      	mov	r3, r1
 8002ba8:	4641      	mov	r1, r8
 8002baa:	ebb2 0a01 	subs.w	sl, r2, r1
 8002bae:	4649      	mov	r1, r9
 8002bb0:	eb63 0b01 	sbc.w	fp, r3, r1
 8002bb4:	f04f 0200 	mov.w	r2, #0
 8002bb8:	f04f 0300 	mov.w	r3, #0
 8002bbc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002bc0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002bc4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002bc8:	ebb2 040a 	subs.w	r4, r2, sl
 8002bcc:	eb63 050b 	sbc.w	r5, r3, fp
 8002bd0:	f04f 0200 	mov.w	r2, #0
 8002bd4:	f04f 0300 	mov.w	r3, #0
 8002bd8:	00eb      	lsls	r3, r5, #3
 8002bda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002bde:	00e2      	lsls	r2, r4, #3
 8002be0:	4614      	mov	r4, r2
 8002be2:	461d      	mov	r5, r3
 8002be4:	4643      	mov	r3, r8
 8002be6:	18e3      	adds	r3, r4, r3
 8002be8:	603b      	str	r3, [r7, #0]
 8002bea:	464b      	mov	r3, r9
 8002bec:	eb45 0303 	adc.w	r3, r5, r3
 8002bf0:	607b      	str	r3, [r7, #4]
 8002bf2:	f04f 0200 	mov.w	r2, #0
 8002bf6:	f04f 0300 	mov.w	r3, #0
 8002bfa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002bfe:	4629      	mov	r1, r5
 8002c00:	028b      	lsls	r3, r1, #10
 8002c02:	4621      	mov	r1, r4
 8002c04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c08:	4621      	mov	r1, r4
 8002c0a:	028a      	lsls	r2, r1, #10
 8002c0c:	4610      	mov	r0, r2
 8002c0e:	4619      	mov	r1, r3
 8002c10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c12:	2200      	movs	r2, #0
 8002c14:	61bb      	str	r3, [r7, #24]
 8002c16:	61fa      	str	r2, [r7, #28]
 8002c18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c1c:	f7fd ffd4 	bl	8000bc8 <__aeabi_uldivmod>
 8002c20:	4602      	mov	r2, r0
 8002c22:	460b      	mov	r3, r1
 8002c24:	4613      	mov	r3, r2
 8002c26:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c28:	4b0b      	ldr	r3, [pc, #44]	; (8002c58 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	0c1b      	lsrs	r3, r3, #16
 8002c2e:	f003 0303 	and.w	r3, r3, #3
 8002c32:	3301      	adds	r3, #1
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002c38:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c40:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c42:	e002      	b.n	8002c4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c44:	4b05      	ldr	r3, [pc, #20]	; (8002c5c <HAL_RCC_GetSysClockFreq+0x204>)
 8002c46:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3750      	adds	r7, #80	; 0x50
 8002c50:	46bd      	mov	sp, r7
 8002c52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c56:	bf00      	nop
 8002c58:	40023800 	.word	0x40023800
 8002c5c:	00f42400 	.word	0x00f42400
 8002c60:	007a1200 	.word	0x007a1200

08002c64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c64:	b480      	push	{r7}
 8002c66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c68:	4b03      	ldr	r3, [pc, #12]	; (8002c78 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop
 8002c78:	20000000 	.word	0x20000000

08002c7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c80:	f7ff fff0 	bl	8002c64 <HAL_RCC_GetHCLKFreq>
 8002c84:	4602      	mov	r2, r0
 8002c86:	4b05      	ldr	r3, [pc, #20]	; (8002c9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	0a9b      	lsrs	r3, r3, #10
 8002c8c:	f003 0307 	and.w	r3, r3, #7
 8002c90:	4903      	ldr	r1, [pc, #12]	; (8002ca0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c92:	5ccb      	ldrb	r3, [r1, r3]
 8002c94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	40023800 	.word	0x40023800
 8002ca0:	08006de0 	.word	0x08006de0

08002ca4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ca8:	f7ff ffdc 	bl	8002c64 <HAL_RCC_GetHCLKFreq>
 8002cac:	4602      	mov	r2, r0
 8002cae:	4b05      	ldr	r3, [pc, #20]	; (8002cc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	0b5b      	lsrs	r3, r3, #13
 8002cb4:	f003 0307 	and.w	r3, r3, #7
 8002cb8:	4903      	ldr	r1, [pc, #12]	; (8002cc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cba:	5ccb      	ldrb	r3, [r1, r3]
 8002cbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	40023800 	.word	0x40023800
 8002cc8:	08006de0 	.word	0x08006de0

08002ccc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d101      	bne.n	8002cde <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e07b      	b.n	8002dd6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d108      	bne.n	8002cf8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002cee:	d009      	beq.n	8002d04 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	61da      	str	r2, [r3, #28]
 8002cf6:	e005      	b.n	8002d04 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d106      	bne.n	8002d24 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f7fe fc2c 	bl	800157c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2202      	movs	r2, #2
 8002d28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d3a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002d4c:	431a      	orrs	r2, r3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d56:	431a      	orrs	r2, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	691b      	ldr	r3, [r3, #16]
 8002d5c:	f003 0302 	and.w	r3, r3, #2
 8002d60:	431a      	orrs	r2, r3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	695b      	ldr	r3, [r3, #20]
 8002d66:	f003 0301 	and.w	r3, r3, #1
 8002d6a:	431a      	orrs	r2, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	699b      	ldr	r3, [r3, #24]
 8002d70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d74:	431a      	orrs	r2, r3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	69db      	ldr	r3, [r3, #28]
 8002d7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d7e:	431a      	orrs	r2, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6a1b      	ldr	r3, [r3, #32]
 8002d84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d88:	ea42 0103 	orr.w	r1, r2, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d90:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	430a      	orrs	r2, r1
 8002d9a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	699b      	ldr	r3, [r3, #24]
 8002da0:	0c1b      	lsrs	r3, r3, #16
 8002da2:	f003 0104 	and.w	r1, r3, #4
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002daa:	f003 0210 	and.w	r2, r3, #16
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	430a      	orrs	r2, r1
 8002db4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	69da      	ldr	r2, [r3, #28]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002dc4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3708      	adds	r7, #8
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}

08002dde <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dde:	b580      	push	{r7, lr}
 8002de0:	b088      	sub	sp, #32
 8002de2:	af02      	add	r7, sp, #8
 8002de4:	60f8      	str	r0, [r7, #12]
 8002de6:	60b9      	str	r1, [r7, #8]
 8002de8:	603b      	str	r3, [r7, #0]
 8002dea:	4613      	mov	r3, r2
 8002dec:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002dee:	2300      	movs	r3, #0
 8002df0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002dfa:	d112      	bne.n	8002e22 <HAL_SPI_Receive+0x44>
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d10e      	bne.n	8002e22 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2204      	movs	r2, #4
 8002e08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002e0c:	88fa      	ldrh	r2, [r7, #6]
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	9300      	str	r3, [sp, #0]
 8002e12:	4613      	mov	r3, r2
 8002e14:	68ba      	ldr	r2, [r7, #8]
 8002e16:	68b9      	ldr	r1, [r7, #8]
 8002e18:	68f8      	ldr	r0, [r7, #12]
 8002e1a:	f000 f8f1 	bl	8003000 <HAL_SPI_TransmitReceive>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	e0ea      	b.n	8002ff8 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d101      	bne.n	8002e30 <HAL_SPI_Receive+0x52>
 8002e2c:	2302      	movs	r3, #2
 8002e2e:	e0e3      	b.n	8002ff8 <HAL_SPI_Receive+0x21a>
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e38:	f7fe fea0 	bl	8001b7c <HAL_GetTick>
 8002e3c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d002      	beq.n	8002e50 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002e4a:	2302      	movs	r3, #2
 8002e4c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002e4e:	e0ca      	b.n	8002fe6 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d002      	beq.n	8002e5c <HAL_SPI_Receive+0x7e>
 8002e56:	88fb      	ldrh	r3, [r7, #6]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d102      	bne.n	8002e62 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002e60:	e0c1      	b.n	8002fe6 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2204      	movs	r2, #4
 8002e66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	68ba      	ldr	r2, [r7, #8]
 8002e74:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	88fa      	ldrh	r2, [r7, #6]
 8002e7a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	88fa      	ldrh	r2, [r7, #6]
 8002e80:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2200      	movs	r2, #0
 8002e86:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2200      	movs	r2, #0
 8002e92:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2200      	movs	r2, #0
 8002e98:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ea8:	d10f      	bne.n	8002eca <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002eb8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002ec8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ed4:	2b40      	cmp	r3, #64	; 0x40
 8002ed6:	d007      	beq.n	8002ee8 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ee6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d162      	bne.n	8002fb6 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002ef0:	e02e      	b.n	8002f50 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	f003 0301 	and.w	r3, r3, #1
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d115      	bne.n	8002f2c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f103 020c 	add.w	r2, r3, #12
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f0c:	7812      	ldrb	r2, [r2, #0]
 8002f0e:	b2d2      	uxtb	r2, r2
 8002f10:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f16:	1c5a      	adds	r2, r3, #1
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	3b01      	subs	r3, #1
 8002f24:	b29a      	uxth	r2, r3
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002f2a:	e011      	b.n	8002f50 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f2c:	f7fe fe26 	bl	8001b7c <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	683a      	ldr	r2, [r7, #0]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d803      	bhi.n	8002f44 <HAL_SPI_Receive+0x166>
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f42:	d102      	bne.n	8002f4a <HAL_SPI_Receive+0x16c>
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d102      	bne.n	8002f50 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002f4e:	e04a      	b.n	8002fe6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d1cb      	bne.n	8002ef2 <HAL_SPI_Receive+0x114>
 8002f5a:	e031      	b.n	8002fc0 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	f003 0301 	and.w	r3, r3, #1
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d113      	bne.n	8002f92 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	68da      	ldr	r2, [r3, #12]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f74:	b292      	uxth	r2, r2
 8002f76:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f7c:	1c9a      	adds	r2, r3, #2
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	3b01      	subs	r3, #1
 8002f8a:	b29a      	uxth	r2, r3
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002f90:	e011      	b.n	8002fb6 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f92:	f7fe fdf3 	bl	8001b7c <HAL_GetTick>
 8002f96:	4602      	mov	r2, r0
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	683a      	ldr	r2, [r7, #0]
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d803      	bhi.n	8002faa <HAL_SPI_Receive+0x1cc>
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fa8:	d102      	bne.n	8002fb0 <HAL_SPI_Receive+0x1d2>
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d102      	bne.n	8002fb6 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002fb4:	e017      	b.n	8002fe6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d1cd      	bne.n	8002f5c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002fc0:	693a      	ldr	r2, [r7, #16]
 8002fc2:	6839      	ldr	r1, [r7, #0]
 8002fc4:	68f8      	ldr	r0, [r7, #12]
 8002fc6:	f000 fa45 	bl	8003454 <SPI_EndRxTransaction>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d002      	beq.n	8002fd6 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2220      	movs	r2, #32
 8002fd4:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d002      	beq.n	8002fe4 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	75fb      	strb	r3, [r7, #23]
 8002fe2:	e000      	b.n	8002fe6 <HAL_SPI_Receive+0x208>
  }

error :
 8002fe4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2201      	movs	r2, #1
 8002fea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002ff6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3718      	adds	r7, #24
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b08c      	sub	sp, #48	; 0x30
 8003004:	af00      	add	r7, sp, #0
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	60b9      	str	r1, [r7, #8]
 800300a:	607a      	str	r2, [r7, #4]
 800300c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800300e:	2301      	movs	r3, #1
 8003010:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003012:	2300      	movs	r3, #0
 8003014:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800301e:	2b01      	cmp	r3, #1
 8003020:	d101      	bne.n	8003026 <HAL_SPI_TransmitReceive+0x26>
 8003022:	2302      	movs	r3, #2
 8003024:	e18a      	b.n	800333c <HAL_SPI_TransmitReceive+0x33c>
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2201      	movs	r2, #1
 800302a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800302e:	f7fe fda5 	bl	8001b7c <HAL_GetTick>
 8003032:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800303a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003044:	887b      	ldrh	r3, [r7, #2]
 8003046:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003048:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800304c:	2b01      	cmp	r3, #1
 800304e:	d00f      	beq.n	8003070 <HAL_SPI_TransmitReceive+0x70>
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003056:	d107      	bne.n	8003068 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d103      	bne.n	8003068 <HAL_SPI_TransmitReceive+0x68>
 8003060:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003064:	2b04      	cmp	r3, #4
 8003066:	d003      	beq.n	8003070 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003068:	2302      	movs	r3, #2
 800306a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800306e:	e15b      	b.n	8003328 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d005      	beq.n	8003082 <HAL_SPI_TransmitReceive+0x82>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d002      	beq.n	8003082 <HAL_SPI_TransmitReceive+0x82>
 800307c:	887b      	ldrh	r3, [r7, #2]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d103      	bne.n	800308a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003088:	e14e      	b.n	8003328 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003090:	b2db      	uxtb	r3, r3
 8003092:	2b04      	cmp	r3, #4
 8003094:	d003      	beq.n	800309e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2205      	movs	r2, #5
 800309a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2200      	movs	r2, #0
 80030a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	887a      	ldrh	r2, [r7, #2]
 80030ae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	887a      	ldrh	r2, [r7, #2]
 80030b4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	68ba      	ldr	r2, [r7, #8]
 80030ba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	887a      	ldrh	r2, [r7, #2]
 80030c0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	887a      	ldrh	r2, [r7, #2]
 80030c6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2200      	movs	r2, #0
 80030cc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2200      	movs	r2, #0
 80030d2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030de:	2b40      	cmp	r3, #64	; 0x40
 80030e0:	d007      	beq.n	80030f2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030f0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030fa:	d178      	bne.n	80031ee <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d002      	beq.n	800310a <HAL_SPI_TransmitReceive+0x10a>
 8003104:	8b7b      	ldrh	r3, [r7, #26]
 8003106:	2b01      	cmp	r3, #1
 8003108:	d166      	bne.n	80031d8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310e:	881a      	ldrh	r2, [r3, #0]
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311a:	1c9a      	adds	r2, r3, #2
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003124:	b29b      	uxth	r3, r3
 8003126:	3b01      	subs	r3, #1
 8003128:	b29a      	uxth	r2, r3
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800312e:	e053      	b.n	80031d8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f003 0302 	and.w	r3, r3, #2
 800313a:	2b02      	cmp	r3, #2
 800313c:	d11b      	bne.n	8003176 <HAL_SPI_TransmitReceive+0x176>
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003142:	b29b      	uxth	r3, r3
 8003144:	2b00      	cmp	r3, #0
 8003146:	d016      	beq.n	8003176 <HAL_SPI_TransmitReceive+0x176>
 8003148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800314a:	2b01      	cmp	r3, #1
 800314c:	d113      	bne.n	8003176 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003152:	881a      	ldrh	r2, [r3, #0]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315e:	1c9a      	adds	r2, r3, #2
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003168:	b29b      	uxth	r3, r3
 800316a:	3b01      	subs	r3, #1
 800316c:	b29a      	uxth	r2, r3
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003172:	2300      	movs	r3, #0
 8003174:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	f003 0301 	and.w	r3, r3, #1
 8003180:	2b01      	cmp	r3, #1
 8003182:	d119      	bne.n	80031b8 <HAL_SPI_TransmitReceive+0x1b8>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003188:	b29b      	uxth	r3, r3
 800318a:	2b00      	cmp	r3, #0
 800318c:	d014      	beq.n	80031b8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	68da      	ldr	r2, [r3, #12]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003198:	b292      	uxth	r2, r2
 800319a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a0:	1c9a      	adds	r2, r3, #2
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	3b01      	subs	r3, #1
 80031ae:	b29a      	uxth	r2, r3
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80031b4:	2301      	movs	r3, #1
 80031b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80031b8:	f7fe fce0 	bl	8001b7c <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d807      	bhi.n	80031d8 <HAL_SPI_TransmitReceive+0x1d8>
 80031c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ce:	d003      	beq.n	80031d8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80031d0:	2303      	movs	r3, #3
 80031d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80031d6:	e0a7      	b.n	8003328 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031dc:	b29b      	uxth	r3, r3
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d1a6      	bne.n	8003130 <HAL_SPI_TransmitReceive+0x130>
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d1a1      	bne.n	8003130 <HAL_SPI_TransmitReceive+0x130>
 80031ec:	e07c      	b.n	80032e8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d002      	beq.n	80031fc <HAL_SPI_TransmitReceive+0x1fc>
 80031f6:	8b7b      	ldrh	r3, [r7, #26]
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d16b      	bne.n	80032d4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	330c      	adds	r3, #12
 8003206:	7812      	ldrb	r2, [r2, #0]
 8003208:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320e:	1c5a      	adds	r2, r3, #1
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003218:	b29b      	uxth	r3, r3
 800321a:	3b01      	subs	r3, #1
 800321c:	b29a      	uxth	r2, r3
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003222:	e057      	b.n	80032d4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	f003 0302 	and.w	r3, r3, #2
 800322e:	2b02      	cmp	r3, #2
 8003230:	d11c      	bne.n	800326c <HAL_SPI_TransmitReceive+0x26c>
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003236:	b29b      	uxth	r3, r3
 8003238:	2b00      	cmp	r3, #0
 800323a:	d017      	beq.n	800326c <HAL_SPI_TransmitReceive+0x26c>
 800323c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800323e:	2b01      	cmp	r3, #1
 8003240:	d114      	bne.n	800326c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	330c      	adds	r3, #12
 800324c:	7812      	ldrb	r2, [r2, #0]
 800324e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003254:	1c5a      	adds	r2, r3, #1
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800325e:	b29b      	uxth	r3, r3
 8003260:	3b01      	subs	r3, #1
 8003262:	b29a      	uxth	r2, r3
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003268:	2300      	movs	r3, #0
 800326a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	f003 0301 	and.w	r3, r3, #1
 8003276:	2b01      	cmp	r3, #1
 8003278:	d119      	bne.n	80032ae <HAL_SPI_TransmitReceive+0x2ae>
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800327e:	b29b      	uxth	r3, r3
 8003280:	2b00      	cmp	r3, #0
 8003282:	d014      	beq.n	80032ae <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	68da      	ldr	r2, [r3, #12]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800328e:	b2d2      	uxtb	r2, r2
 8003290:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003296:	1c5a      	adds	r2, r3, #1
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	3b01      	subs	r3, #1
 80032a4:	b29a      	uxth	r2, r3
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80032aa:	2301      	movs	r3, #1
 80032ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80032ae:	f7fe fc65 	bl	8001b7c <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d803      	bhi.n	80032c6 <HAL_SPI_TransmitReceive+0x2c6>
 80032be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032c4:	d102      	bne.n	80032cc <HAL_SPI_TransmitReceive+0x2cc>
 80032c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d103      	bne.n	80032d4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80032d2:	e029      	b.n	8003328 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032d8:	b29b      	uxth	r3, r3
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d1a2      	bne.n	8003224 <HAL_SPI_TransmitReceive+0x224>
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d19d      	bne.n	8003224 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80032e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032ea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80032ec:	68f8      	ldr	r0, [r7, #12]
 80032ee:	f000 f917 	bl	8003520 <SPI_EndRxTxTransaction>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d006      	beq.n	8003306 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2220      	movs	r2, #32
 8003302:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003304:	e010      	b.n	8003328 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d10b      	bne.n	8003326 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800330e:	2300      	movs	r3, #0
 8003310:	617b      	str	r3, [r7, #20]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	617b      	str	r3, [r7, #20]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	617b      	str	r3, [r7, #20]
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	e000      	b.n	8003328 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003326:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2201      	movs	r2, #1
 800332c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2200      	movs	r2, #0
 8003334:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003338:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800333c:	4618      	mov	r0, r3
 800333e:	3730      	adds	r7, #48	; 0x30
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}

08003344 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b088      	sub	sp, #32
 8003348:	af00      	add	r7, sp, #0
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	60b9      	str	r1, [r7, #8]
 800334e:	603b      	str	r3, [r7, #0]
 8003350:	4613      	mov	r3, r2
 8003352:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003354:	f7fe fc12 	bl	8001b7c <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800335c:	1a9b      	subs	r3, r3, r2
 800335e:	683a      	ldr	r2, [r7, #0]
 8003360:	4413      	add	r3, r2
 8003362:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003364:	f7fe fc0a 	bl	8001b7c <HAL_GetTick>
 8003368:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800336a:	4b39      	ldr	r3, [pc, #228]	; (8003450 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	015b      	lsls	r3, r3, #5
 8003370:	0d1b      	lsrs	r3, r3, #20
 8003372:	69fa      	ldr	r2, [r7, #28]
 8003374:	fb02 f303 	mul.w	r3, r2, r3
 8003378:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800337a:	e054      	b.n	8003426 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003382:	d050      	beq.n	8003426 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003384:	f7fe fbfa 	bl	8001b7c <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	69fa      	ldr	r2, [r7, #28]
 8003390:	429a      	cmp	r2, r3
 8003392:	d902      	bls.n	800339a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d13d      	bne.n	8003416 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	685a      	ldr	r2, [r3, #4]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80033a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033b2:	d111      	bne.n	80033d8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033bc:	d004      	beq.n	80033c8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033c6:	d107      	bne.n	80033d8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033e0:	d10f      	bne.n	8003402 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80033f0:	601a      	str	r2, [r3, #0]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003400:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2201      	movs	r2, #1
 8003406:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2200      	movs	r2, #0
 800340e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e017      	b.n	8003446 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d101      	bne.n	8003420 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800341c:	2300      	movs	r3, #0
 800341e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	3b01      	subs	r3, #1
 8003424:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	689a      	ldr	r2, [r3, #8]
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	4013      	ands	r3, r2
 8003430:	68ba      	ldr	r2, [r7, #8]
 8003432:	429a      	cmp	r2, r3
 8003434:	bf0c      	ite	eq
 8003436:	2301      	moveq	r3, #1
 8003438:	2300      	movne	r3, #0
 800343a:	b2db      	uxtb	r3, r3
 800343c:	461a      	mov	r2, r3
 800343e:	79fb      	ldrb	r3, [r7, #7]
 8003440:	429a      	cmp	r2, r3
 8003442:	d19b      	bne.n	800337c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003444:	2300      	movs	r3, #0
}
 8003446:	4618      	mov	r0, r3
 8003448:	3720      	adds	r7, #32
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	20000000 	.word	0x20000000

08003454 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b086      	sub	sp, #24
 8003458:	af02      	add	r7, sp, #8
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003468:	d111      	bne.n	800348e <SPI_EndRxTransaction+0x3a>
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003472:	d004      	beq.n	800347e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800347c:	d107      	bne.n	800348e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800348c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003496:	d12a      	bne.n	80034ee <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034a0:	d012      	beq.n	80034c8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	9300      	str	r3, [sp, #0]
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	2200      	movs	r2, #0
 80034aa:	2180      	movs	r1, #128	; 0x80
 80034ac:	68f8      	ldr	r0, [r7, #12]
 80034ae:	f7ff ff49 	bl	8003344 <SPI_WaitFlagStateUntilTimeout>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d02d      	beq.n	8003514 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034bc:	f043 0220 	orr.w	r2, r3, #32
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	e026      	b.n	8003516 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	9300      	str	r3, [sp, #0]
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	2200      	movs	r2, #0
 80034d0:	2101      	movs	r1, #1
 80034d2:	68f8      	ldr	r0, [r7, #12]
 80034d4:	f7ff ff36 	bl	8003344 <SPI_WaitFlagStateUntilTimeout>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d01a      	beq.n	8003514 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034e2:	f043 0220 	orr.w	r2, r3, #32
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e013      	b.n	8003516 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	9300      	str	r3, [sp, #0]
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	2200      	movs	r2, #0
 80034f6:	2101      	movs	r1, #1
 80034f8:	68f8      	ldr	r0, [r7, #12]
 80034fa:	f7ff ff23 	bl	8003344 <SPI_WaitFlagStateUntilTimeout>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d007      	beq.n	8003514 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003508:	f043 0220 	orr.w	r2, r3, #32
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003510:	2303      	movs	r3, #3
 8003512:	e000      	b.n	8003516 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003514:	2300      	movs	r3, #0
}
 8003516:	4618      	mov	r0, r3
 8003518:	3710      	adds	r7, #16
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
	...

08003520 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b088      	sub	sp, #32
 8003524:	af02      	add	r7, sp, #8
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800352c:	4b1b      	ldr	r3, [pc, #108]	; (800359c <SPI_EndRxTxTransaction+0x7c>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a1b      	ldr	r2, [pc, #108]	; (80035a0 <SPI_EndRxTxTransaction+0x80>)
 8003532:	fba2 2303 	umull	r2, r3, r2, r3
 8003536:	0d5b      	lsrs	r3, r3, #21
 8003538:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800353c:	fb02 f303 	mul.w	r3, r2, r3
 8003540:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800354a:	d112      	bne.n	8003572 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	9300      	str	r3, [sp, #0]
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	2200      	movs	r2, #0
 8003554:	2180      	movs	r1, #128	; 0x80
 8003556:	68f8      	ldr	r0, [r7, #12]
 8003558:	f7ff fef4 	bl	8003344 <SPI_WaitFlagStateUntilTimeout>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d016      	beq.n	8003590 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003566:	f043 0220 	orr.w	r2, r3, #32
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e00f      	b.n	8003592 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d00a      	beq.n	800358e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	3b01      	subs	r3, #1
 800357c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003588:	2b80      	cmp	r3, #128	; 0x80
 800358a:	d0f2      	beq.n	8003572 <SPI_EndRxTxTransaction+0x52>
 800358c:	e000      	b.n	8003590 <SPI_EndRxTxTransaction+0x70>
        break;
 800358e:	bf00      	nop
  }

  return HAL_OK;
 8003590:	2300      	movs	r3, #0
}
 8003592:	4618      	mov	r0, r3
 8003594:	3718      	adds	r7, #24
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	20000000 	.word	0x20000000
 80035a0:	165e9f81 	.word	0x165e9f81

080035a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d101      	bne.n	80035b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e03f      	b.n	8003636 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d106      	bne.n	80035d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f7fe f976 	bl	80018bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2224      	movs	r2, #36	; 0x24
 80035d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	68da      	ldr	r2, [r3, #12]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f000 f929 	bl	8003840 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	691a      	ldr	r2, [r3, #16]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	695a      	ldr	r2, [r3, #20]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800360c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	68da      	ldr	r2, [r3, #12]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800361c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2220      	movs	r2, #32
 8003628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2220      	movs	r2, #32
 8003630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	3708      	adds	r7, #8
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}

0800363e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800363e:	b580      	push	{r7, lr}
 8003640:	b08a      	sub	sp, #40	; 0x28
 8003642:	af02      	add	r7, sp, #8
 8003644:	60f8      	str	r0, [r7, #12]
 8003646:	60b9      	str	r1, [r7, #8]
 8003648:	603b      	str	r3, [r7, #0]
 800364a:	4613      	mov	r3, r2
 800364c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800364e:	2300      	movs	r3, #0
 8003650:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003658:	b2db      	uxtb	r3, r3
 800365a:	2b20      	cmp	r3, #32
 800365c:	d17c      	bne.n	8003758 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d002      	beq.n	800366a <HAL_UART_Transmit+0x2c>
 8003664:	88fb      	ldrh	r3, [r7, #6]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d101      	bne.n	800366e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e075      	b.n	800375a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003674:	2b01      	cmp	r3, #1
 8003676:	d101      	bne.n	800367c <HAL_UART_Transmit+0x3e>
 8003678:	2302      	movs	r3, #2
 800367a:	e06e      	b.n	800375a <HAL_UART_Transmit+0x11c>
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2200      	movs	r2, #0
 8003688:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2221      	movs	r2, #33	; 0x21
 800368e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003692:	f7fe fa73 	bl	8001b7c <HAL_GetTick>
 8003696:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	88fa      	ldrh	r2, [r7, #6]
 800369c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	88fa      	ldrh	r2, [r7, #6]
 80036a2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036ac:	d108      	bne.n	80036c0 <HAL_UART_Transmit+0x82>
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	691b      	ldr	r3, [r3, #16]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d104      	bne.n	80036c0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80036b6:	2300      	movs	r3, #0
 80036b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	61bb      	str	r3, [r7, #24]
 80036be:	e003      	b.n	80036c8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036c4:	2300      	movs	r3, #0
 80036c6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80036d0:	e02a      	b.n	8003728 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	9300      	str	r3, [sp, #0]
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	2200      	movs	r2, #0
 80036da:	2180      	movs	r1, #128	; 0x80
 80036dc:	68f8      	ldr	r0, [r7, #12]
 80036de:	f000 f840 	bl	8003762 <UART_WaitOnFlagUntilTimeout>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d001      	beq.n	80036ec <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e036      	b.n	800375a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d10b      	bne.n	800370a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80036f2:	69bb      	ldr	r3, [r7, #24]
 80036f4:	881b      	ldrh	r3, [r3, #0]
 80036f6:	461a      	mov	r2, r3
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003700:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	3302      	adds	r3, #2
 8003706:	61bb      	str	r3, [r7, #24]
 8003708:	e007      	b.n	800371a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	781a      	ldrb	r2, [r3, #0]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	3301      	adds	r3, #1
 8003718:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800371e:	b29b      	uxth	r3, r3
 8003720:	3b01      	subs	r3, #1
 8003722:	b29a      	uxth	r2, r3
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800372c:	b29b      	uxth	r3, r3
 800372e:	2b00      	cmp	r3, #0
 8003730:	d1cf      	bne.n	80036d2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	9300      	str	r3, [sp, #0]
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	2200      	movs	r2, #0
 800373a:	2140      	movs	r1, #64	; 0x40
 800373c:	68f8      	ldr	r0, [r7, #12]
 800373e:	f000 f810 	bl	8003762 <UART_WaitOnFlagUntilTimeout>
 8003742:	4603      	mov	r3, r0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d001      	beq.n	800374c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e006      	b.n	800375a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2220      	movs	r2, #32
 8003750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003754:	2300      	movs	r3, #0
 8003756:	e000      	b.n	800375a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003758:	2302      	movs	r3, #2
  }
}
 800375a:	4618      	mov	r0, r3
 800375c:	3720      	adds	r7, #32
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}

08003762 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003762:	b580      	push	{r7, lr}
 8003764:	b090      	sub	sp, #64	; 0x40
 8003766:	af00      	add	r7, sp, #0
 8003768:	60f8      	str	r0, [r7, #12]
 800376a:	60b9      	str	r1, [r7, #8]
 800376c:	603b      	str	r3, [r7, #0]
 800376e:	4613      	mov	r3, r2
 8003770:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003772:	e050      	b.n	8003816 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003774:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800377a:	d04c      	beq.n	8003816 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800377c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800377e:	2b00      	cmp	r3, #0
 8003780:	d007      	beq.n	8003792 <UART_WaitOnFlagUntilTimeout+0x30>
 8003782:	f7fe f9fb 	bl	8001b7c <HAL_GetTick>
 8003786:	4602      	mov	r2, r0
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800378e:	429a      	cmp	r2, r3
 8003790:	d241      	bcs.n	8003816 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	330c      	adds	r3, #12
 8003798:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800379a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800379c:	e853 3f00 	ldrex	r3, [r3]
 80037a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80037a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80037a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	330c      	adds	r3, #12
 80037b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80037b2:	637a      	str	r2, [r7, #52]	; 0x34
 80037b4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80037b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80037ba:	e841 2300 	strex	r3, r2, [r1]
 80037be:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80037c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d1e5      	bne.n	8003792 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	3314      	adds	r3, #20
 80037cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	e853 3f00 	ldrex	r3, [r3]
 80037d4:	613b      	str	r3, [r7, #16]
   return(result);
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	f023 0301 	bic.w	r3, r3, #1
 80037dc:	63bb      	str	r3, [r7, #56]	; 0x38
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	3314      	adds	r3, #20
 80037e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80037e6:	623a      	str	r2, [r7, #32]
 80037e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ea:	69f9      	ldr	r1, [r7, #28]
 80037ec:	6a3a      	ldr	r2, [r7, #32]
 80037ee:	e841 2300 	strex	r3, r2, [r1]
 80037f2:	61bb      	str	r3, [r7, #24]
   return(result);
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d1e5      	bne.n	80037c6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2220      	movs	r2, #32
 80037fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2220      	movs	r2, #32
 8003806:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e00f      	b.n	8003836 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	4013      	ands	r3, r2
 8003820:	68ba      	ldr	r2, [r7, #8]
 8003822:	429a      	cmp	r2, r3
 8003824:	bf0c      	ite	eq
 8003826:	2301      	moveq	r3, #1
 8003828:	2300      	movne	r3, #0
 800382a:	b2db      	uxtb	r3, r3
 800382c:	461a      	mov	r2, r3
 800382e:	79fb      	ldrb	r3, [r7, #7]
 8003830:	429a      	cmp	r2, r3
 8003832:	d09f      	beq.n	8003774 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003834:	2300      	movs	r3, #0
}
 8003836:	4618      	mov	r0, r3
 8003838:	3740      	adds	r7, #64	; 0x40
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
	...

08003840 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003840:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003844:	b0c0      	sub	sp, #256	; 0x100
 8003846:	af00      	add	r7, sp, #0
 8003848:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800384c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	691b      	ldr	r3, [r3, #16]
 8003854:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800385c:	68d9      	ldr	r1, [r3, #12]
 800385e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	ea40 0301 	orr.w	r3, r0, r1
 8003868:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800386a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800386e:	689a      	ldr	r2, [r3, #8]
 8003870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003874:	691b      	ldr	r3, [r3, #16]
 8003876:	431a      	orrs	r2, r3
 8003878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800387c:	695b      	ldr	r3, [r3, #20]
 800387e:	431a      	orrs	r2, r3
 8003880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003884:	69db      	ldr	r3, [r3, #28]
 8003886:	4313      	orrs	r3, r2
 8003888:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800388c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003898:	f021 010c 	bic.w	r1, r1, #12
 800389c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80038a6:	430b      	orrs	r3, r1
 80038a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80038aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	695b      	ldr	r3, [r3, #20]
 80038b2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80038b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038ba:	6999      	ldr	r1, [r3, #24]
 80038bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	ea40 0301 	orr.w	r3, r0, r1
 80038c6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80038c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	4b8f      	ldr	r3, [pc, #572]	; (8003b0c <UART_SetConfig+0x2cc>)
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d005      	beq.n	80038e0 <UART_SetConfig+0xa0>
 80038d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	4b8d      	ldr	r3, [pc, #564]	; (8003b10 <UART_SetConfig+0x2d0>)
 80038dc:	429a      	cmp	r2, r3
 80038de:	d104      	bne.n	80038ea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80038e0:	f7ff f9e0 	bl	8002ca4 <HAL_RCC_GetPCLK2Freq>
 80038e4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80038e8:	e003      	b.n	80038f2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80038ea:	f7ff f9c7 	bl	8002c7c <HAL_RCC_GetPCLK1Freq>
 80038ee:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038f6:	69db      	ldr	r3, [r3, #28]
 80038f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038fc:	f040 810c 	bne.w	8003b18 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003900:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003904:	2200      	movs	r2, #0
 8003906:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800390a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800390e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003912:	4622      	mov	r2, r4
 8003914:	462b      	mov	r3, r5
 8003916:	1891      	adds	r1, r2, r2
 8003918:	65b9      	str	r1, [r7, #88]	; 0x58
 800391a:	415b      	adcs	r3, r3
 800391c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800391e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003922:	4621      	mov	r1, r4
 8003924:	eb12 0801 	adds.w	r8, r2, r1
 8003928:	4629      	mov	r1, r5
 800392a:	eb43 0901 	adc.w	r9, r3, r1
 800392e:	f04f 0200 	mov.w	r2, #0
 8003932:	f04f 0300 	mov.w	r3, #0
 8003936:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800393a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800393e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003942:	4690      	mov	r8, r2
 8003944:	4699      	mov	r9, r3
 8003946:	4623      	mov	r3, r4
 8003948:	eb18 0303 	adds.w	r3, r8, r3
 800394c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003950:	462b      	mov	r3, r5
 8003952:	eb49 0303 	adc.w	r3, r9, r3
 8003956:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800395a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003966:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800396a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800396e:	460b      	mov	r3, r1
 8003970:	18db      	adds	r3, r3, r3
 8003972:	653b      	str	r3, [r7, #80]	; 0x50
 8003974:	4613      	mov	r3, r2
 8003976:	eb42 0303 	adc.w	r3, r2, r3
 800397a:	657b      	str	r3, [r7, #84]	; 0x54
 800397c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003980:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003984:	f7fd f920 	bl	8000bc8 <__aeabi_uldivmod>
 8003988:	4602      	mov	r2, r0
 800398a:	460b      	mov	r3, r1
 800398c:	4b61      	ldr	r3, [pc, #388]	; (8003b14 <UART_SetConfig+0x2d4>)
 800398e:	fba3 2302 	umull	r2, r3, r3, r2
 8003992:	095b      	lsrs	r3, r3, #5
 8003994:	011c      	lsls	r4, r3, #4
 8003996:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800399a:	2200      	movs	r2, #0
 800399c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80039a0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80039a4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80039a8:	4642      	mov	r2, r8
 80039aa:	464b      	mov	r3, r9
 80039ac:	1891      	adds	r1, r2, r2
 80039ae:	64b9      	str	r1, [r7, #72]	; 0x48
 80039b0:	415b      	adcs	r3, r3
 80039b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039b4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80039b8:	4641      	mov	r1, r8
 80039ba:	eb12 0a01 	adds.w	sl, r2, r1
 80039be:	4649      	mov	r1, r9
 80039c0:	eb43 0b01 	adc.w	fp, r3, r1
 80039c4:	f04f 0200 	mov.w	r2, #0
 80039c8:	f04f 0300 	mov.w	r3, #0
 80039cc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80039d0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80039d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80039d8:	4692      	mov	sl, r2
 80039da:	469b      	mov	fp, r3
 80039dc:	4643      	mov	r3, r8
 80039de:	eb1a 0303 	adds.w	r3, sl, r3
 80039e2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80039e6:	464b      	mov	r3, r9
 80039e8:	eb4b 0303 	adc.w	r3, fp, r3
 80039ec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80039f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80039fc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003a00:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003a04:	460b      	mov	r3, r1
 8003a06:	18db      	adds	r3, r3, r3
 8003a08:	643b      	str	r3, [r7, #64]	; 0x40
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	eb42 0303 	adc.w	r3, r2, r3
 8003a10:	647b      	str	r3, [r7, #68]	; 0x44
 8003a12:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003a16:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003a1a:	f7fd f8d5 	bl	8000bc8 <__aeabi_uldivmod>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	460b      	mov	r3, r1
 8003a22:	4611      	mov	r1, r2
 8003a24:	4b3b      	ldr	r3, [pc, #236]	; (8003b14 <UART_SetConfig+0x2d4>)
 8003a26:	fba3 2301 	umull	r2, r3, r3, r1
 8003a2a:	095b      	lsrs	r3, r3, #5
 8003a2c:	2264      	movs	r2, #100	; 0x64
 8003a2e:	fb02 f303 	mul.w	r3, r2, r3
 8003a32:	1acb      	subs	r3, r1, r3
 8003a34:	00db      	lsls	r3, r3, #3
 8003a36:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003a3a:	4b36      	ldr	r3, [pc, #216]	; (8003b14 <UART_SetConfig+0x2d4>)
 8003a3c:	fba3 2302 	umull	r2, r3, r3, r2
 8003a40:	095b      	lsrs	r3, r3, #5
 8003a42:	005b      	lsls	r3, r3, #1
 8003a44:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003a48:	441c      	add	r4, r3
 8003a4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003a54:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003a58:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003a5c:	4642      	mov	r2, r8
 8003a5e:	464b      	mov	r3, r9
 8003a60:	1891      	adds	r1, r2, r2
 8003a62:	63b9      	str	r1, [r7, #56]	; 0x38
 8003a64:	415b      	adcs	r3, r3
 8003a66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a68:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003a6c:	4641      	mov	r1, r8
 8003a6e:	1851      	adds	r1, r2, r1
 8003a70:	6339      	str	r1, [r7, #48]	; 0x30
 8003a72:	4649      	mov	r1, r9
 8003a74:	414b      	adcs	r3, r1
 8003a76:	637b      	str	r3, [r7, #52]	; 0x34
 8003a78:	f04f 0200 	mov.w	r2, #0
 8003a7c:	f04f 0300 	mov.w	r3, #0
 8003a80:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003a84:	4659      	mov	r1, fp
 8003a86:	00cb      	lsls	r3, r1, #3
 8003a88:	4651      	mov	r1, sl
 8003a8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a8e:	4651      	mov	r1, sl
 8003a90:	00ca      	lsls	r2, r1, #3
 8003a92:	4610      	mov	r0, r2
 8003a94:	4619      	mov	r1, r3
 8003a96:	4603      	mov	r3, r0
 8003a98:	4642      	mov	r2, r8
 8003a9a:	189b      	adds	r3, r3, r2
 8003a9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003aa0:	464b      	mov	r3, r9
 8003aa2:	460a      	mov	r2, r1
 8003aa4:	eb42 0303 	adc.w	r3, r2, r3
 8003aa8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003ab8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003abc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003ac0:	460b      	mov	r3, r1
 8003ac2:	18db      	adds	r3, r3, r3
 8003ac4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	eb42 0303 	adc.w	r3, r2, r3
 8003acc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ace:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ad2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003ad6:	f7fd f877 	bl	8000bc8 <__aeabi_uldivmod>
 8003ada:	4602      	mov	r2, r0
 8003adc:	460b      	mov	r3, r1
 8003ade:	4b0d      	ldr	r3, [pc, #52]	; (8003b14 <UART_SetConfig+0x2d4>)
 8003ae0:	fba3 1302 	umull	r1, r3, r3, r2
 8003ae4:	095b      	lsrs	r3, r3, #5
 8003ae6:	2164      	movs	r1, #100	; 0x64
 8003ae8:	fb01 f303 	mul.w	r3, r1, r3
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	00db      	lsls	r3, r3, #3
 8003af0:	3332      	adds	r3, #50	; 0x32
 8003af2:	4a08      	ldr	r2, [pc, #32]	; (8003b14 <UART_SetConfig+0x2d4>)
 8003af4:	fba2 2303 	umull	r2, r3, r2, r3
 8003af8:	095b      	lsrs	r3, r3, #5
 8003afa:	f003 0207 	and.w	r2, r3, #7
 8003afe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4422      	add	r2, r4
 8003b06:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003b08:	e106      	b.n	8003d18 <UART_SetConfig+0x4d8>
 8003b0a:	bf00      	nop
 8003b0c:	40011000 	.word	0x40011000
 8003b10:	40011400 	.word	0x40011400
 8003b14:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003b22:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003b26:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003b2a:	4642      	mov	r2, r8
 8003b2c:	464b      	mov	r3, r9
 8003b2e:	1891      	adds	r1, r2, r2
 8003b30:	6239      	str	r1, [r7, #32]
 8003b32:	415b      	adcs	r3, r3
 8003b34:	627b      	str	r3, [r7, #36]	; 0x24
 8003b36:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003b3a:	4641      	mov	r1, r8
 8003b3c:	1854      	adds	r4, r2, r1
 8003b3e:	4649      	mov	r1, r9
 8003b40:	eb43 0501 	adc.w	r5, r3, r1
 8003b44:	f04f 0200 	mov.w	r2, #0
 8003b48:	f04f 0300 	mov.w	r3, #0
 8003b4c:	00eb      	lsls	r3, r5, #3
 8003b4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b52:	00e2      	lsls	r2, r4, #3
 8003b54:	4614      	mov	r4, r2
 8003b56:	461d      	mov	r5, r3
 8003b58:	4643      	mov	r3, r8
 8003b5a:	18e3      	adds	r3, r4, r3
 8003b5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003b60:	464b      	mov	r3, r9
 8003b62:	eb45 0303 	adc.w	r3, r5, r3
 8003b66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003b6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003b76:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003b7a:	f04f 0200 	mov.w	r2, #0
 8003b7e:	f04f 0300 	mov.w	r3, #0
 8003b82:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003b86:	4629      	mov	r1, r5
 8003b88:	008b      	lsls	r3, r1, #2
 8003b8a:	4621      	mov	r1, r4
 8003b8c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b90:	4621      	mov	r1, r4
 8003b92:	008a      	lsls	r2, r1, #2
 8003b94:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003b98:	f7fd f816 	bl	8000bc8 <__aeabi_uldivmod>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	460b      	mov	r3, r1
 8003ba0:	4b60      	ldr	r3, [pc, #384]	; (8003d24 <UART_SetConfig+0x4e4>)
 8003ba2:	fba3 2302 	umull	r2, r3, r3, r2
 8003ba6:	095b      	lsrs	r3, r3, #5
 8003ba8:	011c      	lsls	r4, r3, #4
 8003baa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003bb4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003bb8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003bbc:	4642      	mov	r2, r8
 8003bbe:	464b      	mov	r3, r9
 8003bc0:	1891      	adds	r1, r2, r2
 8003bc2:	61b9      	str	r1, [r7, #24]
 8003bc4:	415b      	adcs	r3, r3
 8003bc6:	61fb      	str	r3, [r7, #28]
 8003bc8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003bcc:	4641      	mov	r1, r8
 8003bce:	1851      	adds	r1, r2, r1
 8003bd0:	6139      	str	r1, [r7, #16]
 8003bd2:	4649      	mov	r1, r9
 8003bd4:	414b      	adcs	r3, r1
 8003bd6:	617b      	str	r3, [r7, #20]
 8003bd8:	f04f 0200 	mov.w	r2, #0
 8003bdc:	f04f 0300 	mov.w	r3, #0
 8003be0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003be4:	4659      	mov	r1, fp
 8003be6:	00cb      	lsls	r3, r1, #3
 8003be8:	4651      	mov	r1, sl
 8003bea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bee:	4651      	mov	r1, sl
 8003bf0:	00ca      	lsls	r2, r1, #3
 8003bf2:	4610      	mov	r0, r2
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	4642      	mov	r2, r8
 8003bfa:	189b      	adds	r3, r3, r2
 8003bfc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003c00:	464b      	mov	r3, r9
 8003c02:	460a      	mov	r2, r1
 8003c04:	eb42 0303 	adc.w	r3, r2, r3
 8003c08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	67bb      	str	r3, [r7, #120]	; 0x78
 8003c16:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003c18:	f04f 0200 	mov.w	r2, #0
 8003c1c:	f04f 0300 	mov.w	r3, #0
 8003c20:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003c24:	4649      	mov	r1, r9
 8003c26:	008b      	lsls	r3, r1, #2
 8003c28:	4641      	mov	r1, r8
 8003c2a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c2e:	4641      	mov	r1, r8
 8003c30:	008a      	lsls	r2, r1, #2
 8003c32:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003c36:	f7fc ffc7 	bl	8000bc8 <__aeabi_uldivmod>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	460b      	mov	r3, r1
 8003c3e:	4611      	mov	r1, r2
 8003c40:	4b38      	ldr	r3, [pc, #224]	; (8003d24 <UART_SetConfig+0x4e4>)
 8003c42:	fba3 2301 	umull	r2, r3, r3, r1
 8003c46:	095b      	lsrs	r3, r3, #5
 8003c48:	2264      	movs	r2, #100	; 0x64
 8003c4a:	fb02 f303 	mul.w	r3, r2, r3
 8003c4e:	1acb      	subs	r3, r1, r3
 8003c50:	011b      	lsls	r3, r3, #4
 8003c52:	3332      	adds	r3, #50	; 0x32
 8003c54:	4a33      	ldr	r2, [pc, #204]	; (8003d24 <UART_SetConfig+0x4e4>)
 8003c56:	fba2 2303 	umull	r2, r3, r2, r3
 8003c5a:	095b      	lsrs	r3, r3, #5
 8003c5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c60:	441c      	add	r4, r3
 8003c62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c66:	2200      	movs	r2, #0
 8003c68:	673b      	str	r3, [r7, #112]	; 0x70
 8003c6a:	677a      	str	r2, [r7, #116]	; 0x74
 8003c6c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003c70:	4642      	mov	r2, r8
 8003c72:	464b      	mov	r3, r9
 8003c74:	1891      	adds	r1, r2, r2
 8003c76:	60b9      	str	r1, [r7, #8]
 8003c78:	415b      	adcs	r3, r3
 8003c7a:	60fb      	str	r3, [r7, #12]
 8003c7c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c80:	4641      	mov	r1, r8
 8003c82:	1851      	adds	r1, r2, r1
 8003c84:	6039      	str	r1, [r7, #0]
 8003c86:	4649      	mov	r1, r9
 8003c88:	414b      	adcs	r3, r1
 8003c8a:	607b      	str	r3, [r7, #4]
 8003c8c:	f04f 0200 	mov.w	r2, #0
 8003c90:	f04f 0300 	mov.w	r3, #0
 8003c94:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003c98:	4659      	mov	r1, fp
 8003c9a:	00cb      	lsls	r3, r1, #3
 8003c9c:	4651      	mov	r1, sl
 8003c9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ca2:	4651      	mov	r1, sl
 8003ca4:	00ca      	lsls	r2, r1, #3
 8003ca6:	4610      	mov	r0, r2
 8003ca8:	4619      	mov	r1, r3
 8003caa:	4603      	mov	r3, r0
 8003cac:	4642      	mov	r2, r8
 8003cae:	189b      	adds	r3, r3, r2
 8003cb0:	66bb      	str	r3, [r7, #104]	; 0x68
 8003cb2:	464b      	mov	r3, r9
 8003cb4:	460a      	mov	r2, r1
 8003cb6:	eb42 0303 	adc.w	r3, r2, r3
 8003cba:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	663b      	str	r3, [r7, #96]	; 0x60
 8003cc6:	667a      	str	r2, [r7, #100]	; 0x64
 8003cc8:	f04f 0200 	mov.w	r2, #0
 8003ccc:	f04f 0300 	mov.w	r3, #0
 8003cd0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003cd4:	4649      	mov	r1, r9
 8003cd6:	008b      	lsls	r3, r1, #2
 8003cd8:	4641      	mov	r1, r8
 8003cda:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003cde:	4641      	mov	r1, r8
 8003ce0:	008a      	lsls	r2, r1, #2
 8003ce2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003ce6:	f7fc ff6f 	bl	8000bc8 <__aeabi_uldivmod>
 8003cea:	4602      	mov	r2, r0
 8003cec:	460b      	mov	r3, r1
 8003cee:	4b0d      	ldr	r3, [pc, #52]	; (8003d24 <UART_SetConfig+0x4e4>)
 8003cf0:	fba3 1302 	umull	r1, r3, r3, r2
 8003cf4:	095b      	lsrs	r3, r3, #5
 8003cf6:	2164      	movs	r1, #100	; 0x64
 8003cf8:	fb01 f303 	mul.w	r3, r1, r3
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	011b      	lsls	r3, r3, #4
 8003d00:	3332      	adds	r3, #50	; 0x32
 8003d02:	4a08      	ldr	r2, [pc, #32]	; (8003d24 <UART_SetConfig+0x4e4>)
 8003d04:	fba2 2303 	umull	r2, r3, r2, r3
 8003d08:	095b      	lsrs	r3, r3, #5
 8003d0a:	f003 020f 	and.w	r2, r3, #15
 8003d0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4422      	add	r2, r4
 8003d16:	609a      	str	r2, [r3, #8]
}
 8003d18:	bf00      	nop
 8003d1a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d24:	51eb851f 	.word	0x51eb851f

08003d28 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003d28:	b084      	sub	sp, #16
 8003d2a:	b580      	push	{r7, lr}
 8003d2c:	b084      	sub	sp, #16
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	6078      	str	r0, [r7, #4]
 8003d32:	f107 001c 	add.w	r0, r7, #28
 8003d36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d122      	bne.n	8003d86 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d44:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003d54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003d68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d105      	bne.n	8003d7a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f000 faa2 	bl	80042c4 <USB_CoreReset>
 8003d80:	4603      	mov	r3, r0
 8003d82:	73fb      	strb	r3, [r7, #15]
 8003d84:	e01a      	b.n	8003dbc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f000 fa96 	bl	80042c4 <USB_CoreReset>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003d9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d106      	bne.n	8003db0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	639a      	str	r2, [r3, #56]	; 0x38
 8003dae:	e005      	b.n	8003dbc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d10b      	bne.n	8003dda <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	f043 0206 	orr.w	r2, r3, #6
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	f043 0220 	orr.w	r2, r3, #32
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003dda:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3710      	adds	r7, #16
 8003de0:	46bd      	mov	sp, r7
 8003de2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003de6:	b004      	add	sp, #16
 8003de8:	4770      	bx	lr

08003dea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003dea:	b480      	push	{r7}
 8003dec:	b083      	sub	sp, #12
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	f023 0201 	bic.w	r2, r3, #1
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003dfe:	2300      	movs	r3, #0
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	370c      	adds	r7, #12
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr

08003e0c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	460b      	mov	r3, r1
 8003e16:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003e28:	78fb      	ldrb	r3, [r7, #3]
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d115      	bne.n	8003e5a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003e3a:	2001      	movs	r0, #1
 8003e3c:	f7fd feaa 	bl	8001b94 <HAL_Delay>
      ms++;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	3301      	adds	r3, #1
 8003e44:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f000 fa2e 	bl	80042a8 <USB_GetMode>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d01e      	beq.n	8003e90 <USB_SetCurrentMode+0x84>
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2b31      	cmp	r3, #49	; 0x31
 8003e56:	d9f0      	bls.n	8003e3a <USB_SetCurrentMode+0x2e>
 8003e58:	e01a      	b.n	8003e90 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003e5a:	78fb      	ldrb	r3, [r7, #3]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d115      	bne.n	8003e8c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003e6c:	2001      	movs	r0, #1
 8003e6e:	f7fd fe91 	bl	8001b94 <HAL_Delay>
      ms++;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	3301      	adds	r3, #1
 8003e76:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f000 fa15 	bl	80042a8 <USB_GetMode>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d005      	beq.n	8003e90 <USB_SetCurrentMode+0x84>
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2b31      	cmp	r3, #49	; 0x31
 8003e88:	d9f0      	bls.n	8003e6c <USB_SetCurrentMode+0x60>
 8003e8a:	e001      	b.n	8003e90 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e005      	b.n	8003e9c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2b32      	cmp	r3, #50	; 0x32
 8003e94:	d101      	bne.n	8003e9a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e000      	b.n	8003e9c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003e9a:	2300      	movs	r3, #0
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3710      	adds	r7, #16
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}

08003ea4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003ea4:	b084      	sub	sp, #16
 8003ea6:	b580      	push	{r7, lr}
 8003ea8:	b086      	sub	sp, #24
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	6078      	str	r0, [r7, #4]
 8003eae:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003eb2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	613b      	str	r3, [r7, #16]
 8003ec2:	e009      	b.n	8003ed8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	3340      	adds	r3, #64	; 0x40
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	4413      	add	r3, r2
 8003ece:	2200      	movs	r2, #0
 8003ed0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	3301      	adds	r3, #1
 8003ed6:	613b      	str	r3, [r7, #16]
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	2b0e      	cmp	r3, #14
 8003edc:	d9f2      	bls.n	8003ec4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003ede:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d11c      	bne.n	8003f1e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	68fa      	ldr	r2, [r7, #12]
 8003eee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ef2:	f043 0302 	orr.w	r3, r3, #2
 8003ef6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003efc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f08:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f14:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	639a      	str	r2, [r3, #56]	; 0x38
 8003f1c:	e00b      	b.n	8003f36 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f22:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f2e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	2300      	movs	r3, #0
 8003f40:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f48:	4619      	mov	r1, r3
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f50:	461a      	mov	r2, r3
 8003f52:	680b      	ldr	r3, [r1, #0]
 8003f54:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d10c      	bne.n	8003f76 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d104      	bne.n	8003f6c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003f62:	2100      	movs	r1, #0
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f000 f965 	bl	8004234 <USB_SetDevSpeed>
 8003f6a:	e008      	b.n	8003f7e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003f6c:	2101      	movs	r1, #1
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f000 f960 	bl	8004234 <USB_SetDevSpeed>
 8003f74:	e003      	b.n	8003f7e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003f76:	2103      	movs	r1, #3
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f000 f95b 	bl	8004234 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003f7e:	2110      	movs	r1, #16
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f000 f8f3 	bl	800416c <USB_FlushTxFifo>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d001      	beq.n	8003f90 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f000 f91f 	bl	80041d4 <USB_FlushRxFifo>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d001      	beq.n	8003fa0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	2300      	movs	r3, #0
 8003faa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	613b      	str	r3, [r7, #16]
 8003fc8:	e043      	b.n	8004052 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	015a      	lsls	r2, r3, #5
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	4413      	add	r3, r2
 8003fd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003fdc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003fe0:	d118      	bne.n	8004014 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d10a      	bne.n	8003ffe <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	015a      	lsls	r2, r3, #5
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	4413      	add	r3, r2
 8003ff0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003ffa:	6013      	str	r3, [r2, #0]
 8003ffc:	e013      	b.n	8004026 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	015a      	lsls	r2, r3, #5
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	4413      	add	r3, r2
 8004006:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800400a:	461a      	mov	r2, r3
 800400c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004010:	6013      	str	r3, [r2, #0]
 8004012:	e008      	b.n	8004026 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	015a      	lsls	r2, r3, #5
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	4413      	add	r3, r2
 800401c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004020:	461a      	mov	r2, r3
 8004022:	2300      	movs	r3, #0
 8004024:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	015a      	lsls	r2, r3, #5
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	4413      	add	r3, r2
 800402e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004032:	461a      	mov	r2, r3
 8004034:	2300      	movs	r3, #0
 8004036:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	015a      	lsls	r2, r3, #5
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	4413      	add	r3, r2
 8004040:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004044:	461a      	mov	r2, r3
 8004046:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800404a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	3301      	adds	r3, #1
 8004050:	613b      	str	r3, [r7, #16]
 8004052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004054:	693a      	ldr	r2, [r7, #16]
 8004056:	429a      	cmp	r2, r3
 8004058:	d3b7      	bcc.n	8003fca <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800405a:	2300      	movs	r3, #0
 800405c:	613b      	str	r3, [r7, #16]
 800405e:	e043      	b.n	80040e8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	015a      	lsls	r2, r3, #5
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	4413      	add	r3, r2
 8004068:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004072:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004076:	d118      	bne.n	80040aa <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d10a      	bne.n	8004094 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	015a      	lsls	r2, r3, #5
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	4413      	add	r3, r2
 8004086:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800408a:	461a      	mov	r2, r3
 800408c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004090:	6013      	str	r3, [r2, #0]
 8004092:	e013      	b.n	80040bc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	015a      	lsls	r2, r3, #5
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	4413      	add	r3, r2
 800409c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040a0:	461a      	mov	r2, r3
 80040a2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80040a6:	6013      	str	r3, [r2, #0]
 80040a8:	e008      	b.n	80040bc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	015a      	lsls	r2, r3, #5
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	4413      	add	r3, r2
 80040b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040b6:	461a      	mov	r2, r3
 80040b8:	2300      	movs	r3, #0
 80040ba:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	015a      	lsls	r2, r3, #5
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	4413      	add	r3, r2
 80040c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040c8:	461a      	mov	r2, r3
 80040ca:	2300      	movs	r3, #0
 80040cc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	015a      	lsls	r2, r3, #5
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	4413      	add	r3, r2
 80040d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040da:	461a      	mov	r2, r3
 80040dc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80040e0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	3301      	adds	r3, #1
 80040e6:	613b      	str	r3, [r7, #16]
 80040e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ea:	693a      	ldr	r2, [r7, #16]
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d3b7      	bcc.n	8004060 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040f6:	691b      	ldr	r3, [r3, #16]
 80040f8:	68fa      	ldr	r2, [r7, #12]
 80040fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004102:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004110:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004114:	2b00      	cmp	r3, #0
 8004116:	d105      	bne.n	8004124 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	699b      	ldr	r3, [r3, #24]
 800411c:	f043 0210 	orr.w	r2, r3, #16
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	699a      	ldr	r2, [r3, #24]
 8004128:	4b0f      	ldr	r3, [pc, #60]	; (8004168 <USB_DevInit+0x2c4>)
 800412a:	4313      	orrs	r3, r2
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004130:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004132:	2b00      	cmp	r3, #0
 8004134:	d005      	beq.n	8004142 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	699b      	ldr	r3, [r3, #24]
 800413a:	f043 0208 	orr.w	r2, r3, #8
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004142:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004144:	2b01      	cmp	r3, #1
 8004146:	d107      	bne.n	8004158 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	699b      	ldr	r3, [r3, #24]
 800414c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004150:	f043 0304 	orr.w	r3, r3, #4
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004158:	7dfb      	ldrb	r3, [r7, #23]
}
 800415a:	4618      	mov	r0, r3
 800415c:	3718      	adds	r7, #24
 800415e:	46bd      	mov	sp, r7
 8004160:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004164:	b004      	add	sp, #16
 8004166:	4770      	bx	lr
 8004168:	803c3800 	.word	0x803c3800

0800416c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800416c:	b480      	push	{r7}
 800416e:	b085      	sub	sp, #20
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004176:	2300      	movs	r3, #0
 8004178:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	3301      	adds	r3, #1
 800417e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	4a13      	ldr	r2, [pc, #76]	; (80041d0 <USB_FlushTxFifo+0x64>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d901      	bls.n	800418c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004188:	2303      	movs	r3, #3
 800418a:	e01b      	b.n	80041c4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	691b      	ldr	r3, [r3, #16]
 8004190:	2b00      	cmp	r3, #0
 8004192:	daf2      	bge.n	800417a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004194:	2300      	movs	r3, #0
 8004196:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	019b      	lsls	r3, r3, #6
 800419c:	f043 0220 	orr.w	r2, r3, #32
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	3301      	adds	r3, #1
 80041a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	4a08      	ldr	r2, [pc, #32]	; (80041d0 <USB_FlushTxFifo+0x64>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d901      	bls.n	80041b6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	e006      	b.n	80041c4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	691b      	ldr	r3, [r3, #16]
 80041ba:	f003 0320 	and.w	r3, r3, #32
 80041be:	2b20      	cmp	r3, #32
 80041c0:	d0f0      	beq.n	80041a4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80041c2:	2300      	movs	r3, #0
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3714      	adds	r7, #20
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr
 80041d0:	00030d40 	.word	0x00030d40

080041d4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b085      	sub	sp, #20
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80041dc:	2300      	movs	r3, #0
 80041de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	3301      	adds	r3, #1
 80041e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	4a11      	ldr	r2, [pc, #68]	; (8004230 <USB_FlushRxFifo+0x5c>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d901      	bls.n	80041f2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	e018      	b.n	8004224 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	691b      	ldr	r3, [r3, #16]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	daf2      	bge.n	80041e0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80041fa:	2300      	movs	r3, #0
 80041fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2210      	movs	r2, #16
 8004202:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	3301      	adds	r3, #1
 8004208:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	4a08      	ldr	r2, [pc, #32]	; (8004230 <USB_FlushRxFifo+0x5c>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d901      	bls.n	8004216 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	e006      	b.n	8004224 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	691b      	ldr	r3, [r3, #16]
 800421a:	f003 0310 	and.w	r3, r3, #16
 800421e:	2b10      	cmp	r3, #16
 8004220:	d0f0      	beq.n	8004204 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004222:	2300      	movs	r3, #0
}
 8004224:	4618      	mov	r0, r3
 8004226:	3714      	adds	r7, #20
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr
 8004230:	00030d40 	.word	0x00030d40

08004234 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004234:	b480      	push	{r7}
 8004236:	b085      	sub	sp, #20
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	460b      	mov	r3, r1
 800423e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	78fb      	ldrb	r3, [r7, #3]
 800424e:	68f9      	ldr	r1, [r7, #12]
 8004250:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004254:	4313      	orrs	r3, r2
 8004256:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004258:	2300      	movs	r3, #0
}
 800425a:	4618      	mov	r0, r3
 800425c:	3714      	adds	r7, #20
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr

08004266 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004266:	b480      	push	{r7}
 8004268:	b085      	sub	sp, #20
 800426a:	af00      	add	r7, sp, #0
 800426c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	68fa      	ldr	r2, [r7, #12]
 800427c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004280:	f023 0303 	bic.w	r3, r3, #3
 8004284:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	68fa      	ldr	r2, [r7, #12]
 8004290:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004294:	f043 0302 	orr.w	r3, r3, #2
 8004298:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800429a:	2300      	movs	r3, #0
}
 800429c:	4618      	mov	r0, r3
 800429e:	3714      	adds	r7, #20
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr

080042a8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	695b      	ldr	r3, [r3, #20]
 80042b4:	f003 0301 	and.w	r3, r3, #1
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b085      	sub	sp, #20
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80042cc:	2300      	movs	r3, #0
 80042ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	3301      	adds	r3, #1
 80042d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	4a13      	ldr	r2, [pc, #76]	; (8004328 <USB_CoreReset+0x64>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d901      	bls.n	80042e2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e01b      	b.n	800431a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	daf2      	bge.n	80042d0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80042ea:	2300      	movs	r3, #0
 80042ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	f043 0201 	orr.w	r2, r3, #1
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	3301      	adds	r3, #1
 80042fe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	4a09      	ldr	r2, [pc, #36]	; (8004328 <USB_CoreReset+0x64>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d901      	bls.n	800430c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004308:	2303      	movs	r3, #3
 800430a:	e006      	b.n	800431a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	691b      	ldr	r3, [r3, #16]
 8004310:	f003 0301 	and.w	r3, r3, #1
 8004314:	2b01      	cmp	r3, #1
 8004316:	d0f0      	beq.n	80042fa <USB_CoreReset+0x36>

  return HAL_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	3714      	adds	r7, #20
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr
 8004326:	bf00      	nop
 8004328:	00030d40 	.word	0x00030d40

0800432c <__cvt>:
 800432c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004330:	ec55 4b10 	vmov	r4, r5, d0
 8004334:	2d00      	cmp	r5, #0
 8004336:	460e      	mov	r6, r1
 8004338:	4619      	mov	r1, r3
 800433a:	462b      	mov	r3, r5
 800433c:	bfbb      	ittet	lt
 800433e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004342:	461d      	movlt	r5, r3
 8004344:	2300      	movge	r3, #0
 8004346:	232d      	movlt	r3, #45	; 0x2d
 8004348:	700b      	strb	r3, [r1, #0]
 800434a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800434c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004350:	4691      	mov	r9, r2
 8004352:	f023 0820 	bic.w	r8, r3, #32
 8004356:	bfbc      	itt	lt
 8004358:	4622      	movlt	r2, r4
 800435a:	4614      	movlt	r4, r2
 800435c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004360:	d005      	beq.n	800436e <__cvt+0x42>
 8004362:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004366:	d100      	bne.n	800436a <__cvt+0x3e>
 8004368:	3601      	adds	r6, #1
 800436a:	2102      	movs	r1, #2
 800436c:	e000      	b.n	8004370 <__cvt+0x44>
 800436e:	2103      	movs	r1, #3
 8004370:	ab03      	add	r3, sp, #12
 8004372:	9301      	str	r3, [sp, #4]
 8004374:	ab02      	add	r3, sp, #8
 8004376:	9300      	str	r3, [sp, #0]
 8004378:	ec45 4b10 	vmov	d0, r4, r5
 800437c:	4653      	mov	r3, sl
 800437e:	4632      	mov	r2, r6
 8004380:	f000 ff4a 	bl	8005218 <_dtoa_r>
 8004384:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004388:	4607      	mov	r7, r0
 800438a:	d102      	bne.n	8004392 <__cvt+0x66>
 800438c:	f019 0f01 	tst.w	r9, #1
 8004390:	d022      	beq.n	80043d8 <__cvt+0xac>
 8004392:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004396:	eb07 0906 	add.w	r9, r7, r6
 800439a:	d110      	bne.n	80043be <__cvt+0x92>
 800439c:	783b      	ldrb	r3, [r7, #0]
 800439e:	2b30      	cmp	r3, #48	; 0x30
 80043a0:	d10a      	bne.n	80043b8 <__cvt+0x8c>
 80043a2:	2200      	movs	r2, #0
 80043a4:	2300      	movs	r3, #0
 80043a6:	4620      	mov	r0, r4
 80043a8:	4629      	mov	r1, r5
 80043aa:	f7fc fb9d 	bl	8000ae8 <__aeabi_dcmpeq>
 80043ae:	b918      	cbnz	r0, 80043b8 <__cvt+0x8c>
 80043b0:	f1c6 0601 	rsb	r6, r6, #1
 80043b4:	f8ca 6000 	str.w	r6, [sl]
 80043b8:	f8da 3000 	ldr.w	r3, [sl]
 80043bc:	4499      	add	r9, r3
 80043be:	2200      	movs	r2, #0
 80043c0:	2300      	movs	r3, #0
 80043c2:	4620      	mov	r0, r4
 80043c4:	4629      	mov	r1, r5
 80043c6:	f7fc fb8f 	bl	8000ae8 <__aeabi_dcmpeq>
 80043ca:	b108      	cbz	r0, 80043d0 <__cvt+0xa4>
 80043cc:	f8cd 900c 	str.w	r9, [sp, #12]
 80043d0:	2230      	movs	r2, #48	; 0x30
 80043d2:	9b03      	ldr	r3, [sp, #12]
 80043d4:	454b      	cmp	r3, r9
 80043d6:	d307      	bcc.n	80043e8 <__cvt+0xbc>
 80043d8:	9b03      	ldr	r3, [sp, #12]
 80043da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80043dc:	1bdb      	subs	r3, r3, r7
 80043de:	4638      	mov	r0, r7
 80043e0:	6013      	str	r3, [r2, #0]
 80043e2:	b004      	add	sp, #16
 80043e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043e8:	1c59      	adds	r1, r3, #1
 80043ea:	9103      	str	r1, [sp, #12]
 80043ec:	701a      	strb	r2, [r3, #0]
 80043ee:	e7f0      	b.n	80043d2 <__cvt+0xa6>

080043f0 <__exponent>:
 80043f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80043f2:	4603      	mov	r3, r0
 80043f4:	2900      	cmp	r1, #0
 80043f6:	bfb8      	it	lt
 80043f8:	4249      	neglt	r1, r1
 80043fa:	f803 2b02 	strb.w	r2, [r3], #2
 80043fe:	bfb4      	ite	lt
 8004400:	222d      	movlt	r2, #45	; 0x2d
 8004402:	222b      	movge	r2, #43	; 0x2b
 8004404:	2909      	cmp	r1, #9
 8004406:	7042      	strb	r2, [r0, #1]
 8004408:	dd2a      	ble.n	8004460 <__exponent+0x70>
 800440a:	f10d 0207 	add.w	r2, sp, #7
 800440e:	4617      	mov	r7, r2
 8004410:	260a      	movs	r6, #10
 8004412:	4694      	mov	ip, r2
 8004414:	fb91 f5f6 	sdiv	r5, r1, r6
 8004418:	fb06 1415 	mls	r4, r6, r5, r1
 800441c:	3430      	adds	r4, #48	; 0x30
 800441e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004422:	460c      	mov	r4, r1
 8004424:	2c63      	cmp	r4, #99	; 0x63
 8004426:	f102 32ff 	add.w	r2, r2, #4294967295
 800442a:	4629      	mov	r1, r5
 800442c:	dcf1      	bgt.n	8004412 <__exponent+0x22>
 800442e:	3130      	adds	r1, #48	; 0x30
 8004430:	f1ac 0402 	sub.w	r4, ip, #2
 8004434:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004438:	1c41      	adds	r1, r0, #1
 800443a:	4622      	mov	r2, r4
 800443c:	42ba      	cmp	r2, r7
 800443e:	d30a      	bcc.n	8004456 <__exponent+0x66>
 8004440:	f10d 0209 	add.w	r2, sp, #9
 8004444:	eba2 020c 	sub.w	r2, r2, ip
 8004448:	42bc      	cmp	r4, r7
 800444a:	bf88      	it	hi
 800444c:	2200      	movhi	r2, #0
 800444e:	4413      	add	r3, r2
 8004450:	1a18      	subs	r0, r3, r0
 8004452:	b003      	add	sp, #12
 8004454:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004456:	f812 5b01 	ldrb.w	r5, [r2], #1
 800445a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800445e:	e7ed      	b.n	800443c <__exponent+0x4c>
 8004460:	2330      	movs	r3, #48	; 0x30
 8004462:	3130      	adds	r1, #48	; 0x30
 8004464:	7083      	strb	r3, [r0, #2]
 8004466:	70c1      	strb	r1, [r0, #3]
 8004468:	1d03      	adds	r3, r0, #4
 800446a:	e7f1      	b.n	8004450 <__exponent+0x60>

0800446c <_printf_float>:
 800446c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004470:	ed2d 8b02 	vpush	{d8}
 8004474:	b08d      	sub	sp, #52	; 0x34
 8004476:	460c      	mov	r4, r1
 8004478:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800447c:	4616      	mov	r6, r2
 800447e:	461f      	mov	r7, r3
 8004480:	4605      	mov	r5, r0
 8004482:	f000 fdc9 	bl	8005018 <_localeconv_r>
 8004486:	f8d0 a000 	ldr.w	sl, [r0]
 800448a:	4650      	mov	r0, sl
 800448c:	f7fb ff00 	bl	8000290 <strlen>
 8004490:	2300      	movs	r3, #0
 8004492:	930a      	str	r3, [sp, #40]	; 0x28
 8004494:	6823      	ldr	r3, [r4, #0]
 8004496:	9305      	str	r3, [sp, #20]
 8004498:	f8d8 3000 	ldr.w	r3, [r8]
 800449c:	f894 b018 	ldrb.w	fp, [r4, #24]
 80044a0:	3307      	adds	r3, #7
 80044a2:	f023 0307 	bic.w	r3, r3, #7
 80044a6:	f103 0208 	add.w	r2, r3, #8
 80044aa:	f8c8 2000 	str.w	r2, [r8]
 80044ae:	e9d3 8900 	ldrd	r8, r9, [r3]
 80044b2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80044b6:	9307      	str	r3, [sp, #28]
 80044b8:	f8cd 8018 	str.w	r8, [sp, #24]
 80044bc:	ee08 0a10 	vmov	s16, r0
 80044c0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80044c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80044c8:	4b9e      	ldr	r3, [pc, #632]	; (8004744 <_printf_float+0x2d8>)
 80044ca:	f04f 32ff 	mov.w	r2, #4294967295
 80044ce:	f7fc fb3d 	bl	8000b4c <__aeabi_dcmpun>
 80044d2:	bb88      	cbnz	r0, 8004538 <_printf_float+0xcc>
 80044d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80044d8:	4b9a      	ldr	r3, [pc, #616]	; (8004744 <_printf_float+0x2d8>)
 80044da:	f04f 32ff 	mov.w	r2, #4294967295
 80044de:	f7fc fb17 	bl	8000b10 <__aeabi_dcmple>
 80044e2:	bb48      	cbnz	r0, 8004538 <_printf_float+0xcc>
 80044e4:	2200      	movs	r2, #0
 80044e6:	2300      	movs	r3, #0
 80044e8:	4640      	mov	r0, r8
 80044ea:	4649      	mov	r1, r9
 80044ec:	f7fc fb06 	bl	8000afc <__aeabi_dcmplt>
 80044f0:	b110      	cbz	r0, 80044f8 <_printf_float+0x8c>
 80044f2:	232d      	movs	r3, #45	; 0x2d
 80044f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044f8:	4a93      	ldr	r2, [pc, #588]	; (8004748 <_printf_float+0x2dc>)
 80044fa:	4b94      	ldr	r3, [pc, #592]	; (800474c <_printf_float+0x2e0>)
 80044fc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004500:	bf94      	ite	ls
 8004502:	4690      	movls	r8, r2
 8004504:	4698      	movhi	r8, r3
 8004506:	2303      	movs	r3, #3
 8004508:	6123      	str	r3, [r4, #16]
 800450a:	9b05      	ldr	r3, [sp, #20]
 800450c:	f023 0304 	bic.w	r3, r3, #4
 8004510:	6023      	str	r3, [r4, #0]
 8004512:	f04f 0900 	mov.w	r9, #0
 8004516:	9700      	str	r7, [sp, #0]
 8004518:	4633      	mov	r3, r6
 800451a:	aa0b      	add	r2, sp, #44	; 0x2c
 800451c:	4621      	mov	r1, r4
 800451e:	4628      	mov	r0, r5
 8004520:	f000 f9da 	bl	80048d8 <_printf_common>
 8004524:	3001      	adds	r0, #1
 8004526:	f040 8090 	bne.w	800464a <_printf_float+0x1de>
 800452a:	f04f 30ff 	mov.w	r0, #4294967295
 800452e:	b00d      	add	sp, #52	; 0x34
 8004530:	ecbd 8b02 	vpop	{d8}
 8004534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004538:	4642      	mov	r2, r8
 800453a:	464b      	mov	r3, r9
 800453c:	4640      	mov	r0, r8
 800453e:	4649      	mov	r1, r9
 8004540:	f7fc fb04 	bl	8000b4c <__aeabi_dcmpun>
 8004544:	b140      	cbz	r0, 8004558 <_printf_float+0xec>
 8004546:	464b      	mov	r3, r9
 8004548:	2b00      	cmp	r3, #0
 800454a:	bfbc      	itt	lt
 800454c:	232d      	movlt	r3, #45	; 0x2d
 800454e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004552:	4a7f      	ldr	r2, [pc, #508]	; (8004750 <_printf_float+0x2e4>)
 8004554:	4b7f      	ldr	r3, [pc, #508]	; (8004754 <_printf_float+0x2e8>)
 8004556:	e7d1      	b.n	80044fc <_printf_float+0x90>
 8004558:	6863      	ldr	r3, [r4, #4]
 800455a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800455e:	9206      	str	r2, [sp, #24]
 8004560:	1c5a      	adds	r2, r3, #1
 8004562:	d13f      	bne.n	80045e4 <_printf_float+0x178>
 8004564:	2306      	movs	r3, #6
 8004566:	6063      	str	r3, [r4, #4]
 8004568:	9b05      	ldr	r3, [sp, #20]
 800456a:	6861      	ldr	r1, [r4, #4]
 800456c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004570:	2300      	movs	r3, #0
 8004572:	9303      	str	r3, [sp, #12]
 8004574:	ab0a      	add	r3, sp, #40	; 0x28
 8004576:	e9cd b301 	strd	fp, r3, [sp, #4]
 800457a:	ab09      	add	r3, sp, #36	; 0x24
 800457c:	ec49 8b10 	vmov	d0, r8, r9
 8004580:	9300      	str	r3, [sp, #0]
 8004582:	6022      	str	r2, [r4, #0]
 8004584:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004588:	4628      	mov	r0, r5
 800458a:	f7ff fecf 	bl	800432c <__cvt>
 800458e:	9b06      	ldr	r3, [sp, #24]
 8004590:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004592:	2b47      	cmp	r3, #71	; 0x47
 8004594:	4680      	mov	r8, r0
 8004596:	d108      	bne.n	80045aa <_printf_float+0x13e>
 8004598:	1cc8      	adds	r0, r1, #3
 800459a:	db02      	blt.n	80045a2 <_printf_float+0x136>
 800459c:	6863      	ldr	r3, [r4, #4]
 800459e:	4299      	cmp	r1, r3
 80045a0:	dd41      	ble.n	8004626 <_printf_float+0x1ba>
 80045a2:	f1ab 0302 	sub.w	r3, fp, #2
 80045a6:	fa5f fb83 	uxtb.w	fp, r3
 80045aa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80045ae:	d820      	bhi.n	80045f2 <_printf_float+0x186>
 80045b0:	3901      	subs	r1, #1
 80045b2:	465a      	mov	r2, fp
 80045b4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80045b8:	9109      	str	r1, [sp, #36]	; 0x24
 80045ba:	f7ff ff19 	bl	80043f0 <__exponent>
 80045be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80045c0:	1813      	adds	r3, r2, r0
 80045c2:	2a01      	cmp	r2, #1
 80045c4:	4681      	mov	r9, r0
 80045c6:	6123      	str	r3, [r4, #16]
 80045c8:	dc02      	bgt.n	80045d0 <_printf_float+0x164>
 80045ca:	6822      	ldr	r2, [r4, #0]
 80045cc:	07d2      	lsls	r2, r2, #31
 80045ce:	d501      	bpl.n	80045d4 <_printf_float+0x168>
 80045d0:	3301      	adds	r3, #1
 80045d2:	6123      	str	r3, [r4, #16]
 80045d4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d09c      	beq.n	8004516 <_printf_float+0xaa>
 80045dc:	232d      	movs	r3, #45	; 0x2d
 80045de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045e2:	e798      	b.n	8004516 <_printf_float+0xaa>
 80045e4:	9a06      	ldr	r2, [sp, #24]
 80045e6:	2a47      	cmp	r2, #71	; 0x47
 80045e8:	d1be      	bne.n	8004568 <_printf_float+0xfc>
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d1bc      	bne.n	8004568 <_printf_float+0xfc>
 80045ee:	2301      	movs	r3, #1
 80045f0:	e7b9      	b.n	8004566 <_printf_float+0xfa>
 80045f2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80045f6:	d118      	bne.n	800462a <_printf_float+0x1be>
 80045f8:	2900      	cmp	r1, #0
 80045fa:	6863      	ldr	r3, [r4, #4]
 80045fc:	dd0b      	ble.n	8004616 <_printf_float+0x1aa>
 80045fe:	6121      	str	r1, [r4, #16]
 8004600:	b913      	cbnz	r3, 8004608 <_printf_float+0x19c>
 8004602:	6822      	ldr	r2, [r4, #0]
 8004604:	07d0      	lsls	r0, r2, #31
 8004606:	d502      	bpl.n	800460e <_printf_float+0x1a2>
 8004608:	3301      	adds	r3, #1
 800460a:	440b      	add	r3, r1
 800460c:	6123      	str	r3, [r4, #16]
 800460e:	65a1      	str	r1, [r4, #88]	; 0x58
 8004610:	f04f 0900 	mov.w	r9, #0
 8004614:	e7de      	b.n	80045d4 <_printf_float+0x168>
 8004616:	b913      	cbnz	r3, 800461e <_printf_float+0x1b2>
 8004618:	6822      	ldr	r2, [r4, #0]
 800461a:	07d2      	lsls	r2, r2, #31
 800461c:	d501      	bpl.n	8004622 <_printf_float+0x1b6>
 800461e:	3302      	adds	r3, #2
 8004620:	e7f4      	b.n	800460c <_printf_float+0x1a0>
 8004622:	2301      	movs	r3, #1
 8004624:	e7f2      	b.n	800460c <_printf_float+0x1a0>
 8004626:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800462a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800462c:	4299      	cmp	r1, r3
 800462e:	db05      	blt.n	800463c <_printf_float+0x1d0>
 8004630:	6823      	ldr	r3, [r4, #0]
 8004632:	6121      	str	r1, [r4, #16]
 8004634:	07d8      	lsls	r0, r3, #31
 8004636:	d5ea      	bpl.n	800460e <_printf_float+0x1a2>
 8004638:	1c4b      	adds	r3, r1, #1
 800463a:	e7e7      	b.n	800460c <_printf_float+0x1a0>
 800463c:	2900      	cmp	r1, #0
 800463e:	bfd4      	ite	le
 8004640:	f1c1 0202 	rsble	r2, r1, #2
 8004644:	2201      	movgt	r2, #1
 8004646:	4413      	add	r3, r2
 8004648:	e7e0      	b.n	800460c <_printf_float+0x1a0>
 800464a:	6823      	ldr	r3, [r4, #0]
 800464c:	055a      	lsls	r2, r3, #21
 800464e:	d407      	bmi.n	8004660 <_printf_float+0x1f4>
 8004650:	6923      	ldr	r3, [r4, #16]
 8004652:	4642      	mov	r2, r8
 8004654:	4631      	mov	r1, r6
 8004656:	4628      	mov	r0, r5
 8004658:	47b8      	blx	r7
 800465a:	3001      	adds	r0, #1
 800465c:	d12c      	bne.n	80046b8 <_printf_float+0x24c>
 800465e:	e764      	b.n	800452a <_printf_float+0xbe>
 8004660:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004664:	f240 80e0 	bls.w	8004828 <_printf_float+0x3bc>
 8004668:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800466c:	2200      	movs	r2, #0
 800466e:	2300      	movs	r3, #0
 8004670:	f7fc fa3a 	bl	8000ae8 <__aeabi_dcmpeq>
 8004674:	2800      	cmp	r0, #0
 8004676:	d034      	beq.n	80046e2 <_printf_float+0x276>
 8004678:	4a37      	ldr	r2, [pc, #220]	; (8004758 <_printf_float+0x2ec>)
 800467a:	2301      	movs	r3, #1
 800467c:	4631      	mov	r1, r6
 800467e:	4628      	mov	r0, r5
 8004680:	47b8      	blx	r7
 8004682:	3001      	adds	r0, #1
 8004684:	f43f af51 	beq.w	800452a <_printf_float+0xbe>
 8004688:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800468c:	429a      	cmp	r2, r3
 800468e:	db02      	blt.n	8004696 <_printf_float+0x22a>
 8004690:	6823      	ldr	r3, [r4, #0]
 8004692:	07d8      	lsls	r0, r3, #31
 8004694:	d510      	bpl.n	80046b8 <_printf_float+0x24c>
 8004696:	ee18 3a10 	vmov	r3, s16
 800469a:	4652      	mov	r2, sl
 800469c:	4631      	mov	r1, r6
 800469e:	4628      	mov	r0, r5
 80046a0:	47b8      	blx	r7
 80046a2:	3001      	adds	r0, #1
 80046a4:	f43f af41 	beq.w	800452a <_printf_float+0xbe>
 80046a8:	f04f 0800 	mov.w	r8, #0
 80046ac:	f104 091a 	add.w	r9, r4, #26
 80046b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80046b2:	3b01      	subs	r3, #1
 80046b4:	4543      	cmp	r3, r8
 80046b6:	dc09      	bgt.n	80046cc <_printf_float+0x260>
 80046b8:	6823      	ldr	r3, [r4, #0]
 80046ba:	079b      	lsls	r3, r3, #30
 80046bc:	f100 8107 	bmi.w	80048ce <_printf_float+0x462>
 80046c0:	68e0      	ldr	r0, [r4, #12]
 80046c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80046c4:	4298      	cmp	r0, r3
 80046c6:	bfb8      	it	lt
 80046c8:	4618      	movlt	r0, r3
 80046ca:	e730      	b.n	800452e <_printf_float+0xc2>
 80046cc:	2301      	movs	r3, #1
 80046ce:	464a      	mov	r2, r9
 80046d0:	4631      	mov	r1, r6
 80046d2:	4628      	mov	r0, r5
 80046d4:	47b8      	blx	r7
 80046d6:	3001      	adds	r0, #1
 80046d8:	f43f af27 	beq.w	800452a <_printf_float+0xbe>
 80046dc:	f108 0801 	add.w	r8, r8, #1
 80046e0:	e7e6      	b.n	80046b0 <_printf_float+0x244>
 80046e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	dc39      	bgt.n	800475c <_printf_float+0x2f0>
 80046e8:	4a1b      	ldr	r2, [pc, #108]	; (8004758 <_printf_float+0x2ec>)
 80046ea:	2301      	movs	r3, #1
 80046ec:	4631      	mov	r1, r6
 80046ee:	4628      	mov	r0, r5
 80046f0:	47b8      	blx	r7
 80046f2:	3001      	adds	r0, #1
 80046f4:	f43f af19 	beq.w	800452a <_printf_float+0xbe>
 80046f8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80046fc:	4313      	orrs	r3, r2
 80046fe:	d102      	bne.n	8004706 <_printf_float+0x29a>
 8004700:	6823      	ldr	r3, [r4, #0]
 8004702:	07d9      	lsls	r1, r3, #31
 8004704:	d5d8      	bpl.n	80046b8 <_printf_float+0x24c>
 8004706:	ee18 3a10 	vmov	r3, s16
 800470a:	4652      	mov	r2, sl
 800470c:	4631      	mov	r1, r6
 800470e:	4628      	mov	r0, r5
 8004710:	47b8      	blx	r7
 8004712:	3001      	adds	r0, #1
 8004714:	f43f af09 	beq.w	800452a <_printf_float+0xbe>
 8004718:	f04f 0900 	mov.w	r9, #0
 800471c:	f104 0a1a 	add.w	sl, r4, #26
 8004720:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004722:	425b      	negs	r3, r3
 8004724:	454b      	cmp	r3, r9
 8004726:	dc01      	bgt.n	800472c <_printf_float+0x2c0>
 8004728:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800472a:	e792      	b.n	8004652 <_printf_float+0x1e6>
 800472c:	2301      	movs	r3, #1
 800472e:	4652      	mov	r2, sl
 8004730:	4631      	mov	r1, r6
 8004732:	4628      	mov	r0, r5
 8004734:	47b8      	blx	r7
 8004736:	3001      	adds	r0, #1
 8004738:	f43f aef7 	beq.w	800452a <_printf_float+0xbe>
 800473c:	f109 0901 	add.w	r9, r9, #1
 8004740:	e7ee      	b.n	8004720 <_printf_float+0x2b4>
 8004742:	bf00      	nop
 8004744:	7fefffff 	.word	0x7fefffff
 8004748:	08006de8 	.word	0x08006de8
 800474c:	08006dec 	.word	0x08006dec
 8004750:	08006df0 	.word	0x08006df0
 8004754:	08006df4 	.word	0x08006df4
 8004758:	08006df8 	.word	0x08006df8
 800475c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800475e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004760:	429a      	cmp	r2, r3
 8004762:	bfa8      	it	ge
 8004764:	461a      	movge	r2, r3
 8004766:	2a00      	cmp	r2, #0
 8004768:	4691      	mov	r9, r2
 800476a:	dc37      	bgt.n	80047dc <_printf_float+0x370>
 800476c:	f04f 0b00 	mov.w	fp, #0
 8004770:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004774:	f104 021a 	add.w	r2, r4, #26
 8004778:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800477a:	9305      	str	r3, [sp, #20]
 800477c:	eba3 0309 	sub.w	r3, r3, r9
 8004780:	455b      	cmp	r3, fp
 8004782:	dc33      	bgt.n	80047ec <_printf_float+0x380>
 8004784:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004788:	429a      	cmp	r2, r3
 800478a:	db3b      	blt.n	8004804 <_printf_float+0x398>
 800478c:	6823      	ldr	r3, [r4, #0]
 800478e:	07da      	lsls	r2, r3, #31
 8004790:	d438      	bmi.n	8004804 <_printf_float+0x398>
 8004792:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004796:	eba2 0903 	sub.w	r9, r2, r3
 800479a:	9b05      	ldr	r3, [sp, #20]
 800479c:	1ad2      	subs	r2, r2, r3
 800479e:	4591      	cmp	r9, r2
 80047a0:	bfa8      	it	ge
 80047a2:	4691      	movge	r9, r2
 80047a4:	f1b9 0f00 	cmp.w	r9, #0
 80047a8:	dc35      	bgt.n	8004816 <_printf_float+0x3aa>
 80047aa:	f04f 0800 	mov.w	r8, #0
 80047ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80047b2:	f104 0a1a 	add.w	sl, r4, #26
 80047b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80047ba:	1a9b      	subs	r3, r3, r2
 80047bc:	eba3 0309 	sub.w	r3, r3, r9
 80047c0:	4543      	cmp	r3, r8
 80047c2:	f77f af79 	ble.w	80046b8 <_printf_float+0x24c>
 80047c6:	2301      	movs	r3, #1
 80047c8:	4652      	mov	r2, sl
 80047ca:	4631      	mov	r1, r6
 80047cc:	4628      	mov	r0, r5
 80047ce:	47b8      	blx	r7
 80047d0:	3001      	adds	r0, #1
 80047d2:	f43f aeaa 	beq.w	800452a <_printf_float+0xbe>
 80047d6:	f108 0801 	add.w	r8, r8, #1
 80047da:	e7ec      	b.n	80047b6 <_printf_float+0x34a>
 80047dc:	4613      	mov	r3, r2
 80047de:	4631      	mov	r1, r6
 80047e0:	4642      	mov	r2, r8
 80047e2:	4628      	mov	r0, r5
 80047e4:	47b8      	blx	r7
 80047e6:	3001      	adds	r0, #1
 80047e8:	d1c0      	bne.n	800476c <_printf_float+0x300>
 80047ea:	e69e      	b.n	800452a <_printf_float+0xbe>
 80047ec:	2301      	movs	r3, #1
 80047ee:	4631      	mov	r1, r6
 80047f0:	4628      	mov	r0, r5
 80047f2:	9205      	str	r2, [sp, #20]
 80047f4:	47b8      	blx	r7
 80047f6:	3001      	adds	r0, #1
 80047f8:	f43f ae97 	beq.w	800452a <_printf_float+0xbe>
 80047fc:	9a05      	ldr	r2, [sp, #20]
 80047fe:	f10b 0b01 	add.w	fp, fp, #1
 8004802:	e7b9      	b.n	8004778 <_printf_float+0x30c>
 8004804:	ee18 3a10 	vmov	r3, s16
 8004808:	4652      	mov	r2, sl
 800480a:	4631      	mov	r1, r6
 800480c:	4628      	mov	r0, r5
 800480e:	47b8      	blx	r7
 8004810:	3001      	adds	r0, #1
 8004812:	d1be      	bne.n	8004792 <_printf_float+0x326>
 8004814:	e689      	b.n	800452a <_printf_float+0xbe>
 8004816:	9a05      	ldr	r2, [sp, #20]
 8004818:	464b      	mov	r3, r9
 800481a:	4442      	add	r2, r8
 800481c:	4631      	mov	r1, r6
 800481e:	4628      	mov	r0, r5
 8004820:	47b8      	blx	r7
 8004822:	3001      	adds	r0, #1
 8004824:	d1c1      	bne.n	80047aa <_printf_float+0x33e>
 8004826:	e680      	b.n	800452a <_printf_float+0xbe>
 8004828:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800482a:	2a01      	cmp	r2, #1
 800482c:	dc01      	bgt.n	8004832 <_printf_float+0x3c6>
 800482e:	07db      	lsls	r3, r3, #31
 8004830:	d53a      	bpl.n	80048a8 <_printf_float+0x43c>
 8004832:	2301      	movs	r3, #1
 8004834:	4642      	mov	r2, r8
 8004836:	4631      	mov	r1, r6
 8004838:	4628      	mov	r0, r5
 800483a:	47b8      	blx	r7
 800483c:	3001      	adds	r0, #1
 800483e:	f43f ae74 	beq.w	800452a <_printf_float+0xbe>
 8004842:	ee18 3a10 	vmov	r3, s16
 8004846:	4652      	mov	r2, sl
 8004848:	4631      	mov	r1, r6
 800484a:	4628      	mov	r0, r5
 800484c:	47b8      	blx	r7
 800484e:	3001      	adds	r0, #1
 8004850:	f43f ae6b 	beq.w	800452a <_printf_float+0xbe>
 8004854:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004858:	2200      	movs	r2, #0
 800485a:	2300      	movs	r3, #0
 800485c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8004860:	f7fc f942 	bl	8000ae8 <__aeabi_dcmpeq>
 8004864:	b9d8      	cbnz	r0, 800489e <_printf_float+0x432>
 8004866:	f10a 33ff 	add.w	r3, sl, #4294967295
 800486a:	f108 0201 	add.w	r2, r8, #1
 800486e:	4631      	mov	r1, r6
 8004870:	4628      	mov	r0, r5
 8004872:	47b8      	blx	r7
 8004874:	3001      	adds	r0, #1
 8004876:	d10e      	bne.n	8004896 <_printf_float+0x42a>
 8004878:	e657      	b.n	800452a <_printf_float+0xbe>
 800487a:	2301      	movs	r3, #1
 800487c:	4652      	mov	r2, sl
 800487e:	4631      	mov	r1, r6
 8004880:	4628      	mov	r0, r5
 8004882:	47b8      	blx	r7
 8004884:	3001      	adds	r0, #1
 8004886:	f43f ae50 	beq.w	800452a <_printf_float+0xbe>
 800488a:	f108 0801 	add.w	r8, r8, #1
 800488e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004890:	3b01      	subs	r3, #1
 8004892:	4543      	cmp	r3, r8
 8004894:	dcf1      	bgt.n	800487a <_printf_float+0x40e>
 8004896:	464b      	mov	r3, r9
 8004898:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800489c:	e6da      	b.n	8004654 <_printf_float+0x1e8>
 800489e:	f04f 0800 	mov.w	r8, #0
 80048a2:	f104 0a1a 	add.w	sl, r4, #26
 80048a6:	e7f2      	b.n	800488e <_printf_float+0x422>
 80048a8:	2301      	movs	r3, #1
 80048aa:	4642      	mov	r2, r8
 80048ac:	e7df      	b.n	800486e <_printf_float+0x402>
 80048ae:	2301      	movs	r3, #1
 80048b0:	464a      	mov	r2, r9
 80048b2:	4631      	mov	r1, r6
 80048b4:	4628      	mov	r0, r5
 80048b6:	47b8      	blx	r7
 80048b8:	3001      	adds	r0, #1
 80048ba:	f43f ae36 	beq.w	800452a <_printf_float+0xbe>
 80048be:	f108 0801 	add.w	r8, r8, #1
 80048c2:	68e3      	ldr	r3, [r4, #12]
 80048c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80048c6:	1a5b      	subs	r3, r3, r1
 80048c8:	4543      	cmp	r3, r8
 80048ca:	dcf0      	bgt.n	80048ae <_printf_float+0x442>
 80048cc:	e6f8      	b.n	80046c0 <_printf_float+0x254>
 80048ce:	f04f 0800 	mov.w	r8, #0
 80048d2:	f104 0919 	add.w	r9, r4, #25
 80048d6:	e7f4      	b.n	80048c2 <_printf_float+0x456>

080048d8 <_printf_common>:
 80048d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048dc:	4616      	mov	r6, r2
 80048de:	4699      	mov	r9, r3
 80048e0:	688a      	ldr	r2, [r1, #8]
 80048e2:	690b      	ldr	r3, [r1, #16]
 80048e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80048e8:	4293      	cmp	r3, r2
 80048ea:	bfb8      	it	lt
 80048ec:	4613      	movlt	r3, r2
 80048ee:	6033      	str	r3, [r6, #0]
 80048f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80048f4:	4607      	mov	r7, r0
 80048f6:	460c      	mov	r4, r1
 80048f8:	b10a      	cbz	r2, 80048fe <_printf_common+0x26>
 80048fa:	3301      	adds	r3, #1
 80048fc:	6033      	str	r3, [r6, #0]
 80048fe:	6823      	ldr	r3, [r4, #0]
 8004900:	0699      	lsls	r1, r3, #26
 8004902:	bf42      	ittt	mi
 8004904:	6833      	ldrmi	r3, [r6, #0]
 8004906:	3302      	addmi	r3, #2
 8004908:	6033      	strmi	r3, [r6, #0]
 800490a:	6825      	ldr	r5, [r4, #0]
 800490c:	f015 0506 	ands.w	r5, r5, #6
 8004910:	d106      	bne.n	8004920 <_printf_common+0x48>
 8004912:	f104 0a19 	add.w	sl, r4, #25
 8004916:	68e3      	ldr	r3, [r4, #12]
 8004918:	6832      	ldr	r2, [r6, #0]
 800491a:	1a9b      	subs	r3, r3, r2
 800491c:	42ab      	cmp	r3, r5
 800491e:	dc26      	bgt.n	800496e <_printf_common+0x96>
 8004920:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004924:	1e13      	subs	r3, r2, #0
 8004926:	6822      	ldr	r2, [r4, #0]
 8004928:	bf18      	it	ne
 800492a:	2301      	movne	r3, #1
 800492c:	0692      	lsls	r2, r2, #26
 800492e:	d42b      	bmi.n	8004988 <_printf_common+0xb0>
 8004930:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004934:	4649      	mov	r1, r9
 8004936:	4638      	mov	r0, r7
 8004938:	47c0      	blx	r8
 800493a:	3001      	adds	r0, #1
 800493c:	d01e      	beq.n	800497c <_printf_common+0xa4>
 800493e:	6823      	ldr	r3, [r4, #0]
 8004940:	6922      	ldr	r2, [r4, #16]
 8004942:	f003 0306 	and.w	r3, r3, #6
 8004946:	2b04      	cmp	r3, #4
 8004948:	bf02      	ittt	eq
 800494a:	68e5      	ldreq	r5, [r4, #12]
 800494c:	6833      	ldreq	r3, [r6, #0]
 800494e:	1aed      	subeq	r5, r5, r3
 8004950:	68a3      	ldr	r3, [r4, #8]
 8004952:	bf0c      	ite	eq
 8004954:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004958:	2500      	movne	r5, #0
 800495a:	4293      	cmp	r3, r2
 800495c:	bfc4      	itt	gt
 800495e:	1a9b      	subgt	r3, r3, r2
 8004960:	18ed      	addgt	r5, r5, r3
 8004962:	2600      	movs	r6, #0
 8004964:	341a      	adds	r4, #26
 8004966:	42b5      	cmp	r5, r6
 8004968:	d11a      	bne.n	80049a0 <_printf_common+0xc8>
 800496a:	2000      	movs	r0, #0
 800496c:	e008      	b.n	8004980 <_printf_common+0xa8>
 800496e:	2301      	movs	r3, #1
 8004970:	4652      	mov	r2, sl
 8004972:	4649      	mov	r1, r9
 8004974:	4638      	mov	r0, r7
 8004976:	47c0      	blx	r8
 8004978:	3001      	adds	r0, #1
 800497a:	d103      	bne.n	8004984 <_printf_common+0xac>
 800497c:	f04f 30ff 	mov.w	r0, #4294967295
 8004980:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004984:	3501      	adds	r5, #1
 8004986:	e7c6      	b.n	8004916 <_printf_common+0x3e>
 8004988:	18e1      	adds	r1, r4, r3
 800498a:	1c5a      	adds	r2, r3, #1
 800498c:	2030      	movs	r0, #48	; 0x30
 800498e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004992:	4422      	add	r2, r4
 8004994:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004998:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800499c:	3302      	adds	r3, #2
 800499e:	e7c7      	b.n	8004930 <_printf_common+0x58>
 80049a0:	2301      	movs	r3, #1
 80049a2:	4622      	mov	r2, r4
 80049a4:	4649      	mov	r1, r9
 80049a6:	4638      	mov	r0, r7
 80049a8:	47c0      	blx	r8
 80049aa:	3001      	adds	r0, #1
 80049ac:	d0e6      	beq.n	800497c <_printf_common+0xa4>
 80049ae:	3601      	adds	r6, #1
 80049b0:	e7d9      	b.n	8004966 <_printf_common+0x8e>
	...

080049b4 <_printf_i>:
 80049b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80049b8:	7e0f      	ldrb	r7, [r1, #24]
 80049ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80049bc:	2f78      	cmp	r7, #120	; 0x78
 80049be:	4691      	mov	r9, r2
 80049c0:	4680      	mov	r8, r0
 80049c2:	460c      	mov	r4, r1
 80049c4:	469a      	mov	sl, r3
 80049c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80049ca:	d807      	bhi.n	80049dc <_printf_i+0x28>
 80049cc:	2f62      	cmp	r7, #98	; 0x62
 80049ce:	d80a      	bhi.n	80049e6 <_printf_i+0x32>
 80049d0:	2f00      	cmp	r7, #0
 80049d2:	f000 80d4 	beq.w	8004b7e <_printf_i+0x1ca>
 80049d6:	2f58      	cmp	r7, #88	; 0x58
 80049d8:	f000 80c0 	beq.w	8004b5c <_printf_i+0x1a8>
 80049dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80049e4:	e03a      	b.n	8004a5c <_printf_i+0xa8>
 80049e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80049ea:	2b15      	cmp	r3, #21
 80049ec:	d8f6      	bhi.n	80049dc <_printf_i+0x28>
 80049ee:	a101      	add	r1, pc, #4	; (adr r1, 80049f4 <_printf_i+0x40>)
 80049f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80049f4:	08004a4d 	.word	0x08004a4d
 80049f8:	08004a61 	.word	0x08004a61
 80049fc:	080049dd 	.word	0x080049dd
 8004a00:	080049dd 	.word	0x080049dd
 8004a04:	080049dd 	.word	0x080049dd
 8004a08:	080049dd 	.word	0x080049dd
 8004a0c:	08004a61 	.word	0x08004a61
 8004a10:	080049dd 	.word	0x080049dd
 8004a14:	080049dd 	.word	0x080049dd
 8004a18:	080049dd 	.word	0x080049dd
 8004a1c:	080049dd 	.word	0x080049dd
 8004a20:	08004b65 	.word	0x08004b65
 8004a24:	08004a8d 	.word	0x08004a8d
 8004a28:	08004b1f 	.word	0x08004b1f
 8004a2c:	080049dd 	.word	0x080049dd
 8004a30:	080049dd 	.word	0x080049dd
 8004a34:	08004b87 	.word	0x08004b87
 8004a38:	080049dd 	.word	0x080049dd
 8004a3c:	08004a8d 	.word	0x08004a8d
 8004a40:	080049dd 	.word	0x080049dd
 8004a44:	080049dd 	.word	0x080049dd
 8004a48:	08004b27 	.word	0x08004b27
 8004a4c:	682b      	ldr	r3, [r5, #0]
 8004a4e:	1d1a      	adds	r2, r3, #4
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	602a      	str	r2, [r5, #0]
 8004a54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e09f      	b.n	8004ba0 <_printf_i+0x1ec>
 8004a60:	6820      	ldr	r0, [r4, #0]
 8004a62:	682b      	ldr	r3, [r5, #0]
 8004a64:	0607      	lsls	r7, r0, #24
 8004a66:	f103 0104 	add.w	r1, r3, #4
 8004a6a:	6029      	str	r1, [r5, #0]
 8004a6c:	d501      	bpl.n	8004a72 <_printf_i+0xbe>
 8004a6e:	681e      	ldr	r6, [r3, #0]
 8004a70:	e003      	b.n	8004a7a <_printf_i+0xc6>
 8004a72:	0646      	lsls	r6, r0, #25
 8004a74:	d5fb      	bpl.n	8004a6e <_printf_i+0xba>
 8004a76:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004a7a:	2e00      	cmp	r6, #0
 8004a7c:	da03      	bge.n	8004a86 <_printf_i+0xd2>
 8004a7e:	232d      	movs	r3, #45	; 0x2d
 8004a80:	4276      	negs	r6, r6
 8004a82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a86:	485a      	ldr	r0, [pc, #360]	; (8004bf0 <_printf_i+0x23c>)
 8004a88:	230a      	movs	r3, #10
 8004a8a:	e012      	b.n	8004ab2 <_printf_i+0xfe>
 8004a8c:	682b      	ldr	r3, [r5, #0]
 8004a8e:	6820      	ldr	r0, [r4, #0]
 8004a90:	1d19      	adds	r1, r3, #4
 8004a92:	6029      	str	r1, [r5, #0]
 8004a94:	0605      	lsls	r5, r0, #24
 8004a96:	d501      	bpl.n	8004a9c <_printf_i+0xe8>
 8004a98:	681e      	ldr	r6, [r3, #0]
 8004a9a:	e002      	b.n	8004aa2 <_printf_i+0xee>
 8004a9c:	0641      	lsls	r1, r0, #25
 8004a9e:	d5fb      	bpl.n	8004a98 <_printf_i+0xe4>
 8004aa0:	881e      	ldrh	r6, [r3, #0]
 8004aa2:	4853      	ldr	r0, [pc, #332]	; (8004bf0 <_printf_i+0x23c>)
 8004aa4:	2f6f      	cmp	r7, #111	; 0x6f
 8004aa6:	bf0c      	ite	eq
 8004aa8:	2308      	moveq	r3, #8
 8004aaa:	230a      	movne	r3, #10
 8004aac:	2100      	movs	r1, #0
 8004aae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004ab2:	6865      	ldr	r5, [r4, #4]
 8004ab4:	60a5      	str	r5, [r4, #8]
 8004ab6:	2d00      	cmp	r5, #0
 8004ab8:	bfa2      	ittt	ge
 8004aba:	6821      	ldrge	r1, [r4, #0]
 8004abc:	f021 0104 	bicge.w	r1, r1, #4
 8004ac0:	6021      	strge	r1, [r4, #0]
 8004ac2:	b90e      	cbnz	r6, 8004ac8 <_printf_i+0x114>
 8004ac4:	2d00      	cmp	r5, #0
 8004ac6:	d04b      	beq.n	8004b60 <_printf_i+0x1ac>
 8004ac8:	4615      	mov	r5, r2
 8004aca:	fbb6 f1f3 	udiv	r1, r6, r3
 8004ace:	fb03 6711 	mls	r7, r3, r1, r6
 8004ad2:	5dc7      	ldrb	r7, [r0, r7]
 8004ad4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004ad8:	4637      	mov	r7, r6
 8004ada:	42bb      	cmp	r3, r7
 8004adc:	460e      	mov	r6, r1
 8004ade:	d9f4      	bls.n	8004aca <_printf_i+0x116>
 8004ae0:	2b08      	cmp	r3, #8
 8004ae2:	d10b      	bne.n	8004afc <_printf_i+0x148>
 8004ae4:	6823      	ldr	r3, [r4, #0]
 8004ae6:	07de      	lsls	r6, r3, #31
 8004ae8:	d508      	bpl.n	8004afc <_printf_i+0x148>
 8004aea:	6923      	ldr	r3, [r4, #16]
 8004aec:	6861      	ldr	r1, [r4, #4]
 8004aee:	4299      	cmp	r1, r3
 8004af0:	bfde      	ittt	le
 8004af2:	2330      	movle	r3, #48	; 0x30
 8004af4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004af8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004afc:	1b52      	subs	r2, r2, r5
 8004afe:	6122      	str	r2, [r4, #16]
 8004b00:	f8cd a000 	str.w	sl, [sp]
 8004b04:	464b      	mov	r3, r9
 8004b06:	aa03      	add	r2, sp, #12
 8004b08:	4621      	mov	r1, r4
 8004b0a:	4640      	mov	r0, r8
 8004b0c:	f7ff fee4 	bl	80048d8 <_printf_common>
 8004b10:	3001      	adds	r0, #1
 8004b12:	d14a      	bne.n	8004baa <_printf_i+0x1f6>
 8004b14:	f04f 30ff 	mov.w	r0, #4294967295
 8004b18:	b004      	add	sp, #16
 8004b1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b1e:	6823      	ldr	r3, [r4, #0]
 8004b20:	f043 0320 	orr.w	r3, r3, #32
 8004b24:	6023      	str	r3, [r4, #0]
 8004b26:	4833      	ldr	r0, [pc, #204]	; (8004bf4 <_printf_i+0x240>)
 8004b28:	2778      	movs	r7, #120	; 0x78
 8004b2a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004b2e:	6823      	ldr	r3, [r4, #0]
 8004b30:	6829      	ldr	r1, [r5, #0]
 8004b32:	061f      	lsls	r7, r3, #24
 8004b34:	f851 6b04 	ldr.w	r6, [r1], #4
 8004b38:	d402      	bmi.n	8004b40 <_printf_i+0x18c>
 8004b3a:	065f      	lsls	r7, r3, #25
 8004b3c:	bf48      	it	mi
 8004b3e:	b2b6      	uxthmi	r6, r6
 8004b40:	07df      	lsls	r7, r3, #31
 8004b42:	bf48      	it	mi
 8004b44:	f043 0320 	orrmi.w	r3, r3, #32
 8004b48:	6029      	str	r1, [r5, #0]
 8004b4a:	bf48      	it	mi
 8004b4c:	6023      	strmi	r3, [r4, #0]
 8004b4e:	b91e      	cbnz	r6, 8004b58 <_printf_i+0x1a4>
 8004b50:	6823      	ldr	r3, [r4, #0]
 8004b52:	f023 0320 	bic.w	r3, r3, #32
 8004b56:	6023      	str	r3, [r4, #0]
 8004b58:	2310      	movs	r3, #16
 8004b5a:	e7a7      	b.n	8004aac <_printf_i+0xf8>
 8004b5c:	4824      	ldr	r0, [pc, #144]	; (8004bf0 <_printf_i+0x23c>)
 8004b5e:	e7e4      	b.n	8004b2a <_printf_i+0x176>
 8004b60:	4615      	mov	r5, r2
 8004b62:	e7bd      	b.n	8004ae0 <_printf_i+0x12c>
 8004b64:	682b      	ldr	r3, [r5, #0]
 8004b66:	6826      	ldr	r6, [r4, #0]
 8004b68:	6961      	ldr	r1, [r4, #20]
 8004b6a:	1d18      	adds	r0, r3, #4
 8004b6c:	6028      	str	r0, [r5, #0]
 8004b6e:	0635      	lsls	r5, r6, #24
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	d501      	bpl.n	8004b78 <_printf_i+0x1c4>
 8004b74:	6019      	str	r1, [r3, #0]
 8004b76:	e002      	b.n	8004b7e <_printf_i+0x1ca>
 8004b78:	0670      	lsls	r0, r6, #25
 8004b7a:	d5fb      	bpl.n	8004b74 <_printf_i+0x1c0>
 8004b7c:	8019      	strh	r1, [r3, #0]
 8004b7e:	2300      	movs	r3, #0
 8004b80:	6123      	str	r3, [r4, #16]
 8004b82:	4615      	mov	r5, r2
 8004b84:	e7bc      	b.n	8004b00 <_printf_i+0x14c>
 8004b86:	682b      	ldr	r3, [r5, #0]
 8004b88:	1d1a      	adds	r2, r3, #4
 8004b8a:	602a      	str	r2, [r5, #0]
 8004b8c:	681d      	ldr	r5, [r3, #0]
 8004b8e:	6862      	ldr	r2, [r4, #4]
 8004b90:	2100      	movs	r1, #0
 8004b92:	4628      	mov	r0, r5
 8004b94:	f7fb fb2c 	bl	80001f0 <memchr>
 8004b98:	b108      	cbz	r0, 8004b9e <_printf_i+0x1ea>
 8004b9a:	1b40      	subs	r0, r0, r5
 8004b9c:	6060      	str	r0, [r4, #4]
 8004b9e:	6863      	ldr	r3, [r4, #4]
 8004ba0:	6123      	str	r3, [r4, #16]
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ba8:	e7aa      	b.n	8004b00 <_printf_i+0x14c>
 8004baa:	6923      	ldr	r3, [r4, #16]
 8004bac:	462a      	mov	r2, r5
 8004bae:	4649      	mov	r1, r9
 8004bb0:	4640      	mov	r0, r8
 8004bb2:	47d0      	blx	sl
 8004bb4:	3001      	adds	r0, #1
 8004bb6:	d0ad      	beq.n	8004b14 <_printf_i+0x160>
 8004bb8:	6823      	ldr	r3, [r4, #0]
 8004bba:	079b      	lsls	r3, r3, #30
 8004bbc:	d413      	bmi.n	8004be6 <_printf_i+0x232>
 8004bbe:	68e0      	ldr	r0, [r4, #12]
 8004bc0:	9b03      	ldr	r3, [sp, #12]
 8004bc2:	4298      	cmp	r0, r3
 8004bc4:	bfb8      	it	lt
 8004bc6:	4618      	movlt	r0, r3
 8004bc8:	e7a6      	b.n	8004b18 <_printf_i+0x164>
 8004bca:	2301      	movs	r3, #1
 8004bcc:	4632      	mov	r2, r6
 8004bce:	4649      	mov	r1, r9
 8004bd0:	4640      	mov	r0, r8
 8004bd2:	47d0      	blx	sl
 8004bd4:	3001      	adds	r0, #1
 8004bd6:	d09d      	beq.n	8004b14 <_printf_i+0x160>
 8004bd8:	3501      	adds	r5, #1
 8004bda:	68e3      	ldr	r3, [r4, #12]
 8004bdc:	9903      	ldr	r1, [sp, #12]
 8004bde:	1a5b      	subs	r3, r3, r1
 8004be0:	42ab      	cmp	r3, r5
 8004be2:	dcf2      	bgt.n	8004bca <_printf_i+0x216>
 8004be4:	e7eb      	b.n	8004bbe <_printf_i+0x20a>
 8004be6:	2500      	movs	r5, #0
 8004be8:	f104 0619 	add.w	r6, r4, #25
 8004bec:	e7f5      	b.n	8004bda <_printf_i+0x226>
 8004bee:	bf00      	nop
 8004bf0:	08006dfa 	.word	0x08006dfa
 8004bf4:	08006e0b 	.word	0x08006e0b

08004bf8 <std>:
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	b510      	push	{r4, lr}
 8004bfc:	4604      	mov	r4, r0
 8004bfe:	e9c0 3300 	strd	r3, r3, [r0]
 8004c02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004c06:	6083      	str	r3, [r0, #8]
 8004c08:	8181      	strh	r1, [r0, #12]
 8004c0a:	6643      	str	r3, [r0, #100]	; 0x64
 8004c0c:	81c2      	strh	r2, [r0, #14]
 8004c0e:	6183      	str	r3, [r0, #24]
 8004c10:	4619      	mov	r1, r3
 8004c12:	2208      	movs	r2, #8
 8004c14:	305c      	adds	r0, #92	; 0x5c
 8004c16:	f000 f9f7 	bl	8005008 <memset>
 8004c1a:	4b0d      	ldr	r3, [pc, #52]	; (8004c50 <std+0x58>)
 8004c1c:	6263      	str	r3, [r4, #36]	; 0x24
 8004c1e:	4b0d      	ldr	r3, [pc, #52]	; (8004c54 <std+0x5c>)
 8004c20:	62a3      	str	r3, [r4, #40]	; 0x28
 8004c22:	4b0d      	ldr	r3, [pc, #52]	; (8004c58 <std+0x60>)
 8004c24:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004c26:	4b0d      	ldr	r3, [pc, #52]	; (8004c5c <std+0x64>)
 8004c28:	6323      	str	r3, [r4, #48]	; 0x30
 8004c2a:	4b0d      	ldr	r3, [pc, #52]	; (8004c60 <std+0x68>)
 8004c2c:	6224      	str	r4, [r4, #32]
 8004c2e:	429c      	cmp	r4, r3
 8004c30:	d006      	beq.n	8004c40 <std+0x48>
 8004c32:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004c36:	4294      	cmp	r4, r2
 8004c38:	d002      	beq.n	8004c40 <std+0x48>
 8004c3a:	33d0      	adds	r3, #208	; 0xd0
 8004c3c:	429c      	cmp	r4, r3
 8004c3e:	d105      	bne.n	8004c4c <std+0x54>
 8004c40:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004c44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c48:	f000 ba5a 	b.w	8005100 <__retarget_lock_init_recursive>
 8004c4c:	bd10      	pop	{r4, pc}
 8004c4e:	bf00      	nop
 8004c50:	08004e59 	.word	0x08004e59
 8004c54:	08004e7b 	.word	0x08004e7b
 8004c58:	08004eb3 	.word	0x08004eb3
 8004c5c:	08004ed7 	.word	0x08004ed7
 8004c60:	200007a4 	.word	0x200007a4

08004c64 <stdio_exit_handler>:
 8004c64:	4a02      	ldr	r2, [pc, #8]	; (8004c70 <stdio_exit_handler+0xc>)
 8004c66:	4903      	ldr	r1, [pc, #12]	; (8004c74 <stdio_exit_handler+0x10>)
 8004c68:	4803      	ldr	r0, [pc, #12]	; (8004c78 <stdio_exit_handler+0x14>)
 8004c6a:	f000 b869 	b.w	8004d40 <_fwalk_sglue>
 8004c6e:	bf00      	nop
 8004c70:	2000000c 	.word	0x2000000c
 8004c74:	08006a89 	.word	0x08006a89
 8004c78:	20000018 	.word	0x20000018

08004c7c <cleanup_stdio>:
 8004c7c:	6841      	ldr	r1, [r0, #4]
 8004c7e:	4b0c      	ldr	r3, [pc, #48]	; (8004cb0 <cleanup_stdio+0x34>)
 8004c80:	4299      	cmp	r1, r3
 8004c82:	b510      	push	{r4, lr}
 8004c84:	4604      	mov	r4, r0
 8004c86:	d001      	beq.n	8004c8c <cleanup_stdio+0x10>
 8004c88:	f001 fefe 	bl	8006a88 <_fflush_r>
 8004c8c:	68a1      	ldr	r1, [r4, #8]
 8004c8e:	4b09      	ldr	r3, [pc, #36]	; (8004cb4 <cleanup_stdio+0x38>)
 8004c90:	4299      	cmp	r1, r3
 8004c92:	d002      	beq.n	8004c9a <cleanup_stdio+0x1e>
 8004c94:	4620      	mov	r0, r4
 8004c96:	f001 fef7 	bl	8006a88 <_fflush_r>
 8004c9a:	68e1      	ldr	r1, [r4, #12]
 8004c9c:	4b06      	ldr	r3, [pc, #24]	; (8004cb8 <cleanup_stdio+0x3c>)
 8004c9e:	4299      	cmp	r1, r3
 8004ca0:	d004      	beq.n	8004cac <cleanup_stdio+0x30>
 8004ca2:	4620      	mov	r0, r4
 8004ca4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ca8:	f001 beee 	b.w	8006a88 <_fflush_r>
 8004cac:	bd10      	pop	{r4, pc}
 8004cae:	bf00      	nop
 8004cb0:	200007a4 	.word	0x200007a4
 8004cb4:	2000080c 	.word	0x2000080c
 8004cb8:	20000874 	.word	0x20000874

08004cbc <global_stdio_init.part.0>:
 8004cbc:	b510      	push	{r4, lr}
 8004cbe:	4b0b      	ldr	r3, [pc, #44]	; (8004cec <global_stdio_init.part.0+0x30>)
 8004cc0:	4c0b      	ldr	r4, [pc, #44]	; (8004cf0 <global_stdio_init.part.0+0x34>)
 8004cc2:	4a0c      	ldr	r2, [pc, #48]	; (8004cf4 <global_stdio_init.part.0+0x38>)
 8004cc4:	601a      	str	r2, [r3, #0]
 8004cc6:	4620      	mov	r0, r4
 8004cc8:	2200      	movs	r2, #0
 8004cca:	2104      	movs	r1, #4
 8004ccc:	f7ff ff94 	bl	8004bf8 <std>
 8004cd0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	2109      	movs	r1, #9
 8004cd8:	f7ff ff8e 	bl	8004bf8 <std>
 8004cdc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004ce0:	2202      	movs	r2, #2
 8004ce2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ce6:	2112      	movs	r1, #18
 8004ce8:	f7ff bf86 	b.w	8004bf8 <std>
 8004cec:	200008dc 	.word	0x200008dc
 8004cf0:	200007a4 	.word	0x200007a4
 8004cf4:	08004c65 	.word	0x08004c65

08004cf8 <__sfp_lock_acquire>:
 8004cf8:	4801      	ldr	r0, [pc, #4]	; (8004d00 <__sfp_lock_acquire+0x8>)
 8004cfa:	f000 ba02 	b.w	8005102 <__retarget_lock_acquire_recursive>
 8004cfe:	bf00      	nop
 8004d00:	200008e5 	.word	0x200008e5

08004d04 <__sfp_lock_release>:
 8004d04:	4801      	ldr	r0, [pc, #4]	; (8004d0c <__sfp_lock_release+0x8>)
 8004d06:	f000 b9fd 	b.w	8005104 <__retarget_lock_release_recursive>
 8004d0a:	bf00      	nop
 8004d0c:	200008e5 	.word	0x200008e5

08004d10 <__sinit>:
 8004d10:	b510      	push	{r4, lr}
 8004d12:	4604      	mov	r4, r0
 8004d14:	f7ff fff0 	bl	8004cf8 <__sfp_lock_acquire>
 8004d18:	6a23      	ldr	r3, [r4, #32]
 8004d1a:	b11b      	cbz	r3, 8004d24 <__sinit+0x14>
 8004d1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d20:	f7ff bff0 	b.w	8004d04 <__sfp_lock_release>
 8004d24:	4b04      	ldr	r3, [pc, #16]	; (8004d38 <__sinit+0x28>)
 8004d26:	6223      	str	r3, [r4, #32]
 8004d28:	4b04      	ldr	r3, [pc, #16]	; (8004d3c <__sinit+0x2c>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d1f5      	bne.n	8004d1c <__sinit+0xc>
 8004d30:	f7ff ffc4 	bl	8004cbc <global_stdio_init.part.0>
 8004d34:	e7f2      	b.n	8004d1c <__sinit+0xc>
 8004d36:	bf00      	nop
 8004d38:	08004c7d 	.word	0x08004c7d
 8004d3c:	200008dc 	.word	0x200008dc

08004d40 <_fwalk_sglue>:
 8004d40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d44:	4607      	mov	r7, r0
 8004d46:	4688      	mov	r8, r1
 8004d48:	4614      	mov	r4, r2
 8004d4a:	2600      	movs	r6, #0
 8004d4c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004d50:	f1b9 0901 	subs.w	r9, r9, #1
 8004d54:	d505      	bpl.n	8004d62 <_fwalk_sglue+0x22>
 8004d56:	6824      	ldr	r4, [r4, #0]
 8004d58:	2c00      	cmp	r4, #0
 8004d5a:	d1f7      	bne.n	8004d4c <_fwalk_sglue+0xc>
 8004d5c:	4630      	mov	r0, r6
 8004d5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d62:	89ab      	ldrh	r3, [r5, #12]
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d907      	bls.n	8004d78 <_fwalk_sglue+0x38>
 8004d68:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004d6c:	3301      	adds	r3, #1
 8004d6e:	d003      	beq.n	8004d78 <_fwalk_sglue+0x38>
 8004d70:	4629      	mov	r1, r5
 8004d72:	4638      	mov	r0, r7
 8004d74:	47c0      	blx	r8
 8004d76:	4306      	orrs	r6, r0
 8004d78:	3568      	adds	r5, #104	; 0x68
 8004d7a:	e7e9      	b.n	8004d50 <_fwalk_sglue+0x10>

08004d7c <iprintf>:
 8004d7c:	b40f      	push	{r0, r1, r2, r3}
 8004d7e:	b507      	push	{r0, r1, r2, lr}
 8004d80:	4906      	ldr	r1, [pc, #24]	; (8004d9c <iprintf+0x20>)
 8004d82:	ab04      	add	r3, sp, #16
 8004d84:	6808      	ldr	r0, [r1, #0]
 8004d86:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d8a:	6881      	ldr	r1, [r0, #8]
 8004d8c:	9301      	str	r3, [sp, #4]
 8004d8e:	f001 fcdb 	bl	8006748 <_vfiprintf_r>
 8004d92:	b003      	add	sp, #12
 8004d94:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d98:	b004      	add	sp, #16
 8004d9a:	4770      	bx	lr
 8004d9c:	20000064 	.word	0x20000064

08004da0 <_puts_r>:
 8004da0:	6a03      	ldr	r3, [r0, #32]
 8004da2:	b570      	push	{r4, r5, r6, lr}
 8004da4:	6884      	ldr	r4, [r0, #8]
 8004da6:	4605      	mov	r5, r0
 8004da8:	460e      	mov	r6, r1
 8004daa:	b90b      	cbnz	r3, 8004db0 <_puts_r+0x10>
 8004dac:	f7ff ffb0 	bl	8004d10 <__sinit>
 8004db0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004db2:	07db      	lsls	r3, r3, #31
 8004db4:	d405      	bmi.n	8004dc2 <_puts_r+0x22>
 8004db6:	89a3      	ldrh	r3, [r4, #12]
 8004db8:	0598      	lsls	r0, r3, #22
 8004dba:	d402      	bmi.n	8004dc2 <_puts_r+0x22>
 8004dbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004dbe:	f000 f9a0 	bl	8005102 <__retarget_lock_acquire_recursive>
 8004dc2:	89a3      	ldrh	r3, [r4, #12]
 8004dc4:	0719      	lsls	r1, r3, #28
 8004dc6:	d513      	bpl.n	8004df0 <_puts_r+0x50>
 8004dc8:	6923      	ldr	r3, [r4, #16]
 8004dca:	b18b      	cbz	r3, 8004df0 <_puts_r+0x50>
 8004dcc:	3e01      	subs	r6, #1
 8004dce:	68a3      	ldr	r3, [r4, #8]
 8004dd0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004dd4:	3b01      	subs	r3, #1
 8004dd6:	60a3      	str	r3, [r4, #8]
 8004dd8:	b9e9      	cbnz	r1, 8004e16 <_puts_r+0x76>
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	da2e      	bge.n	8004e3c <_puts_r+0x9c>
 8004dde:	4622      	mov	r2, r4
 8004de0:	210a      	movs	r1, #10
 8004de2:	4628      	mov	r0, r5
 8004de4:	f000 f87b 	bl	8004ede <__swbuf_r>
 8004de8:	3001      	adds	r0, #1
 8004dea:	d007      	beq.n	8004dfc <_puts_r+0x5c>
 8004dec:	250a      	movs	r5, #10
 8004dee:	e007      	b.n	8004e00 <_puts_r+0x60>
 8004df0:	4621      	mov	r1, r4
 8004df2:	4628      	mov	r0, r5
 8004df4:	f000 f8b0 	bl	8004f58 <__swsetup_r>
 8004df8:	2800      	cmp	r0, #0
 8004dfa:	d0e7      	beq.n	8004dcc <_puts_r+0x2c>
 8004dfc:	f04f 35ff 	mov.w	r5, #4294967295
 8004e00:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e02:	07da      	lsls	r2, r3, #31
 8004e04:	d405      	bmi.n	8004e12 <_puts_r+0x72>
 8004e06:	89a3      	ldrh	r3, [r4, #12]
 8004e08:	059b      	lsls	r3, r3, #22
 8004e0a:	d402      	bmi.n	8004e12 <_puts_r+0x72>
 8004e0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e0e:	f000 f979 	bl	8005104 <__retarget_lock_release_recursive>
 8004e12:	4628      	mov	r0, r5
 8004e14:	bd70      	pop	{r4, r5, r6, pc}
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	da04      	bge.n	8004e24 <_puts_r+0x84>
 8004e1a:	69a2      	ldr	r2, [r4, #24]
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	dc06      	bgt.n	8004e2e <_puts_r+0x8e>
 8004e20:	290a      	cmp	r1, #10
 8004e22:	d004      	beq.n	8004e2e <_puts_r+0x8e>
 8004e24:	6823      	ldr	r3, [r4, #0]
 8004e26:	1c5a      	adds	r2, r3, #1
 8004e28:	6022      	str	r2, [r4, #0]
 8004e2a:	7019      	strb	r1, [r3, #0]
 8004e2c:	e7cf      	b.n	8004dce <_puts_r+0x2e>
 8004e2e:	4622      	mov	r2, r4
 8004e30:	4628      	mov	r0, r5
 8004e32:	f000 f854 	bl	8004ede <__swbuf_r>
 8004e36:	3001      	adds	r0, #1
 8004e38:	d1c9      	bne.n	8004dce <_puts_r+0x2e>
 8004e3a:	e7df      	b.n	8004dfc <_puts_r+0x5c>
 8004e3c:	6823      	ldr	r3, [r4, #0]
 8004e3e:	250a      	movs	r5, #10
 8004e40:	1c5a      	adds	r2, r3, #1
 8004e42:	6022      	str	r2, [r4, #0]
 8004e44:	701d      	strb	r5, [r3, #0]
 8004e46:	e7db      	b.n	8004e00 <_puts_r+0x60>

08004e48 <puts>:
 8004e48:	4b02      	ldr	r3, [pc, #8]	; (8004e54 <puts+0xc>)
 8004e4a:	4601      	mov	r1, r0
 8004e4c:	6818      	ldr	r0, [r3, #0]
 8004e4e:	f7ff bfa7 	b.w	8004da0 <_puts_r>
 8004e52:	bf00      	nop
 8004e54:	20000064 	.word	0x20000064

08004e58 <__sread>:
 8004e58:	b510      	push	{r4, lr}
 8004e5a:	460c      	mov	r4, r1
 8004e5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e60:	f000 f900 	bl	8005064 <_read_r>
 8004e64:	2800      	cmp	r0, #0
 8004e66:	bfab      	itete	ge
 8004e68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004e6a:	89a3      	ldrhlt	r3, [r4, #12]
 8004e6c:	181b      	addge	r3, r3, r0
 8004e6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004e72:	bfac      	ite	ge
 8004e74:	6563      	strge	r3, [r4, #84]	; 0x54
 8004e76:	81a3      	strhlt	r3, [r4, #12]
 8004e78:	bd10      	pop	{r4, pc}

08004e7a <__swrite>:
 8004e7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e7e:	461f      	mov	r7, r3
 8004e80:	898b      	ldrh	r3, [r1, #12]
 8004e82:	05db      	lsls	r3, r3, #23
 8004e84:	4605      	mov	r5, r0
 8004e86:	460c      	mov	r4, r1
 8004e88:	4616      	mov	r6, r2
 8004e8a:	d505      	bpl.n	8004e98 <__swrite+0x1e>
 8004e8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e90:	2302      	movs	r3, #2
 8004e92:	2200      	movs	r2, #0
 8004e94:	f000 f8d4 	bl	8005040 <_lseek_r>
 8004e98:	89a3      	ldrh	r3, [r4, #12]
 8004e9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ea2:	81a3      	strh	r3, [r4, #12]
 8004ea4:	4632      	mov	r2, r6
 8004ea6:	463b      	mov	r3, r7
 8004ea8:	4628      	mov	r0, r5
 8004eaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004eae:	f000 b8eb 	b.w	8005088 <_write_r>

08004eb2 <__sseek>:
 8004eb2:	b510      	push	{r4, lr}
 8004eb4:	460c      	mov	r4, r1
 8004eb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004eba:	f000 f8c1 	bl	8005040 <_lseek_r>
 8004ebe:	1c43      	adds	r3, r0, #1
 8004ec0:	89a3      	ldrh	r3, [r4, #12]
 8004ec2:	bf15      	itete	ne
 8004ec4:	6560      	strne	r0, [r4, #84]	; 0x54
 8004ec6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004eca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004ece:	81a3      	strheq	r3, [r4, #12]
 8004ed0:	bf18      	it	ne
 8004ed2:	81a3      	strhne	r3, [r4, #12]
 8004ed4:	bd10      	pop	{r4, pc}

08004ed6 <__sclose>:
 8004ed6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004eda:	f000 b8a1 	b.w	8005020 <_close_r>

08004ede <__swbuf_r>:
 8004ede:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ee0:	460e      	mov	r6, r1
 8004ee2:	4614      	mov	r4, r2
 8004ee4:	4605      	mov	r5, r0
 8004ee6:	b118      	cbz	r0, 8004ef0 <__swbuf_r+0x12>
 8004ee8:	6a03      	ldr	r3, [r0, #32]
 8004eea:	b90b      	cbnz	r3, 8004ef0 <__swbuf_r+0x12>
 8004eec:	f7ff ff10 	bl	8004d10 <__sinit>
 8004ef0:	69a3      	ldr	r3, [r4, #24]
 8004ef2:	60a3      	str	r3, [r4, #8]
 8004ef4:	89a3      	ldrh	r3, [r4, #12]
 8004ef6:	071a      	lsls	r2, r3, #28
 8004ef8:	d525      	bpl.n	8004f46 <__swbuf_r+0x68>
 8004efa:	6923      	ldr	r3, [r4, #16]
 8004efc:	b31b      	cbz	r3, 8004f46 <__swbuf_r+0x68>
 8004efe:	6823      	ldr	r3, [r4, #0]
 8004f00:	6922      	ldr	r2, [r4, #16]
 8004f02:	1a98      	subs	r0, r3, r2
 8004f04:	6963      	ldr	r3, [r4, #20]
 8004f06:	b2f6      	uxtb	r6, r6
 8004f08:	4283      	cmp	r3, r0
 8004f0a:	4637      	mov	r7, r6
 8004f0c:	dc04      	bgt.n	8004f18 <__swbuf_r+0x3a>
 8004f0e:	4621      	mov	r1, r4
 8004f10:	4628      	mov	r0, r5
 8004f12:	f001 fdb9 	bl	8006a88 <_fflush_r>
 8004f16:	b9e0      	cbnz	r0, 8004f52 <__swbuf_r+0x74>
 8004f18:	68a3      	ldr	r3, [r4, #8]
 8004f1a:	3b01      	subs	r3, #1
 8004f1c:	60a3      	str	r3, [r4, #8]
 8004f1e:	6823      	ldr	r3, [r4, #0]
 8004f20:	1c5a      	adds	r2, r3, #1
 8004f22:	6022      	str	r2, [r4, #0]
 8004f24:	701e      	strb	r6, [r3, #0]
 8004f26:	6962      	ldr	r2, [r4, #20]
 8004f28:	1c43      	adds	r3, r0, #1
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d004      	beq.n	8004f38 <__swbuf_r+0x5a>
 8004f2e:	89a3      	ldrh	r3, [r4, #12]
 8004f30:	07db      	lsls	r3, r3, #31
 8004f32:	d506      	bpl.n	8004f42 <__swbuf_r+0x64>
 8004f34:	2e0a      	cmp	r6, #10
 8004f36:	d104      	bne.n	8004f42 <__swbuf_r+0x64>
 8004f38:	4621      	mov	r1, r4
 8004f3a:	4628      	mov	r0, r5
 8004f3c:	f001 fda4 	bl	8006a88 <_fflush_r>
 8004f40:	b938      	cbnz	r0, 8004f52 <__swbuf_r+0x74>
 8004f42:	4638      	mov	r0, r7
 8004f44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f46:	4621      	mov	r1, r4
 8004f48:	4628      	mov	r0, r5
 8004f4a:	f000 f805 	bl	8004f58 <__swsetup_r>
 8004f4e:	2800      	cmp	r0, #0
 8004f50:	d0d5      	beq.n	8004efe <__swbuf_r+0x20>
 8004f52:	f04f 37ff 	mov.w	r7, #4294967295
 8004f56:	e7f4      	b.n	8004f42 <__swbuf_r+0x64>

08004f58 <__swsetup_r>:
 8004f58:	b538      	push	{r3, r4, r5, lr}
 8004f5a:	4b2a      	ldr	r3, [pc, #168]	; (8005004 <__swsetup_r+0xac>)
 8004f5c:	4605      	mov	r5, r0
 8004f5e:	6818      	ldr	r0, [r3, #0]
 8004f60:	460c      	mov	r4, r1
 8004f62:	b118      	cbz	r0, 8004f6c <__swsetup_r+0x14>
 8004f64:	6a03      	ldr	r3, [r0, #32]
 8004f66:	b90b      	cbnz	r3, 8004f6c <__swsetup_r+0x14>
 8004f68:	f7ff fed2 	bl	8004d10 <__sinit>
 8004f6c:	89a3      	ldrh	r3, [r4, #12]
 8004f6e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004f72:	0718      	lsls	r0, r3, #28
 8004f74:	d422      	bmi.n	8004fbc <__swsetup_r+0x64>
 8004f76:	06d9      	lsls	r1, r3, #27
 8004f78:	d407      	bmi.n	8004f8a <__swsetup_r+0x32>
 8004f7a:	2309      	movs	r3, #9
 8004f7c:	602b      	str	r3, [r5, #0]
 8004f7e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004f82:	81a3      	strh	r3, [r4, #12]
 8004f84:	f04f 30ff 	mov.w	r0, #4294967295
 8004f88:	e034      	b.n	8004ff4 <__swsetup_r+0x9c>
 8004f8a:	0758      	lsls	r0, r3, #29
 8004f8c:	d512      	bpl.n	8004fb4 <__swsetup_r+0x5c>
 8004f8e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004f90:	b141      	cbz	r1, 8004fa4 <__swsetup_r+0x4c>
 8004f92:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004f96:	4299      	cmp	r1, r3
 8004f98:	d002      	beq.n	8004fa0 <__swsetup_r+0x48>
 8004f9a:	4628      	mov	r0, r5
 8004f9c:	f000 ff2e 	bl	8005dfc <_free_r>
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	6363      	str	r3, [r4, #52]	; 0x34
 8004fa4:	89a3      	ldrh	r3, [r4, #12]
 8004fa6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004faa:	81a3      	strh	r3, [r4, #12]
 8004fac:	2300      	movs	r3, #0
 8004fae:	6063      	str	r3, [r4, #4]
 8004fb0:	6923      	ldr	r3, [r4, #16]
 8004fb2:	6023      	str	r3, [r4, #0]
 8004fb4:	89a3      	ldrh	r3, [r4, #12]
 8004fb6:	f043 0308 	orr.w	r3, r3, #8
 8004fba:	81a3      	strh	r3, [r4, #12]
 8004fbc:	6923      	ldr	r3, [r4, #16]
 8004fbe:	b94b      	cbnz	r3, 8004fd4 <__swsetup_r+0x7c>
 8004fc0:	89a3      	ldrh	r3, [r4, #12]
 8004fc2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004fc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fca:	d003      	beq.n	8004fd4 <__swsetup_r+0x7c>
 8004fcc:	4621      	mov	r1, r4
 8004fce:	4628      	mov	r0, r5
 8004fd0:	f001 fda8 	bl	8006b24 <__smakebuf_r>
 8004fd4:	89a0      	ldrh	r0, [r4, #12]
 8004fd6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004fda:	f010 0301 	ands.w	r3, r0, #1
 8004fde:	d00a      	beq.n	8004ff6 <__swsetup_r+0x9e>
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	60a3      	str	r3, [r4, #8]
 8004fe4:	6963      	ldr	r3, [r4, #20]
 8004fe6:	425b      	negs	r3, r3
 8004fe8:	61a3      	str	r3, [r4, #24]
 8004fea:	6923      	ldr	r3, [r4, #16]
 8004fec:	b943      	cbnz	r3, 8005000 <__swsetup_r+0xa8>
 8004fee:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004ff2:	d1c4      	bne.n	8004f7e <__swsetup_r+0x26>
 8004ff4:	bd38      	pop	{r3, r4, r5, pc}
 8004ff6:	0781      	lsls	r1, r0, #30
 8004ff8:	bf58      	it	pl
 8004ffa:	6963      	ldrpl	r3, [r4, #20]
 8004ffc:	60a3      	str	r3, [r4, #8]
 8004ffe:	e7f4      	b.n	8004fea <__swsetup_r+0x92>
 8005000:	2000      	movs	r0, #0
 8005002:	e7f7      	b.n	8004ff4 <__swsetup_r+0x9c>
 8005004:	20000064 	.word	0x20000064

08005008 <memset>:
 8005008:	4402      	add	r2, r0
 800500a:	4603      	mov	r3, r0
 800500c:	4293      	cmp	r3, r2
 800500e:	d100      	bne.n	8005012 <memset+0xa>
 8005010:	4770      	bx	lr
 8005012:	f803 1b01 	strb.w	r1, [r3], #1
 8005016:	e7f9      	b.n	800500c <memset+0x4>

08005018 <_localeconv_r>:
 8005018:	4800      	ldr	r0, [pc, #0]	; (800501c <_localeconv_r+0x4>)
 800501a:	4770      	bx	lr
 800501c:	20000158 	.word	0x20000158

08005020 <_close_r>:
 8005020:	b538      	push	{r3, r4, r5, lr}
 8005022:	4d06      	ldr	r5, [pc, #24]	; (800503c <_close_r+0x1c>)
 8005024:	2300      	movs	r3, #0
 8005026:	4604      	mov	r4, r0
 8005028:	4608      	mov	r0, r1
 800502a:	602b      	str	r3, [r5, #0]
 800502c:	f7fc fb9f 	bl	800176e <_close>
 8005030:	1c43      	adds	r3, r0, #1
 8005032:	d102      	bne.n	800503a <_close_r+0x1a>
 8005034:	682b      	ldr	r3, [r5, #0]
 8005036:	b103      	cbz	r3, 800503a <_close_r+0x1a>
 8005038:	6023      	str	r3, [r4, #0]
 800503a:	bd38      	pop	{r3, r4, r5, pc}
 800503c:	200008e0 	.word	0x200008e0

08005040 <_lseek_r>:
 8005040:	b538      	push	{r3, r4, r5, lr}
 8005042:	4d07      	ldr	r5, [pc, #28]	; (8005060 <_lseek_r+0x20>)
 8005044:	4604      	mov	r4, r0
 8005046:	4608      	mov	r0, r1
 8005048:	4611      	mov	r1, r2
 800504a:	2200      	movs	r2, #0
 800504c:	602a      	str	r2, [r5, #0]
 800504e:	461a      	mov	r2, r3
 8005050:	f7fc fbb4 	bl	80017bc <_lseek>
 8005054:	1c43      	adds	r3, r0, #1
 8005056:	d102      	bne.n	800505e <_lseek_r+0x1e>
 8005058:	682b      	ldr	r3, [r5, #0]
 800505a:	b103      	cbz	r3, 800505e <_lseek_r+0x1e>
 800505c:	6023      	str	r3, [r4, #0]
 800505e:	bd38      	pop	{r3, r4, r5, pc}
 8005060:	200008e0 	.word	0x200008e0

08005064 <_read_r>:
 8005064:	b538      	push	{r3, r4, r5, lr}
 8005066:	4d07      	ldr	r5, [pc, #28]	; (8005084 <_read_r+0x20>)
 8005068:	4604      	mov	r4, r0
 800506a:	4608      	mov	r0, r1
 800506c:	4611      	mov	r1, r2
 800506e:	2200      	movs	r2, #0
 8005070:	602a      	str	r2, [r5, #0]
 8005072:	461a      	mov	r2, r3
 8005074:	f7fc fb5e 	bl	8001734 <_read>
 8005078:	1c43      	adds	r3, r0, #1
 800507a:	d102      	bne.n	8005082 <_read_r+0x1e>
 800507c:	682b      	ldr	r3, [r5, #0]
 800507e:	b103      	cbz	r3, 8005082 <_read_r+0x1e>
 8005080:	6023      	str	r3, [r4, #0]
 8005082:	bd38      	pop	{r3, r4, r5, pc}
 8005084:	200008e0 	.word	0x200008e0

08005088 <_write_r>:
 8005088:	b538      	push	{r3, r4, r5, lr}
 800508a:	4d07      	ldr	r5, [pc, #28]	; (80050a8 <_write_r+0x20>)
 800508c:	4604      	mov	r4, r0
 800508e:	4608      	mov	r0, r1
 8005090:	4611      	mov	r1, r2
 8005092:	2200      	movs	r2, #0
 8005094:	602a      	str	r2, [r5, #0]
 8005096:	461a      	mov	r2, r3
 8005098:	f7fc f904 	bl	80012a4 <_write>
 800509c:	1c43      	adds	r3, r0, #1
 800509e:	d102      	bne.n	80050a6 <_write_r+0x1e>
 80050a0:	682b      	ldr	r3, [r5, #0]
 80050a2:	b103      	cbz	r3, 80050a6 <_write_r+0x1e>
 80050a4:	6023      	str	r3, [r4, #0]
 80050a6:	bd38      	pop	{r3, r4, r5, pc}
 80050a8:	200008e0 	.word	0x200008e0

080050ac <__errno>:
 80050ac:	4b01      	ldr	r3, [pc, #4]	; (80050b4 <__errno+0x8>)
 80050ae:	6818      	ldr	r0, [r3, #0]
 80050b0:	4770      	bx	lr
 80050b2:	bf00      	nop
 80050b4:	20000064 	.word	0x20000064

080050b8 <__libc_init_array>:
 80050b8:	b570      	push	{r4, r5, r6, lr}
 80050ba:	4d0d      	ldr	r5, [pc, #52]	; (80050f0 <__libc_init_array+0x38>)
 80050bc:	4c0d      	ldr	r4, [pc, #52]	; (80050f4 <__libc_init_array+0x3c>)
 80050be:	1b64      	subs	r4, r4, r5
 80050c0:	10a4      	asrs	r4, r4, #2
 80050c2:	2600      	movs	r6, #0
 80050c4:	42a6      	cmp	r6, r4
 80050c6:	d109      	bne.n	80050dc <__libc_init_array+0x24>
 80050c8:	4d0b      	ldr	r5, [pc, #44]	; (80050f8 <__libc_init_array+0x40>)
 80050ca:	4c0c      	ldr	r4, [pc, #48]	; (80050fc <__libc_init_array+0x44>)
 80050cc:	f001 fe58 	bl	8006d80 <_init>
 80050d0:	1b64      	subs	r4, r4, r5
 80050d2:	10a4      	asrs	r4, r4, #2
 80050d4:	2600      	movs	r6, #0
 80050d6:	42a6      	cmp	r6, r4
 80050d8:	d105      	bne.n	80050e6 <__libc_init_array+0x2e>
 80050da:	bd70      	pop	{r4, r5, r6, pc}
 80050dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80050e0:	4798      	blx	r3
 80050e2:	3601      	adds	r6, #1
 80050e4:	e7ee      	b.n	80050c4 <__libc_init_array+0xc>
 80050e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80050ea:	4798      	blx	r3
 80050ec:	3601      	adds	r6, #1
 80050ee:	e7f2      	b.n	80050d6 <__libc_init_array+0x1e>
 80050f0:	08007164 	.word	0x08007164
 80050f4:	08007164 	.word	0x08007164
 80050f8:	08007164 	.word	0x08007164
 80050fc:	08007168 	.word	0x08007168

08005100 <__retarget_lock_init_recursive>:
 8005100:	4770      	bx	lr

08005102 <__retarget_lock_acquire_recursive>:
 8005102:	4770      	bx	lr

08005104 <__retarget_lock_release_recursive>:
 8005104:	4770      	bx	lr

08005106 <quorem>:
 8005106:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800510a:	6903      	ldr	r3, [r0, #16]
 800510c:	690c      	ldr	r4, [r1, #16]
 800510e:	42a3      	cmp	r3, r4
 8005110:	4607      	mov	r7, r0
 8005112:	db7e      	blt.n	8005212 <quorem+0x10c>
 8005114:	3c01      	subs	r4, #1
 8005116:	f101 0814 	add.w	r8, r1, #20
 800511a:	f100 0514 	add.w	r5, r0, #20
 800511e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005122:	9301      	str	r3, [sp, #4]
 8005124:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005128:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800512c:	3301      	adds	r3, #1
 800512e:	429a      	cmp	r2, r3
 8005130:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005134:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005138:	fbb2 f6f3 	udiv	r6, r2, r3
 800513c:	d331      	bcc.n	80051a2 <quorem+0x9c>
 800513e:	f04f 0e00 	mov.w	lr, #0
 8005142:	4640      	mov	r0, r8
 8005144:	46ac      	mov	ip, r5
 8005146:	46f2      	mov	sl, lr
 8005148:	f850 2b04 	ldr.w	r2, [r0], #4
 800514c:	b293      	uxth	r3, r2
 800514e:	fb06 e303 	mla	r3, r6, r3, lr
 8005152:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005156:	0c1a      	lsrs	r2, r3, #16
 8005158:	b29b      	uxth	r3, r3
 800515a:	ebaa 0303 	sub.w	r3, sl, r3
 800515e:	f8dc a000 	ldr.w	sl, [ip]
 8005162:	fa13 f38a 	uxtah	r3, r3, sl
 8005166:	fb06 220e 	mla	r2, r6, lr, r2
 800516a:	9300      	str	r3, [sp, #0]
 800516c:	9b00      	ldr	r3, [sp, #0]
 800516e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005172:	b292      	uxth	r2, r2
 8005174:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005178:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800517c:	f8bd 3000 	ldrh.w	r3, [sp]
 8005180:	4581      	cmp	r9, r0
 8005182:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005186:	f84c 3b04 	str.w	r3, [ip], #4
 800518a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800518e:	d2db      	bcs.n	8005148 <quorem+0x42>
 8005190:	f855 300b 	ldr.w	r3, [r5, fp]
 8005194:	b92b      	cbnz	r3, 80051a2 <quorem+0x9c>
 8005196:	9b01      	ldr	r3, [sp, #4]
 8005198:	3b04      	subs	r3, #4
 800519a:	429d      	cmp	r5, r3
 800519c:	461a      	mov	r2, r3
 800519e:	d32c      	bcc.n	80051fa <quorem+0xf4>
 80051a0:	613c      	str	r4, [r7, #16]
 80051a2:	4638      	mov	r0, r7
 80051a4:	f001 f9a6 	bl	80064f4 <__mcmp>
 80051a8:	2800      	cmp	r0, #0
 80051aa:	db22      	blt.n	80051f2 <quorem+0xec>
 80051ac:	3601      	adds	r6, #1
 80051ae:	4629      	mov	r1, r5
 80051b0:	2000      	movs	r0, #0
 80051b2:	f858 2b04 	ldr.w	r2, [r8], #4
 80051b6:	f8d1 c000 	ldr.w	ip, [r1]
 80051ba:	b293      	uxth	r3, r2
 80051bc:	1ac3      	subs	r3, r0, r3
 80051be:	0c12      	lsrs	r2, r2, #16
 80051c0:	fa13 f38c 	uxtah	r3, r3, ip
 80051c4:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80051c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80051d2:	45c1      	cmp	r9, r8
 80051d4:	f841 3b04 	str.w	r3, [r1], #4
 80051d8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80051dc:	d2e9      	bcs.n	80051b2 <quorem+0xac>
 80051de:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80051e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80051e6:	b922      	cbnz	r2, 80051f2 <quorem+0xec>
 80051e8:	3b04      	subs	r3, #4
 80051ea:	429d      	cmp	r5, r3
 80051ec:	461a      	mov	r2, r3
 80051ee:	d30a      	bcc.n	8005206 <quorem+0x100>
 80051f0:	613c      	str	r4, [r7, #16]
 80051f2:	4630      	mov	r0, r6
 80051f4:	b003      	add	sp, #12
 80051f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051fa:	6812      	ldr	r2, [r2, #0]
 80051fc:	3b04      	subs	r3, #4
 80051fe:	2a00      	cmp	r2, #0
 8005200:	d1ce      	bne.n	80051a0 <quorem+0x9a>
 8005202:	3c01      	subs	r4, #1
 8005204:	e7c9      	b.n	800519a <quorem+0x94>
 8005206:	6812      	ldr	r2, [r2, #0]
 8005208:	3b04      	subs	r3, #4
 800520a:	2a00      	cmp	r2, #0
 800520c:	d1f0      	bne.n	80051f0 <quorem+0xea>
 800520e:	3c01      	subs	r4, #1
 8005210:	e7eb      	b.n	80051ea <quorem+0xe4>
 8005212:	2000      	movs	r0, #0
 8005214:	e7ee      	b.n	80051f4 <quorem+0xee>
	...

08005218 <_dtoa_r>:
 8005218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800521c:	ed2d 8b04 	vpush	{d8-d9}
 8005220:	69c5      	ldr	r5, [r0, #28]
 8005222:	b093      	sub	sp, #76	; 0x4c
 8005224:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005228:	ec57 6b10 	vmov	r6, r7, d0
 800522c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005230:	9107      	str	r1, [sp, #28]
 8005232:	4604      	mov	r4, r0
 8005234:	920a      	str	r2, [sp, #40]	; 0x28
 8005236:	930d      	str	r3, [sp, #52]	; 0x34
 8005238:	b975      	cbnz	r5, 8005258 <_dtoa_r+0x40>
 800523a:	2010      	movs	r0, #16
 800523c:	f000 fe2a 	bl	8005e94 <malloc>
 8005240:	4602      	mov	r2, r0
 8005242:	61e0      	str	r0, [r4, #28]
 8005244:	b920      	cbnz	r0, 8005250 <_dtoa_r+0x38>
 8005246:	4bae      	ldr	r3, [pc, #696]	; (8005500 <_dtoa_r+0x2e8>)
 8005248:	21ef      	movs	r1, #239	; 0xef
 800524a:	48ae      	ldr	r0, [pc, #696]	; (8005504 <_dtoa_r+0x2ec>)
 800524c:	f001 fce6 	bl	8006c1c <__assert_func>
 8005250:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005254:	6005      	str	r5, [r0, #0]
 8005256:	60c5      	str	r5, [r0, #12]
 8005258:	69e3      	ldr	r3, [r4, #28]
 800525a:	6819      	ldr	r1, [r3, #0]
 800525c:	b151      	cbz	r1, 8005274 <_dtoa_r+0x5c>
 800525e:	685a      	ldr	r2, [r3, #4]
 8005260:	604a      	str	r2, [r1, #4]
 8005262:	2301      	movs	r3, #1
 8005264:	4093      	lsls	r3, r2
 8005266:	608b      	str	r3, [r1, #8]
 8005268:	4620      	mov	r0, r4
 800526a:	f000 ff07 	bl	800607c <_Bfree>
 800526e:	69e3      	ldr	r3, [r4, #28]
 8005270:	2200      	movs	r2, #0
 8005272:	601a      	str	r2, [r3, #0]
 8005274:	1e3b      	subs	r3, r7, #0
 8005276:	bfbb      	ittet	lt
 8005278:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800527c:	9303      	strlt	r3, [sp, #12]
 800527e:	2300      	movge	r3, #0
 8005280:	2201      	movlt	r2, #1
 8005282:	bfac      	ite	ge
 8005284:	f8c8 3000 	strge.w	r3, [r8]
 8005288:	f8c8 2000 	strlt.w	r2, [r8]
 800528c:	4b9e      	ldr	r3, [pc, #632]	; (8005508 <_dtoa_r+0x2f0>)
 800528e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005292:	ea33 0308 	bics.w	r3, r3, r8
 8005296:	d11b      	bne.n	80052d0 <_dtoa_r+0xb8>
 8005298:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800529a:	f242 730f 	movw	r3, #9999	; 0x270f
 800529e:	6013      	str	r3, [r2, #0]
 80052a0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80052a4:	4333      	orrs	r3, r6
 80052a6:	f000 8593 	beq.w	8005dd0 <_dtoa_r+0xbb8>
 80052aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80052ac:	b963      	cbnz	r3, 80052c8 <_dtoa_r+0xb0>
 80052ae:	4b97      	ldr	r3, [pc, #604]	; (800550c <_dtoa_r+0x2f4>)
 80052b0:	e027      	b.n	8005302 <_dtoa_r+0xea>
 80052b2:	4b97      	ldr	r3, [pc, #604]	; (8005510 <_dtoa_r+0x2f8>)
 80052b4:	9300      	str	r3, [sp, #0]
 80052b6:	3308      	adds	r3, #8
 80052b8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80052ba:	6013      	str	r3, [r2, #0]
 80052bc:	9800      	ldr	r0, [sp, #0]
 80052be:	b013      	add	sp, #76	; 0x4c
 80052c0:	ecbd 8b04 	vpop	{d8-d9}
 80052c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052c8:	4b90      	ldr	r3, [pc, #576]	; (800550c <_dtoa_r+0x2f4>)
 80052ca:	9300      	str	r3, [sp, #0]
 80052cc:	3303      	adds	r3, #3
 80052ce:	e7f3      	b.n	80052b8 <_dtoa_r+0xa0>
 80052d0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80052d4:	2200      	movs	r2, #0
 80052d6:	ec51 0b17 	vmov	r0, r1, d7
 80052da:	eeb0 8a47 	vmov.f32	s16, s14
 80052de:	eef0 8a67 	vmov.f32	s17, s15
 80052e2:	2300      	movs	r3, #0
 80052e4:	f7fb fc00 	bl	8000ae8 <__aeabi_dcmpeq>
 80052e8:	4681      	mov	r9, r0
 80052ea:	b160      	cbz	r0, 8005306 <_dtoa_r+0xee>
 80052ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80052ee:	2301      	movs	r3, #1
 80052f0:	6013      	str	r3, [r2, #0]
 80052f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	f000 8568 	beq.w	8005dca <_dtoa_r+0xbb2>
 80052fa:	4b86      	ldr	r3, [pc, #536]	; (8005514 <_dtoa_r+0x2fc>)
 80052fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80052fe:	6013      	str	r3, [r2, #0]
 8005300:	3b01      	subs	r3, #1
 8005302:	9300      	str	r3, [sp, #0]
 8005304:	e7da      	b.n	80052bc <_dtoa_r+0xa4>
 8005306:	aa10      	add	r2, sp, #64	; 0x40
 8005308:	a911      	add	r1, sp, #68	; 0x44
 800530a:	4620      	mov	r0, r4
 800530c:	eeb0 0a48 	vmov.f32	s0, s16
 8005310:	eef0 0a68 	vmov.f32	s1, s17
 8005314:	f001 f994 	bl	8006640 <__d2b>
 8005318:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800531c:	4682      	mov	sl, r0
 800531e:	2d00      	cmp	r5, #0
 8005320:	d07f      	beq.n	8005422 <_dtoa_r+0x20a>
 8005322:	ee18 3a90 	vmov	r3, s17
 8005326:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800532a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800532e:	ec51 0b18 	vmov	r0, r1, d8
 8005332:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005336:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800533a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800533e:	4619      	mov	r1, r3
 8005340:	2200      	movs	r2, #0
 8005342:	4b75      	ldr	r3, [pc, #468]	; (8005518 <_dtoa_r+0x300>)
 8005344:	f7fa ffb0 	bl	80002a8 <__aeabi_dsub>
 8005348:	a367      	add	r3, pc, #412	; (adr r3, 80054e8 <_dtoa_r+0x2d0>)
 800534a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800534e:	f7fb f963 	bl	8000618 <__aeabi_dmul>
 8005352:	a367      	add	r3, pc, #412	; (adr r3, 80054f0 <_dtoa_r+0x2d8>)
 8005354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005358:	f7fa ffa8 	bl	80002ac <__adddf3>
 800535c:	4606      	mov	r6, r0
 800535e:	4628      	mov	r0, r5
 8005360:	460f      	mov	r7, r1
 8005362:	f7fb f8ef 	bl	8000544 <__aeabi_i2d>
 8005366:	a364      	add	r3, pc, #400	; (adr r3, 80054f8 <_dtoa_r+0x2e0>)
 8005368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800536c:	f7fb f954 	bl	8000618 <__aeabi_dmul>
 8005370:	4602      	mov	r2, r0
 8005372:	460b      	mov	r3, r1
 8005374:	4630      	mov	r0, r6
 8005376:	4639      	mov	r1, r7
 8005378:	f7fa ff98 	bl	80002ac <__adddf3>
 800537c:	4606      	mov	r6, r0
 800537e:	460f      	mov	r7, r1
 8005380:	f7fb fbfa 	bl	8000b78 <__aeabi_d2iz>
 8005384:	2200      	movs	r2, #0
 8005386:	4683      	mov	fp, r0
 8005388:	2300      	movs	r3, #0
 800538a:	4630      	mov	r0, r6
 800538c:	4639      	mov	r1, r7
 800538e:	f7fb fbb5 	bl	8000afc <__aeabi_dcmplt>
 8005392:	b148      	cbz	r0, 80053a8 <_dtoa_r+0x190>
 8005394:	4658      	mov	r0, fp
 8005396:	f7fb f8d5 	bl	8000544 <__aeabi_i2d>
 800539a:	4632      	mov	r2, r6
 800539c:	463b      	mov	r3, r7
 800539e:	f7fb fba3 	bl	8000ae8 <__aeabi_dcmpeq>
 80053a2:	b908      	cbnz	r0, 80053a8 <_dtoa_r+0x190>
 80053a4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80053a8:	f1bb 0f16 	cmp.w	fp, #22
 80053ac:	d857      	bhi.n	800545e <_dtoa_r+0x246>
 80053ae:	4b5b      	ldr	r3, [pc, #364]	; (800551c <_dtoa_r+0x304>)
 80053b0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80053b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053b8:	ec51 0b18 	vmov	r0, r1, d8
 80053bc:	f7fb fb9e 	bl	8000afc <__aeabi_dcmplt>
 80053c0:	2800      	cmp	r0, #0
 80053c2:	d04e      	beq.n	8005462 <_dtoa_r+0x24a>
 80053c4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80053c8:	2300      	movs	r3, #0
 80053ca:	930c      	str	r3, [sp, #48]	; 0x30
 80053cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80053ce:	1b5b      	subs	r3, r3, r5
 80053d0:	1e5a      	subs	r2, r3, #1
 80053d2:	bf45      	ittet	mi
 80053d4:	f1c3 0301 	rsbmi	r3, r3, #1
 80053d8:	9305      	strmi	r3, [sp, #20]
 80053da:	2300      	movpl	r3, #0
 80053dc:	2300      	movmi	r3, #0
 80053de:	9206      	str	r2, [sp, #24]
 80053e0:	bf54      	ite	pl
 80053e2:	9305      	strpl	r3, [sp, #20]
 80053e4:	9306      	strmi	r3, [sp, #24]
 80053e6:	f1bb 0f00 	cmp.w	fp, #0
 80053ea:	db3c      	blt.n	8005466 <_dtoa_r+0x24e>
 80053ec:	9b06      	ldr	r3, [sp, #24]
 80053ee:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80053f2:	445b      	add	r3, fp
 80053f4:	9306      	str	r3, [sp, #24]
 80053f6:	2300      	movs	r3, #0
 80053f8:	9308      	str	r3, [sp, #32]
 80053fa:	9b07      	ldr	r3, [sp, #28]
 80053fc:	2b09      	cmp	r3, #9
 80053fe:	d868      	bhi.n	80054d2 <_dtoa_r+0x2ba>
 8005400:	2b05      	cmp	r3, #5
 8005402:	bfc4      	itt	gt
 8005404:	3b04      	subgt	r3, #4
 8005406:	9307      	strgt	r3, [sp, #28]
 8005408:	9b07      	ldr	r3, [sp, #28]
 800540a:	f1a3 0302 	sub.w	r3, r3, #2
 800540e:	bfcc      	ite	gt
 8005410:	2500      	movgt	r5, #0
 8005412:	2501      	movle	r5, #1
 8005414:	2b03      	cmp	r3, #3
 8005416:	f200 8085 	bhi.w	8005524 <_dtoa_r+0x30c>
 800541a:	e8df f003 	tbb	[pc, r3]
 800541e:	3b2e      	.short	0x3b2e
 8005420:	5839      	.short	0x5839
 8005422:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005426:	441d      	add	r5, r3
 8005428:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800542c:	2b20      	cmp	r3, #32
 800542e:	bfc1      	itttt	gt
 8005430:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005434:	fa08 f803 	lslgt.w	r8, r8, r3
 8005438:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800543c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005440:	bfd6      	itet	le
 8005442:	f1c3 0320 	rsble	r3, r3, #32
 8005446:	ea48 0003 	orrgt.w	r0, r8, r3
 800544a:	fa06 f003 	lslle.w	r0, r6, r3
 800544e:	f7fb f869 	bl	8000524 <__aeabi_ui2d>
 8005452:	2201      	movs	r2, #1
 8005454:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005458:	3d01      	subs	r5, #1
 800545a:	920e      	str	r2, [sp, #56]	; 0x38
 800545c:	e76f      	b.n	800533e <_dtoa_r+0x126>
 800545e:	2301      	movs	r3, #1
 8005460:	e7b3      	b.n	80053ca <_dtoa_r+0x1b2>
 8005462:	900c      	str	r0, [sp, #48]	; 0x30
 8005464:	e7b2      	b.n	80053cc <_dtoa_r+0x1b4>
 8005466:	9b05      	ldr	r3, [sp, #20]
 8005468:	eba3 030b 	sub.w	r3, r3, fp
 800546c:	9305      	str	r3, [sp, #20]
 800546e:	f1cb 0300 	rsb	r3, fp, #0
 8005472:	9308      	str	r3, [sp, #32]
 8005474:	2300      	movs	r3, #0
 8005476:	930b      	str	r3, [sp, #44]	; 0x2c
 8005478:	e7bf      	b.n	80053fa <_dtoa_r+0x1e2>
 800547a:	2300      	movs	r3, #0
 800547c:	9309      	str	r3, [sp, #36]	; 0x24
 800547e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005480:	2b00      	cmp	r3, #0
 8005482:	dc52      	bgt.n	800552a <_dtoa_r+0x312>
 8005484:	2301      	movs	r3, #1
 8005486:	9301      	str	r3, [sp, #4]
 8005488:	9304      	str	r3, [sp, #16]
 800548a:	461a      	mov	r2, r3
 800548c:	920a      	str	r2, [sp, #40]	; 0x28
 800548e:	e00b      	b.n	80054a8 <_dtoa_r+0x290>
 8005490:	2301      	movs	r3, #1
 8005492:	e7f3      	b.n	800547c <_dtoa_r+0x264>
 8005494:	2300      	movs	r3, #0
 8005496:	9309      	str	r3, [sp, #36]	; 0x24
 8005498:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800549a:	445b      	add	r3, fp
 800549c:	9301      	str	r3, [sp, #4]
 800549e:	3301      	adds	r3, #1
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	9304      	str	r3, [sp, #16]
 80054a4:	bfb8      	it	lt
 80054a6:	2301      	movlt	r3, #1
 80054a8:	69e0      	ldr	r0, [r4, #28]
 80054aa:	2100      	movs	r1, #0
 80054ac:	2204      	movs	r2, #4
 80054ae:	f102 0614 	add.w	r6, r2, #20
 80054b2:	429e      	cmp	r6, r3
 80054b4:	d93d      	bls.n	8005532 <_dtoa_r+0x31a>
 80054b6:	6041      	str	r1, [r0, #4]
 80054b8:	4620      	mov	r0, r4
 80054ba:	f000 fd9f 	bl	8005ffc <_Balloc>
 80054be:	9000      	str	r0, [sp, #0]
 80054c0:	2800      	cmp	r0, #0
 80054c2:	d139      	bne.n	8005538 <_dtoa_r+0x320>
 80054c4:	4b16      	ldr	r3, [pc, #88]	; (8005520 <_dtoa_r+0x308>)
 80054c6:	4602      	mov	r2, r0
 80054c8:	f240 11af 	movw	r1, #431	; 0x1af
 80054cc:	e6bd      	b.n	800524a <_dtoa_r+0x32>
 80054ce:	2301      	movs	r3, #1
 80054d0:	e7e1      	b.n	8005496 <_dtoa_r+0x27e>
 80054d2:	2501      	movs	r5, #1
 80054d4:	2300      	movs	r3, #0
 80054d6:	9307      	str	r3, [sp, #28]
 80054d8:	9509      	str	r5, [sp, #36]	; 0x24
 80054da:	f04f 33ff 	mov.w	r3, #4294967295
 80054de:	9301      	str	r3, [sp, #4]
 80054e0:	9304      	str	r3, [sp, #16]
 80054e2:	2200      	movs	r2, #0
 80054e4:	2312      	movs	r3, #18
 80054e6:	e7d1      	b.n	800548c <_dtoa_r+0x274>
 80054e8:	636f4361 	.word	0x636f4361
 80054ec:	3fd287a7 	.word	0x3fd287a7
 80054f0:	8b60c8b3 	.word	0x8b60c8b3
 80054f4:	3fc68a28 	.word	0x3fc68a28
 80054f8:	509f79fb 	.word	0x509f79fb
 80054fc:	3fd34413 	.word	0x3fd34413
 8005500:	08006e29 	.word	0x08006e29
 8005504:	08006e40 	.word	0x08006e40
 8005508:	7ff00000 	.word	0x7ff00000
 800550c:	08006e25 	.word	0x08006e25
 8005510:	08006e1c 	.word	0x08006e1c
 8005514:	08006df9 	.word	0x08006df9
 8005518:	3ff80000 	.word	0x3ff80000
 800551c:	08006f30 	.word	0x08006f30
 8005520:	08006e98 	.word	0x08006e98
 8005524:	2301      	movs	r3, #1
 8005526:	9309      	str	r3, [sp, #36]	; 0x24
 8005528:	e7d7      	b.n	80054da <_dtoa_r+0x2c2>
 800552a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800552c:	9301      	str	r3, [sp, #4]
 800552e:	9304      	str	r3, [sp, #16]
 8005530:	e7ba      	b.n	80054a8 <_dtoa_r+0x290>
 8005532:	3101      	adds	r1, #1
 8005534:	0052      	lsls	r2, r2, #1
 8005536:	e7ba      	b.n	80054ae <_dtoa_r+0x296>
 8005538:	69e3      	ldr	r3, [r4, #28]
 800553a:	9a00      	ldr	r2, [sp, #0]
 800553c:	601a      	str	r2, [r3, #0]
 800553e:	9b04      	ldr	r3, [sp, #16]
 8005540:	2b0e      	cmp	r3, #14
 8005542:	f200 80a8 	bhi.w	8005696 <_dtoa_r+0x47e>
 8005546:	2d00      	cmp	r5, #0
 8005548:	f000 80a5 	beq.w	8005696 <_dtoa_r+0x47e>
 800554c:	f1bb 0f00 	cmp.w	fp, #0
 8005550:	dd38      	ble.n	80055c4 <_dtoa_r+0x3ac>
 8005552:	4bc0      	ldr	r3, [pc, #768]	; (8005854 <_dtoa_r+0x63c>)
 8005554:	f00b 020f 	and.w	r2, fp, #15
 8005558:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800555c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005560:	e9d3 6700 	ldrd	r6, r7, [r3]
 8005564:	ea4f 182b 	mov.w	r8, fp, asr #4
 8005568:	d019      	beq.n	800559e <_dtoa_r+0x386>
 800556a:	4bbb      	ldr	r3, [pc, #748]	; (8005858 <_dtoa_r+0x640>)
 800556c:	ec51 0b18 	vmov	r0, r1, d8
 8005570:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005574:	f7fb f97a 	bl	800086c <__aeabi_ddiv>
 8005578:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800557c:	f008 080f 	and.w	r8, r8, #15
 8005580:	2503      	movs	r5, #3
 8005582:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8005858 <_dtoa_r+0x640>
 8005586:	f1b8 0f00 	cmp.w	r8, #0
 800558a:	d10a      	bne.n	80055a2 <_dtoa_r+0x38a>
 800558c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005590:	4632      	mov	r2, r6
 8005592:	463b      	mov	r3, r7
 8005594:	f7fb f96a 	bl	800086c <__aeabi_ddiv>
 8005598:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800559c:	e02b      	b.n	80055f6 <_dtoa_r+0x3de>
 800559e:	2502      	movs	r5, #2
 80055a0:	e7ef      	b.n	8005582 <_dtoa_r+0x36a>
 80055a2:	f018 0f01 	tst.w	r8, #1
 80055a6:	d008      	beq.n	80055ba <_dtoa_r+0x3a2>
 80055a8:	4630      	mov	r0, r6
 80055aa:	4639      	mov	r1, r7
 80055ac:	e9d9 2300 	ldrd	r2, r3, [r9]
 80055b0:	f7fb f832 	bl	8000618 <__aeabi_dmul>
 80055b4:	3501      	adds	r5, #1
 80055b6:	4606      	mov	r6, r0
 80055b8:	460f      	mov	r7, r1
 80055ba:	ea4f 0868 	mov.w	r8, r8, asr #1
 80055be:	f109 0908 	add.w	r9, r9, #8
 80055c2:	e7e0      	b.n	8005586 <_dtoa_r+0x36e>
 80055c4:	f000 809f 	beq.w	8005706 <_dtoa_r+0x4ee>
 80055c8:	f1cb 0600 	rsb	r6, fp, #0
 80055cc:	4ba1      	ldr	r3, [pc, #644]	; (8005854 <_dtoa_r+0x63c>)
 80055ce:	4fa2      	ldr	r7, [pc, #648]	; (8005858 <_dtoa_r+0x640>)
 80055d0:	f006 020f 	and.w	r2, r6, #15
 80055d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80055d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055dc:	ec51 0b18 	vmov	r0, r1, d8
 80055e0:	f7fb f81a 	bl	8000618 <__aeabi_dmul>
 80055e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80055e8:	1136      	asrs	r6, r6, #4
 80055ea:	2300      	movs	r3, #0
 80055ec:	2502      	movs	r5, #2
 80055ee:	2e00      	cmp	r6, #0
 80055f0:	d17e      	bne.n	80056f0 <_dtoa_r+0x4d8>
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d1d0      	bne.n	8005598 <_dtoa_r+0x380>
 80055f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80055f8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	f000 8084 	beq.w	800570a <_dtoa_r+0x4f2>
 8005602:	4b96      	ldr	r3, [pc, #600]	; (800585c <_dtoa_r+0x644>)
 8005604:	2200      	movs	r2, #0
 8005606:	4640      	mov	r0, r8
 8005608:	4649      	mov	r1, r9
 800560a:	f7fb fa77 	bl	8000afc <__aeabi_dcmplt>
 800560e:	2800      	cmp	r0, #0
 8005610:	d07b      	beq.n	800570a <_dtoa_r+0x4f2>
 8005612:	9b04      	ldr	r3, [sp, #16]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d078      	beq.n	800570a <_dtoa_r+0x4f2>
 8005618:	9b01      	ldr	r3, [sp, #4]
 800561a:	2b00      	cmp	r3, #0
 800561c:	dd39      	ble.n	8005692 <_dtoa_r+0x47a>
 800561e:	4b90      	ldr	r3, [pc, #576]	; (8005860 <_dtoa_r+0x648>)
 8005620:	2200      	movs	r2, #0
 8005622:	4640      	mov	r0, r8
 8005624:	4649      	mov	r1, r9
 8005626:	f7fa fff7 	bl	8000618 <__aeabi_dmul>
 800562a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800562e:	9e01      	ldr	r6, [sp, #4]
 8005630:	f10b 37ff 	add.w	r7, fp, #4294967295
 8005634:	3501      	adds	r5, #1
 8005636:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800563a:	4628      	mov	r0, r5
 800563c:	f7fa ff82 	bl	8000544 <__aeabi_i2d>
 8005640:	4642      	mov	r2, r8
 8005642:	464b      	mov	r3, r9
 8005644:	f7fa ffe8 	bl	8000618 <__aeabi_dmul>
 8005648:	4b86      	ldr	r3, [pc, #536]	; (8005864 <_dtoa_r+0x64c>)
 800564a:	2200      	movs	r2, #0
 800564c:	f7fa fe2e 	bl	80002ac <__adddf3>
 8005650:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005654:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005658:	9303      	str	r3, [sp, #12]
 800565a:	2e00      	cmp	r6, #0
 800565c:	d158      	bne.n	8005710 <_dtoa_r+0x4f8>
 800565e:	4b82      	ldr	r3, [pc, #520]	; (8005868 <_dtoa_r+0x650>)
 8005660:	2200      	movs	r2, #0
 8005662:	4640      	mov	r0, r8
 8005664:	4649      	mov	r1, r9
 8005666:	f7fa fe1f 	bl	80002a8 <__aeabi_dsub>
 800566a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800566e:	4680      	mov	r8, r0
 8005670:	4689      	mov	r9, r1
 8005672:	f7fb fa61 	bl	8000b38 <__aeabi_dcmpgt>
 8005676:	2800      	cmp	r0, #0
 8005678:	f040 8296 	bne.w	8005ba8 <_dtoa_r+0x990>
 800567c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005680:	4640      	mov	r0, r8
 8005682:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005686:	4649      	mov	r1, r9
 8005688:	f7fb fa38 	bl	8000afc <__aeabi_dcmplt>
 800568c:	2800      	cmp	r0, #0
 800568e:	f040 8289 	bne.w	8005ba4 <_dtoa_r+0x98c>
 8005692:	ed8d 8b02 	vstr	d8, [sp, #8]
 8005696:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005698:	2b00      	cmp	r3, #0
 800569a:	f2c0 814e 	blt.w	800593a <_dtoa_r+0x722>
 800569e:	f1bb 0f0e 	cmp.w	fp, #14
 80056a2:	f300 814a 	bgt.w	800593a <_dtoa_r+0x722>
 80056a6:	4b6b      	ldr	r3, [pc, #428]	; (8005854 <_dtoa_r+0x63c>)
 80056a8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80056ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 80056b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	f280 80dc 	bge.w	8005870 <_dtoa_r+0x658>
 80056b8:	9b04      	ldr	r3, [sp, #16]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	f300 80d8 	bgt.w	8005870 <_dtoa_r+0x658>
 80056c0:	f040 826f 	bne.w	8005ba2 <_dtoa_r+0x98a>
 80056c4:	4b68      	ldr	r3, [pc, #416]	; (8005868 <_dtoa_r+0x650>)
 80056c6:	2200      	movs	r2, #0
 80056c8:	4640      	mov	r0, r8
 80056ca:	4649      	mov	r1, r9
 80056cc:	f7fa ffa4 	bl	8000618 <__aeabi_dmul>
 80056d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80056d4:	f7fb fa26 	bl	8000b24 <__aeabi_dcmpge>
 80056d8:	9e04      	ldr	r6, [sp, #16]
 80056da:	4637      	mov	r7, r6
 80056dc:	2800      	cmp	r0, #0
 80056de:	f040 8245 	bne.w	8005b6c <_dtoa_r+0x954>
 80056e2:	9d00      	ldr	r5, [sp, #0]
 80056e4:	2331      	movs	r3, #49	; 0x31
 80056e6:	f805 3b01 	strb.w	r3, [r5], #1
 80056ea:	f10b 0b01 	add.w	fp, fp, #1
 80056ee:	e241      	b.n	8005b74 <_dtoa_r+0x95c>
 80056f0:	07f2      	lsls	r2, r6, #31
 80056f2:	d505      	bpl.n	8005700 <_dtoa_r+0x4e8>
 80056f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056f8:	f7fa ff8e 	bl	8000618 <__aeabi_dmul>
 80056fc:	3501      	adds	r5, #1
 80056fe:	2301      	movs	r3, #1
 8005700:	1076      	asrs	r6, r6, #1
 8005702:	3708      	adds	r7, #8
 8005704:	e773      	b.n	80055ee <_dtoa_r+0x3d6>
 8005706:	2502      	movs	r5, #2
 8005708:	e775      	b.n	80055f6 <_dtoa_r+0x3de>
 800570a:	9e04      	ldr	r6, [sp, #16]
 800570c:	465f      	mov	r7, fp
 800570e:	e792      	b.n	8005636 <_dtoa_r+0x41e>
 8005710:	9900      	ldr	r1, [sp, #0]
 8005712:	4b50      	ldr	r3, [pc, #320]	; (8005854 <_dtoa_r+0x63c>)
 8005714:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005718:	4431      	add	r1, r6
 800571a:	9102      	str	r1, [sp, #8]
 800571c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800571e:	eeb0 9a47 	vmov.f32	s18, s14
 8005722:	eef0 9a67 	vmov.f32	s19, s15
 8005726:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800572a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800572e:	2900      	cmp	r1, #0
 8005730:	d044      	beq.n	80057bc <_dtoa_r+0x5a4>
 8005732:	494e      	ldr	r1, [pc, #312]	; (800586c <_dtoa_r+0x654>)
 8005734:	2000      	movs	r0, #0
 8005736:	f7fb f899 	bl	800086c <__aeabi_ddiv>
 800573a:	ec53 2b19 	vmov	r2, r3, d9
 800573e:	f7fa fdb3 	bl	80002a8 <__aeabi_dsub>
 8005742:	9d00      	ldr	r5, [sp, #0]
 8005744:	ec41 0b19 	vmov	d9, r0, r1
 8005748:	4649      	mov	r1, r9
 800574a:	4640      	mov	r0, r8
 800574c:	f7fb fa14 	bl	8000b78 <__aeabi_d2iz>
 8005750:	4606      	mov	r6, r0
 8005752:	f7fa fef7 	bl	8000544 <__aeabi_i2d>
 8005756:	4602      	mov	r2, r0
 8005758:	460b      	mov	r3, r1
 800575a:	4640      	mov	r0, r8
 800575c:	4649      	mov	r1, r9
 800575e:	f7fa fda3 	bl	80002a8 <__aeabi_dsub>
 8005762:	3630      	adds	r6, #48	; 0x30
 8005764:	f805 6b01 	strb.w	r6, [r5], #1
 8005768:	ec53 2b19 	vmov	r2, r3, d9
 800576c:	4680      	mov	r8, r0
 800576e:	4689      	mov	r9, r1
 8005770:	f7fb f9c4 	bl	8000afc <__aeabi_dcmplt>
 8005774:	2800      	cmp	r0, #0
 8005776:	d164      	bne.n	8005842 <_dtoa_r+0x62a>
 8005778:	4642      	mov	r2, r8
 800577a:	464b      	mov	r3, r9
 800577c:	4937      	ldr	r1, [pc, #220]	; (800585c <_dtoa_r+0x644>)
 800577e:	2000      	movs	r0, #0
 8005780:	f7fa fd92 	bl	80002a8 <__aeabi_dsub>
 8005784:	ec53 2b19 	vmov	r2, r3, d9
 8005788:	f7fb f9b8 	bl	8000afc <__aeabi_dcmplt>
 800578c:	2800      	cmp	r0, #0
 800578e:	f040 80b6 	bne.w	80058fe <_dtoa_r+0x6e6>
 8005792:	9b02      	ldr	r3, [sp, #8]
 8005794:	429d      	cmp	r5, r3
 8005796:	f43f af7c 	beq.w	8005692 <_dtoa_r+0x47a>
 800579a:	4b31      	ldr	r3, [pc, #196]	; (8005860 <_dtoa_r+0x648>)
 800579c:	ec51 0b19 	vmov	r0, r1, d9
 80057a0:	2200      	movs	r2, #0
 80057a2:	f7fa ff39 	bl	8000618 <__aeabi_dmul>
 80057a6:	4b2e      	ldr	r3, [pc, #184]	; (8005860 <_dtoa_r+0x648>)
 80057a8:	ec41 0b19 	vmov	d9, r0, r1
 80057ac:	2200      	movs	r2, #0
 80057ae:	4640      	mov	r0, r8
 80057b0:	4649      	mov	r1, r9
 80057b2:	f7fa ff31 	bl	8000618 <__aeabi_dmul>
 80057b6:	4680      	mov	r8, r0
 80057b8:	4689      	mov	r9, r1
 80057ba:	e7c5      	b.n	8005748 <_dtoa_r+0x530>
 80057bc:	ec51 0b17 	vmov	r0, r1, d7
 80057c0:	f7fa ff2a 	bl	8000618 <__aeabi_dmul>
 80057c4:	9b02      	ldr	r3, [sp, #8]
 80057c6:	9d00      	ldr	r5, [sp, #0]
 80057c8:	930f      	str	r3, [sp, #60]	; 0x3c
 80057ca:	ec41 0b19 	vmov	d9, r0, r1
 80057ce:	4649      	mov	r1, r9
 80057d0:	4640      	mov	r0, r8
 80057d2:	f7fb f9d1 	bl	8000b78 <__aeabi_d2iz>
 80057d6:	4606      	mov	r6, r0
 80057d8:	f7fa feb4 	bl	8000544 <__aeabi_i2d>
 80057dc:	3630      	adds	r6, #48	; 0x30
 80057de:	4602      	mov	r2, r0
 80057e0:	460b      	mov	r3, r1
 80057e2:	4640      	mov	r0, r8
 80057e4:	4649      	mov	r1, r9
 80057e6:	f7fa fd5f 	bl	80002a8 <__aeabi_dsub>
 80057ea:	f805 6b01 	strb.w	r6, [r5], #1
 80057ee:	9b02      	ldr	r3, [sp, #8]
 80057f0:	429d      	cmp	r5, r3
 80057f2:	4680      	mov	r8, r0
 80057f4:	4689      	mov	r9, r1
 80057f6:	f04f 0200 	mov.w	r2, #0
 80057fa:	d124      	bne.n	8005846 <_dtoa_r+0x62e>
 80057fc:	4b1b      	ldr	r3, [pc, #108]	; (800586c <_dtoa_r+0x654>)
 80057fe:	ec51 0b19 	vmov	r0, r1, d9
 8005802:	f7fa fd53 	bl	80002ac <__adddf3>
 8005806:	4602      	mov	r2, r0
 8005808:	460b      	mov	r3, r1
 800580a:	4640      	mov	r0, r8
 800580c:	4649      	mov	r1, r9
 800580e:	f7fb f993 	bl	8000b38 <__aeabi_dcmpgt>
 8005812:	2800      	cmp	r0, #0
 8005814:	d173      	bne.n	80058fe <_dtoa_r+0x6e6>
 8005816:	ec53 2b19 	vmov	r2, r3, d9
 800581a:	4914      	ldr	r1, [pc, #80]	; (800586c <_dtoa_r+0x654>)
 800581c:	2000      	movs	r0, #0
 800581e:	f7fa fd43 	bl	80002a8 <__aeabi_dsub>
 8005822:	4602      	mov	r2, r0
 8005824:	460b      	mov	r3, r1
 8005826:	4640      	mov	r0, r8
 8005828:	4649      	mov	r1, r9
 800582a:	f7fb f967 	bl	8000afc <__aeabi_dcmplt>
 800582e:	2800      	cmp	r0, #0
 8005830:	f43f af2f 	beq.w	8005692 <_dtoa_r+0x47a>
 8005834:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005836:	1e6b      	subs	r3, r5, #1
 8005838:	930f      	str	r3, [sp, #60]	; 0x3c
 800583a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800583e:	2b30      	cmp	r3, #48	; 0x30
 8005840:	d0f8      	beq.n	8005834 <_dtoa_r+0x61c>
 8005842:	46bb      	mov	fp, r7
 8005844:	e04a      	b.n	80058dc <_dtoa_r+0x6c4>
 8005846:	4b06      	ldr	r3, [pc, #24]	; (8005860 <_dtoa_r+0x648>)
 8005848:	f7fa fee6 	bl	8000618 <__aeabi_dmul>
 800584c:	4680      	mov	r8, r0
 800584e:	4689      	mov	r9, r1
 8005850:	e7bd      	b.n	80057ce <_dtoa_r+0x5b6>
 8005852:	bf00      	nop
 8005854:	08006f30 	.word	0x08006f30
 8005858:	08006f08 	.word	0x08006f08
 800585c:	3ff00000 	.word	0x3ff00000
 8005860:	40240000 	.word	0x40240000
 8005864:	401c0000 	.word	0x401c0000
 8005868:	40140000 	.word	0x40140000
 800586c:	3fe00000 	.word	0x3fe00000
 8005870:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005874:	9d00      	ldr	r5, [sp, #0]
 8005876:	4642      	mov	r2, r8
 8005878:	464b      	mov	r3, r9
 800587a:	4630      	mov	r0, r6
 800587c:	4639      	mov	r1, r7
 800587e:	f7fa fff5 	bl	800086c <__aeabi_ddiv>
 8005882:	f7fb f979 	bl	8000b78 <__aeabi_d2iz>
 8005886:	9001      	str	r0, [sp, #4]
 8005888:	f7fa fe5c 	bl	8000544 <__aeabi_i2d>
 800588c:	4642      	mov	r2, r8
 800588e:	464b      	mov	r3, r9
 8005890:	f7fa fec2 	bl	8000618 <__aeabi_dmul>
 8005894:	4602      	mov	r2, r0
 8005896:	460b      	mov	r3, r1
 8005898:	4630      	mov	r0, r6
 800589a:	4639      	mov	r1, r7
 800589c:	f7fa fd04 	bl	80002a8 <__aeabi_dsub>
 80058a0:	9e01      	ldr	r6, [sp, #4]
 80058a2:	9f04      	ldr	r7, [sp, #16]
 80058a4:	3630      	adds	r6, #48	; 0x30
 80058a6:	f805 6b01 	strb.w	r6, [r5], #1
 80058aa:	9e00      	ldr	r6, [sp, #0]
 80058ac:	1bae      	subs	r6, r5, r6
 80058ae:	42b7      	cmp	r7, r6
 80058b0:	4602      	mov	r2, r0
 80058b2:	460b      	mov	r3, r1
 80058b4:	d134      	bne.n	8005920 <_dtoa_r+0x708>
 80058b6:	f7fa fcf9 	bl	80002ac <__adddf3>
 80058ba:	4642      	mov	r2, r8
 80058bc:	464b      	mov	r3, r9
 80058be:	4606      	mov	r6, r0
 80058c0:	460f      	mov	r7, r1
 80058c2:	f7fb f939 	bl	8000b38 <__aeabi_dcmpgt>
 80058c6:	b9c8      	cbnz	r0, 80058fc <_dtoa_r+0x6e4>
 80058c8:	4642      	mov	r2, r8
 80058ca:	464b      	mov	r3, r9
 80058cc:	4630      	mov	r0, r6
 80058ce:	4639      	mov	r1, r7
 80058d0:	f7fb f90a 	bl	8000ae8 <__aeabi_dcmpeq>
 80058d4:	b110      	cbz	r0, 80058dc <_dtoa_r+0x6c4>
 80058d6:	9b01      	ldr	r3, [sp, #4]
 80058d8:	07db      	lsls	r3, r3, #31
 80058da:	d40f      	bmi.n	80058fc <_dtoa_r+0x6e4>
 80058dc:	4651      	mov	r1, sl
 80058de:	4620      	mov	r0, r4
 80058e0:	f000 fbcc 	bl	800607c <_Bfree>
 80058e4:	2300      	movs	r3, #0
 80058e6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80058e8:	702b      	strb	r3, [r5, #0]
 80058ea:	f10b 0301 	add.w	r3, fp, #1
 80058ee:	6013      	str	r3, [r2, #0]
 80058f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	f43f ace2 	beq.w	80052bc <_dtoa_r+0xa4>
 80058f8:	601d      	str	r5, [r3, #0]
 80058fa:	e4df      	b.n	80052bc <_dtoa_r+0xa4>
 80058fc:	465f      	mov	r7, fp
 80058fe:	462b      	mov	r3, r5
 8005900:	461d      	mov	r5, r3
 8005902:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005906:	2a39      	cmp	r2, #57	; 0x39
 8005908:	d106      	bne.n	8005918 <_dtoa_r+0x700>
 800590a:	9a00      	ldr	r2, [sp, #0]
 800590c:	429a      	cmp	r2, r3
 800590e:	d1f7      	bne.n	8005900 <_dtoa_r+0x6e8>
 8005910:	9900      	ldr	r1, [sp, #0]
 8005912:	2230      	movs	r2, #48	; 0x30
 8005914:	3701      	adds	r7, #1
 8005916:	700a      	strb	r2, [r1, #0]
 8005918:	781a      	ldrb	r2, [r3, #0]
 800591a:	3201      	adds	r2, #1
 800591c:	701a      	strb	r2, [r3, #0]
 800591e:	e790      	b.n	8005842 <_dtoa_r+0x62a>
 8005920:	4ba3      	ldr	r3, [pc, #652]	; (8005bb0 <_dtoa_r+0x998>)
 8005922:	2200      	movs	r2, #0
 8005924:	f7fa fe78 	bl	8000618 <__aeabi_dmul>
 8005928:	2200      	movs	r2, #0
 800592a:	2300      	movs	r3, #0
 800592c:	4606      	mov	r6, r0
 800592e:	460f      	mov	r7, r1
 8005930:	f7fb f8da 	bl	8000ae8 <__aeabi_dcmpeq>
 8005934:	2800      	cmp	r0, #0
 8005936:	d09e      	beq.n	8005876 <_dtoa_r+0x65e>
 8005938:	e7d0      	b.n	80058dc <_dtoa_r+0x6c4>
 800593a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800593c:	2a00      	cmp	r2, #0
 800593e:	f000 80ca 	beq.w	8005ad6 <_dtoa_r+0x8be>
 8005942:	9a07      	ldr	r2, [sp, #28]
 8005944:	2a01      	cmp	r2, #1
 8005946:	f300 80ad 	bgt.w	8005aa4 <_dtoa_r+0x88c>
 800594a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800594c:	2a00      	cmp	r2, #0
 800594e:	f000 80a5 	beq.w	8005a9c <_dtoa_r+0x884>
 8005952:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005956:	9e08      	ldr	r6, [sp, #32]
 8005958:	9d05      	ldr	r5, [sp, #20]
 800595a:	9a05      	ldr	r2, [sp, #20]
 800595c:	441a      	add	r2, r3
 800595e:	9205      	str	r2, [sp, #20]
 8005960:	9a06      	ldr	r2, [sp, #24]
 8005962:	2101      	movs	r1, #1
 8005964:	441a      	add	r2, r3
 8005966:	4620      	mov	r0, r4
 8005968:	9206      	str	r2, [sp, #24]
 800596a:	f000 fc3d 	bl	80061e8 <__i2b>
 800596e:	4607      	mov	r7, r0
 8005970:	b165      	cbz	r5, 800598c <_dtoa_r+0x774>
 8005972:	9b06      	ldr	r3, [sp, #24]
 8005974:	2b00      	cmp	r3, #0
 8005976:	dd09      	ble.n	800598c <_dtoa_r+0x774>
 8005978:	42ab      	cmp	r3, r5
 800597a:	9a05      	ldr	r2, [sp, #20]
 800597c:	bfa8      	it	ge
 800597e:	462b      	movge	r3, r5
 8005980:	1ad2      	subs	r2, r2, r3
 8005982:	9205      	str	r2, [sp, #20]
 8005984:	9a06      	ldr	r2, [sp, #24]
 8005986:	1aed      	subs	r5, r5, r3
 8005988:	1ad3      	subs	r3, r2, r3
 800598a:	9306      	str	r3, [sp, #24]
 800598c:	9b08      	ldr	r3, [sp, #32]
 800598e:	b1f3      	cbz	r3, 80059ce <_dtoa_r+0x7b6>
 8005990:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005992:	2b00      	cmp	r3, #0
 8005994:	f000 80a3 	beq.w	8005ade <_dtoa_r+0x8c6>
 8005998:	2e00      	cmp	r6, #0
 800599a:	dd10      	ble.n	80059be <_dtoa_r+0x7a6>
 800599c:	4639      	mov	r1, r7
 800599e:	4632      	mov	r2, r6
 80059a0:	4620      	mov	r0, r4
 80059a2:	f000 fce1 	bl	8006368 <__pow5mult>
 80059a6:	4652      	mov	r2, sl
 80059a8:	4601      	mov	r1, r0
 80059aa:	4607      	mov	r7, r0
 80059ac:	4620      	mov	r0, r4
 80059ae:	f000 fc31 	bl	8006214 <__multiply>
 80059b2:	4651      	mov	r1, sl
 80059b4:	4680      	mov	r8, r0
 80059b6:	4620      	mov	r0, r4
 80059b8:	f000 fb60 	bl	800607c <_Bfree>
 80059bc:	46c2      	mov	sl, r8
 80059be:	9b08      	ldr	r3, [sp, #32]
 80059c0:	1b9a      	subs	r2, r3, r6
 80059c2:	d004      	beq.n	80059ce <_dtoa_r+0x7b6>
 80059c4:	4651      	mov	r1, sl
 80059c6:	4620      	mov	r0, r4
 80059c8:	f000 fcce 	bl	8006368 <__pow5mult>
 80059cc:	4682      	mov	sl, r0
 80059ce:	2101      	movs	r1, #1
 80059d0:	4620      	mov	r0, r4
 80059d2:	f000 fc09 	bl	80061e8 <__i2b>
 80059d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80059d8:	2b00      	cmp	r3, #0
 80059da:	4606      	mov	r6, r0
 80059dc:	f340 8081 	ble.w	8005ae2 <_dtoa_r+0x8ca>
 80059e0:	461a      	mov	r2, r3
 80059e2:	4601      	mov	r1, r0
 80059e4:	4620      	mov	r0, r4
 80059e6:	f000 fcbf 	bl	8006368 <__pow5mult>
 80059ea:	9b07      	ldr	r3, [sp, #28]
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	4606      	mov	r6, r0
 80059f0:	dd7a      	ble.n	8005ae8 <_dtoa_r+0x8d0>
 80059f2:	f04f 0800 	mov.w	r8, #0
 80059f6:	6933      	ldr	r3, [r6, #16]
 80059f8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80059fc:	6918      	ldr	r0, [r3, #16]
 80059fe:	f000 fba5 	bl	800614c <__hi0bits>
 8005a02:	f1c0 0020 	rsb	r0, r0, #32
 8005a06:	9b06      	ldr	r3, [sp, #24]
 8005a08:	4418      	add	r0, r3
 8005a0a:	f010 001f 	ands.w	r0, r0, #31
 8005a0e:	f000 8094 	beq.w	8005b3a <_dtoa_r+0x922>
 8005a12:	f1c0 0320 	rsb	r3, r0, #32
 8005a16:	2b04      	cmp	r3, #4
 8005a18:	f340 8085 	ble.w	8005b26 <_dtoa_r+0x90e>
 8005a1c:	9b05      	ldr	r3, [sp, #20]
 8005a1e:	f1c0 001c 	rsb	r0, r0, #28
 8005a22:	4403      	add	r3, r0
 8005a24:	9305      	str	r3, [sp, #20]
 8005a26:	9b06      	ldr	r3, [sp, #24]
 8005a28:	4403      	add	r3, r0
 8005a2a:	4405      	add	r5, r0
 8005a2c:	9306      	str	r3, [sp, #24]
 8005a2e:	9b05      	ldr	r3, [sp, #20]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	dd05      	ble.n	8005a40 <_dtoa_r+0x828>
 8005a34:	4651      	mov	r1, sl
 8005a36:	461a      	mov	r2, r3
 8005a38:	4620      	mov	r0, r4
 8005a3a:	f000 fcef 	bl	800641c <__lshift>
 8005a3e:	4682      	mov	sl, r0
 8005a40:	9b06      	ldr	r3, [sp, #24]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	dd05      	ble.n	8005a52 <_dtoa_r+0x83a>
 8005a46:	4631      	mov	r1, r6
 8005a48:	461a      	mov	r2, r3
 8005a4a:	4620      	mov	r0, r4
 8005a4c:	f000 fce6 	bl	800641c <__lshift>
 8005a50:	4606      	mov	r6, r0
 8005a52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d072      	beq.n	8005b3e <_dtoa_r+0x926>
 8005a58:	4631      	mov	r1, r6
 8005a5a:	4650      	mov	r0, sl
 8005a5c:	f000 fd4a 	bl	80064f4 <__mcmp>
 8005a60:	2800      	cmp	r0, #0
 8005a62:	da6c      	bge.n	8005b3e <_dtoa_r+0x926>
 8005a64:	2300      	movs	r3, #0
 8005a66:	4651      	mov	r1, sl
 8005a68:	220a      	movs	r2, #10
 8005a6a:	4620      	mov	r0, r4
 8005a6c:	f000 fb28 	bl	80060c0 <__multadd>
 8005a70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a72:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005a76:	4682      	mov	sl, r0
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	f000 81b0 	beq.w	8005dde <_dtoa_r+0xbc6>
 8005a7e:	2300      	movs	r3, #0
 8005a80:	4639      	mov	r1, r7
 8005a82:	220a      	movs	r2, #10
 8005a84:	4620      	mov	r0, r4
 8005a86:	f000 fb1b 	bl	80060c0 <__multadd>
 8005a8a:	9b01      	ldr	r3, [sp, #4]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	4607      	mov	r7, r0
 8005a90:	f300 8096 	bgt.w	8005bc0 <_dtoa_r+0x9a8>
 8005a94:	9b07      	ldr	r3, [sp, #28]
 8005a96:	2b02      	cmp	r3, #2
 8005a98:	dc59      	bgt.n	8005b4e <_dtoa_r+0x936>
 8005a9a:	e091      	b.n	8005bc0 <_dtoa_r+0x9a8>
 8005a9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005a9e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005aa2:	e758      	b.n	8005956 <_dtoa_r+0x73e>
 8005aa4:	9b04      	ldr	r3, [sp, #16]
 8005aa6:	1e5e      	subs	r6, r3, #1
 8005aa8:	9b08      	ldr	r3, [sp, #32]
 8005aaa:	42b3      	cmp	r3, r6
 8005aac:	bfbf      	itttt	lt
 8005aae:	9b08      	ldrlt	r3, [sp, #32]
 8005ab0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8005ab2:	9608      	strlt	r6, [sp, #32]
 8005ab4:	1af3      	sublt	r3, r6, r3
 8005ab6:	bfb4      	ite	lt
 8005ab8:	18d2      	addlt	r2, r2, r3
 8005aba:	1b9e      	subge	r6, r3, r6
 8005abc:	9b04      	ldr	r3, [sp, #16]
 8005abe:	bfbc      	itt	lt
 8005ac0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8005ac2:	2600      	movlt	r6, #0
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	bfb7      	itett	lt
 8005ac8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8005acc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8005ad0:	1a9d      	sublt	r5, r3, r2
 8005ad2:	2300      	movlt	r3, #0
 8005ad4:	e741      	b.n	800595a <_dtoa_r+0x742>
 8005ad6:	9e08      	ldr	r6, [sp, #32]
 8005ad8:	9d05      	ldr	r5, [sp, #20]
 8005ada:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005adc:	e748      	b.n	8005970 <_dtoa_r+0x758>
 8005ade:	9a08      	ldr	r2, [sp, #32]
 8005ae0:	e770      	b.n	80059c4 <_dtoa_r+0x7ac>
 8005ae2:	9b07      	ldr	r3, [sp, #28]
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	dc19      	bgt.n	8005b1c <_dtoa_r+0x904>
 8005ae8:	9b02      	ldr	r3, [sp, #8]
 8005aea:	b9bb      	cbnz	r3, 8005b1c <_dtoa_r+0x904>
 8005aec:	9b03      	ldr	r3, [sp, #12]
 8005aee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005af2:	b99b      	cbnz	r3, 8005b1c <_dtoa_r+0x904>
 8005af4:	9b03      	ldr	r3, [sp, #12]
 8005af6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005afa:	0d1b      	lsrs	r3, r3, #20
 8005afc:	051b      	lsls	r3, r3, #20
 8005afe:	b183      	cbz	r3, 8005b22 <_dtoa_r+0x90a>
 8005b00:	9b05      	ldr	r3, [sp, #20]
 8005b02:	3301      	adds	r3, #1
 8005b04:	9305      	str	r3, [sp, #20]
 8005b06:	9b06      	ldr	r3, [sp, #24]
 8005b08:	3301      	adds	r3, #1
 8005b0a:	9306      	str	r3, [sp, #24]
 8005b0c:	f04f 0801 	mov.w	r8, #1
 8005b10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	f47f af6f 	bne.w	80059f6 <_dtoa_r+0x7de>
 8005b18:	2001      	movs	r0, #1
 8005b1a:	e774      	b.n	8005a06 <_dtoa_r+0x7ee>
 8005b1c:	f04f 0800 	mov.w	r8, #0
 8005b20:	e7f6      	b.n	8005b10 <_dtoa_r+0x8f8>
 8005b22:	4698      	mov	r8, r3
 8005b24:	e7f4      	b.n	8005b10 <_dtoa_r+0x8f8>
 8005b26:	d082      	beq.n	8005a2e <_dtoa_r+0x816>
 8005b28:	9a05      	ldr	r2, [sp, #20]
 8005b2a:	331c      	adds	r3, #28
 8005b2c:	441a      	add	r2, r3
 8005b2e:	9205      	str	r2, [sp, #20]
 8005b30:	9a06      	ldr	r2, [sp, #24]
 8005b32:	441a      	add	r2, r3
 8005b34:	441d      	add	r5, r3
 8005b36:	9206      	str	r2, [sp, #24]
 8005b38:	e779      	b.n	8005a2e <_dtoa_r+0x816>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	e7f4      	b.n	8005b28 <_dtoa_r+0x910>
 8005b3e:	9b04      	ldr	r3, [sp, #16]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	dc37      	bgt.n	8005bb4 <_dtoa_r+0x99c>
 8005b44:	9b07      	ldr	r3, [sp, #28]
 8005b46:	2b02      	cmp	r3, #2
 8005b48:	dd34      	ble.n	8005bb4 <_dtoa_r+0x99c>
 8005b4a:	9b04      	ldr	r3, [sp, #16]
 8005b4c:	9301      	str	r3, [sp, #4]
 8005b4e:	9b01      	ldr	r3, [sp, #4]
 8005b50:	b963      	cbnz	r3, 8005b6c <_dtoa_r+0x954>
 8005b52:	4631      	mov	r1, r6
 8005b54:	2205      	movs	r2, #5
 8005b56:	4620      	mov	r0, r4
 8005b58:	f000 fab2 	bl	80060c0 <__multadd>
 8005b5c:	4601      	mov	r1, r0
 8005b5e:	4606      	mov	r6, r0
 8005b60:	4650      	mov	r0, sl
 8005b62:	f000 fcc7 	bl	80064f4 <__mcmp>
 8005b66:	2800      	cmp	r0, #0
 8005b68:	f73f adbb 	bgt.w	80056e2 <_dtoa_r+0x4ca>
 8005b6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b6e:	9d00      	ldr	r5, [sp, #0]
 8005b70:	ea6f 0b03 	mvn.w	fp, r3
 8005b74:	f04f 0800 	mov.w	r8, #0
 8005b78:	4631      	mov	r1, r6
 8005b7a:	4620      	mov	r0, r4
 8005b7c:	f000 fa7e 	bl	800607c <_Bfree>
 8005b80:	2f00      	cmp	r7, #0
 8005b82:	f43f aeab 	beq.w	80058dc <_dtoa_r+0x6c4>
 8005b86:	f1b8 0f00 	cmp.w	r8, #0
 8005b8a:	d005      	beq.n	8005b98 <_dtoa_r+0x980>
 8005b8c:	45b8      	cmp	r8, r7
 8005b8e:	d003      	beq.n	8005b98 <_dtoa_r+0x980>
 8005b90:	4641      	mov	r1, r8
 8005b92:	4620      	mov	r0, r4
 8005b94:	f000 fa72 	bl	800607c <_Bfree>
 8005b98:	4639      	mov	r1, r7
 8005b9a:	4620      	mov	r0, r4
 8005b9c:	f000 fa6e 	bl	800607c <_Bfree>
 8005ba0:	e69c      	b.n	80058dc <_dtoa_r+0x6c4>
 8005ba2:	2600      	movs	r6, #0
 8005ba4:	4637      	mov	r7, r6
 8005ba6:	e7e1      	b.n	8005b6c <_dtoa_r+0x954>
 8005ba8:	46bb      	mov	fp, r7
 8005baa:	4637      	mov	r7, r6
 8005bac:	e599      	b.n	80056e2 <_dtoa_r+0x4ca>
 8005bae:	bf00      	nop
 8005bb0:	40240000 	.word	0x40240000
 8005bb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	f000 80c8 	beq.w	8005d4c <_dtoa_r+0xb34>
 8005bbc:	9b04      	ldr	r3, [sp, #16]
 8005bbe:	9301      	str	r3, [sp, #4]
 8005bc0:	2d00      	cmp	r5, #0
 8005bc2:	dd05      	ble.n	8005bd0 <_dtoa_r+0x9b8>
 8005bc4:	4639      	mov	r1, r7
 8005bc6:	462a      	mov	r2, r5
 8005bc8:	4620      	mov	r0, r4
 8005bca:	f000 fc27 	bl	800641c <__lshift>
 8005bce:	4607      	mov	r7, r0
 8005bd0:	f1b8 0f00 	cmp.w	r8, #0
 8005bd4:	d05b      	beq.n	8005c8e <_dtoa_r+0xa76>
 8005bd6:	6879      	ldr	r1, [r7, #4]
 8005bd8:	4620      	mov	r0, r4
 8005bda:	f000 fa0f 	bl	8005ffc <_Balloc>
 8005bde:	4605      	mov	r5, r0
 8005be0:	b928      	cbnz	r0, 8005bee <_dtoa_r+0x9d6>
 8005be2:	4b83      	ldr	r3, [pc, #524]	; (8005df0 <_dtoa_r+0xbd8>)
 8005be4:	4602      	mov	r2, r0
 8005be6:	f240 21ef 	movw	r1, #751	; 0x2ef
 8005bea:	f7ff bb2e 	b.w	800524a <_dtoa_r+0x32>
 8005bee:	693a      	ldr	r2, [r7, #16]
 8005bf0:	3202      	adds	r2, #2
 8005bf2:	0092      	lsls	r2, r2, #2
 8005bf4:	f107 010c 	add.w	r1, r7, #12
 8005bf8:	300c      	adds	r0, #12
 8005bfa:	f001 f801 	bl	8006c00 <memcpy>
 8005bfe:	2201      	movs	r2, #1
 8005c00:	4629      	mov	r1, r5
 8005c02:	4620      	mov	r0, r4
 8005c04:	f000 fc0a 	bl	800641c <__lshift>
 8005c08:	9b00      	ldr	r3, [sp, #0]
 8005c0a:	3301      	adds	r3, #1
 8005c0c:	9304      	str	r3, [sp, #16]
 8005c0e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005c12:	4413      	add	r3, r2
 8005c14:	9308      	str	r3, [sp, #32]
 8005c16:	9b02      	ldr	r3, [sp, #8]
 8005c18:	f003 0301 	and.w	r3, r3, #1
 8005c1c:	46b8      	mov	r8, r7
 8005c1e:	9306      	str	r3, [sp, #24]
 8005c20:	4607      	mov	r7, r0
 8005c22:	9b04      	ldr	r3, [sp, #16]
 8005c24:	4631      	mov	r1, r6
 8005c26:	3b01      	subs	r3, #1
 8005c28:	4650      	mov	r0, sl
 8005c2a:	9301      	str	r3, [sp, #4]
 8005c2c:	f7ff fa6b 	bl	8005106 <quorem>
 8005c30:	4641      	mov	r1, r8
 8005c32:	9002      	str	r0, [sp, #8]
 8005c34:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005c38:	4650      	mov	r0, sl
 8005c3a:	f000 fc5b 	bl	80064f4 <__mcmp>
 8005c3e:	463a      	mov	r2, r7
 8005c40:	9005      	str	r0, [sp, #20]
 8005c42:	4631      	mov	r1, r6
 8005c44:	4620      	mov	r0, r4
 8005c46:	f000 fc71 	bl	800652c <__mdiff>
 8005c4a:	68c2      	ldr	r2, [r0, #12]
 8005c4c:	4605      	mov	r5, r0
 8005c4e:	bb02      	cbnz	r2, 8005c92 <_dtoa_r+0xa7a>
 8005c50:	4601      	mov	r1, r0
 8005c52:	4650      	mov	r0, sl
 8005c54:	f000 fc4e 	bl	80064f4 <__mcmp>
 8005c58:	4602      	mov	r2, r0
 8005c5a:	4629      	mov	r1, r5
 8005c5c:	4620      	mov	r0, r4
 8005c5e:	9209      	str	r2, [sp, #36]	; 0x24
 8005c60:	f000 fa0c 	bl	800607c <_Bfree>
 8005c64:	9b07      	ldr	r3, [sp, #28]
 8005c66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c68:	9d04      	ldr	r5, [sp, #16]
 8005c6a:	ea43 0102 	orr.w	r1, r3, r2
 8005c6e:	9b06      	ldr	r3, [sp, #24]
 8005c70:	4319      	orrs	r1, r3
 8005c72:	d110      	bne.n	8005c96 <_dtoa_r+0xa7e>
 8005c74:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005c78:	d029      	beq.n	8005cce <_dtoa_r+0xab6>
 8005c7a:	9b05      	ldr	r3, [sp, #20]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	dd02      	ble.n	8005c86 <_dtoa_r+0xa6e>
 8005c80:	9b02      	ldr	r3, [sp, #8]
 8005c82:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8005c86:	9b01      	ldr	r3, [sp, #4]
 8005c88:	f883 9000 	strb.w	r9, [r3]
 8005c8c:	e774      	b.n	8005b78 <_dtoa_r+0x960>
 8005c8e:	4638      	mov	r0, r7
 8005c90:	e7ba      	b.n	8005c08 <_dtoa_r+0x9f0>
 8005c92:	2201      	movs	r2, #1
 8005c94:	e7e1      	b.n	8005c5a <_dtoa_r+0xa42>
 8005c96:	9b05      	ldr	r3, [sp, #20]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	db04      	blt.n	8005ca6 <_dtoa_r+0xa8e>
 8005c9c:	9907      	ldr	r1, [sp, #28]
 8005c9e:	430b      	orrs	r3, r1
 8005ca0:	9906      	ldr	r1, [sp, #24]
 8005ca2:	430b      	orrs	r3, r1
 8005ca4:	d120      	bne.n	8005ce8 <_dtoa_r+0xad0>
 8005ca6:	2a00      	cmp	r2, #0
 8005ca8:	dded      	ble.n	8005c86 <_dtoa_r+0xa6e>
 8005caa:	4651      	mov	r1, sl
 8005cac:	2201      	movs	r2, #1
 8005cae:	4620      	mov	r0, r4
 8005cb0:	f000 fbb4 	bl	800641c <__lshift>
 8005cb4:	4631      	mov	r1, r6
 8005cb6:	4682      	mov	sl, r0
 8005cb8:	f000 fc1c 	bl	80064f4 <__mcmp>
 8005cbc:	2800      	cmp	r0, #0
 8005cbe:	dc03      	bgt.n	8005cc8 <_dtoa_r+0xab0>
 8005cc0:	d1e1      	bne.n	8005c86 <_dtoa_r+0xa6e>
 8005cc2:	f019 0f01 	tst.w	r9, #1
 8005cc6:	d0de      	beq.n	8005c86 <_dtoa_r+0xa6e>
 8005cc8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005ccc:	d1d8      	bne.n	8005c80 <_dtoa_r+0xa68>
 8005cce:	9a01      	ldr	r2, [sp, #4]
 8005cd0:	2339      	movs	r3, #57	; 0x39
 8005cd2:	7013      	strb	r3, [r2, #0]
 8005cd4:	462b      	mov	r3, r5
 8005cd6:	461d      	mov	r5, r3
 8005cd8:	3b01      	subs	r3, #1
 8005cda:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005cde:	2a39      	cmp	r2, #57	; 0x39
 8005ce0:	d06c      	beq.n	8005dbc <_dtoa_r+0xba4>
 8005ce2:	3201      	adds	r2, #1
 8005ce4:	701a      	strb	r2, [r3, #0]
 8005ce6:	e747      	b.n	8005b78 <_dtoa_r+0x960>
 8005ce8:	2a00      	cmp	r2, #0
 8005cea:	dd07      	ble.n	8005cfc <_dtoa_r+0xae4>
 8005cec:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005cf0:	d0ed      	beq.n	8005cce <_dtoa_r+0xab6>
 8005cf2:	9a01      	ldr	r2, [sp, #4]
 8005cf4:	f109 0301 	add.w	r3, r9, #1
 8005cf8:	7013      	strb	r3, [r2, #0]
 8005cfa:	e73d      	b.n	8005b78 <_dtoa_r+0x960>
 8005cfc:	9b04      	ldr	r3, [sp, #16]
 8005cfe:	9a08      	ldr	r2, [sp, #32]
 8005d00:	f803 9c01 	strb.w	r9, [r3, #-1]
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d043      	beq.n	8005d90 <_dtoa_r+0xb78>
 8005d08:	4651      	mov	r1, sl
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	220a      	movs	r2, #10
 8005d0e:	4620      	mov	r0, r4
 8005d10:	f000 f9d6 	bl	80060c0 <__multadd>
 8005d14:	45b8      	cmp	r8, r7
 8005d16:	4682      	mov	sl, r0
 8005d18:	f04f 0300 	mov.w	r3, #0
 8005d1c:	f04f 020a 	mov.w	r2, #10
 8005d20:	4641      	mov	r1, r8
 8005d22:	4620      	mov	r0, r4
 8005d24:	d107      	bne.n	8005d36 <_dtoa_r+0xb1e>
 8005d26:	f000 f9cb 	bl	80060c0 <__multadd>
 8005d2a:	4680      	mov	r8, r0
 8005d2c:	4607      	mov	r7, r0
 8005d2e:	9b04      	ldr	r3, [sp, #16]
 8005d30:	3301      	adds	r3, #1
 8005d32:	9304      	str	r3, [sp, #16]
 8005d34:	e775      	b.n	8005c22 <_dtoa_r+0xa0a>
 8005d36:	f000 f9c3 	bl	80060c0 <__multadd>
 8005d3a:	4639      	mov	r1, r7
 8005d3c:	4680      	mov	r8, r0
 8005d3e:	2300      	movs	r3, #0
 8005d40:	220a      	movs	r2, #10
 8005d42:	4620      	mov	r0, r4
 8005d44:	f000 f9bc 	bl	80060c0 <__multadd>
 8005d48:	4607      	mov	r7, r0
 8005d4a:	e7f0      	b.n	8005d2e <_dtoa_r+0xb16>
 8005d4c:	9b04      	ldr	r3, [sp, #16]
 8005d4e:	9301      	str	r3, [sp, #4]
 8005d50:	9d00      	ldr	r5, [sp, #0]
 8005d52:	4631      	mov	r1, r6
 8005d54:	4650      	mov	r0, sl
 8005d56:	f7ff f9d6 	bl	8005106 <quorem>
 8005d5a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005d5e:	9b00      	ldr	r3, [sp, #0]
 8005d60:	f805 9b01 	strb.w	r9, [r5], #1
 8005d64:	1aea      	subs	r2, r5, r3
 8005d66:	9b01      	ldr	r3, [sp, #4]
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	dd07      	ble.n	8005d7c <_dtoa_r+0xb64>
 8005d6c:	4651      	mov	r1, sl
 8005d6e:	2300      	movs	r3, #0
 8005d70:	220a      	movs	r2, #10
 8005d72:	4620      	mov	r0, r4
 8005d74:	f000 f9a4 	bl	80060c0 <__multadd>
 8005d78:	4682      	mov	sl, r0
 8005d7a:	e7ea      	b.n	8005d52 <_dtoa_r+0xb3a>
 8005d7c:	9b01      	ldr	r3, [sp, #4]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	bfc8      	it	gt
 8005d82:	461d      	movgt	r5, r3
 8005d84:	9b00      	ldr	r3, [sp, #0]
 8005d86:	bfd8      	it	le
 8005d88:	2501      	movle	r5, #1
 8005d8a:	441d      	add	r5, r3
 8005d8c:	f04f 0800 	mov.w	r8, #0
 8005d90:	4651      	mov	r1, sl
 8005d92:	2201      	movs	r2, #1
 8005d94:	4620      	mov	r0, r4
 8005d96:	f000 fb41 	bl	800641c <__lshift>
 8005d9a:	4631      	mov	r1, r6
 8005d9c:	4682      	mov	sl, r0
 8005d9e:	f000 fba9 	bl	80064f4 <__mcmp>
 8005da2:	2800      	cmp	r0, #0
 8005da4:	dc96      	bgt.n	8005cd4 <_dtoa_r+0xabc>
 8005da6:	d102      	bne.n	8005dae <_dtoa_r+0xb96>
 8005da8:	f019 0f01 	tst.w	r9, #1
 8005dac:	d192      	bne.n	8005cd4 <_dtoa_r+0xabc>
 8005dae:	462b      	mov	r3, r5
 8005db0:	461d      	mov	r5, r3
 8005db2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005db6:	2a30      	cmp	r2, #48	; 0x30
 8005db8:	d0fa      	beq.n	8005db0 <_dtoa_r+0xb98>
 8005dba:	e6dd      	b.n	8005b78 <_dtoa_r+0x960>
 8005dbc:	9a00      	ldr	r2, [sp, #0]
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	d189      	bne.n	8005cd6 <_dtoa_r+0xabe>
 8005dc2:	f10b 0b01 	add.w	fp, fp, #1
 8005dc6:	2331      	movs	r3, #49	; 0x31
 8005dc8:	e796      	b.n	8005cf8 <_dtoa_r+0xae0>
 8005dca:	4b0a      	ldr	r3, [pc, #40]	; (8005df4 <_dtoa_r+0xbdc>)
 8005dcc:	f7ff ba99 	b.w	8005302 <_dtoa_r+0xea>
 8005dd0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	f47f aa6d 	bne.w	80052b2 <_dtoa_r+0x9a>
 8005dd8:	4b07      	ldr	r3, [pc, #28]	; (8005df8 <_dtoa_r+0xbe0>)
 8005dda:	f7ff ba92 	b.w	8005302 <_dtoa_r+0xea>
 8005dde:	9b01      	ldr	r3, [sp, #4]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	dcb5      	bgt.n	8005d50 <_dtoa_r+0xb38>
 8005de4:	9b07      	ldr	r3, [sp, #28]
 8005de6:	2b02      	cmp	r3, #2
 8005de8:	f73f aeb1 	bgt.w	8005b4e <_dtoa_r+0x936>
 8005dec:	e7b0      	b.n	8005d50 <_dtoa_r+0xb38>
 8005dee:	bf00      	nop
 8005df0:	08006e98 	.word	0x08006e98
 8005df4:	08006df8 	.word	0x08006df8
 8005df8:	08006e1c 	.word	0x08006e1c

08005dfc <_free_r>:
 8005dfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005dfe:	2900      	cmp	r1, #0
 8005e00:	d044      	beq.n	8005e8c <_free_r+0x90>
 8005e02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e06:	9001      	str	r0, [sp, #4]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	f1a1 0404 	sub.w	r4, r1, #4
 8005e0e:	bfb8      	it	lt
 8005e10:	18e4      	addlt	r4, r4, r3
 8005e12:	f000 f8e7 	bl	8005fe4 <__malloc_lock>
 8005e16:	4a1e      	ldr	r2, [pc, #120]	; (8005e90 <_free_r+0x94>)
 8005e18:	9801      	ldr	r0, [sp, #4]
 8005e1a:	6813      	ldr	r3, [r2, #0]
 8005e1c:	b933      	cbnz	r3, 8005e2c <_free_r+0x30>
 8005e1e:	6063      	str	r3, [r4, #4]
 8005e20:	6014      	str	r4, [r2, #0]
 8005e22:	b003      	add	sp, #12
 8005e24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005e28:	f000 b8e2 	b.w	8005ff0 <__malloc_unlock>
 8005e2c:	42a3      	cmp	r3, r4
 8005e2e:	d908      	bls.n	8005e42 <_free_r+0x46>
 8005e30:	6825      	ldr	r5, [r4, #0]
 8005e32:	1961      	adds	r1, r4, r5
 8005e34:	428b      	cmp	r3, r1
 8005e36:	bf01      	itttt	eq
 8005e38:	6819      	ldreq	r1, [r3, #0]
 8005e3a:	685b      	ldreq	r3, [r3, #4]
 8005e3c:	1949      	addeq	r1, r1, r5
 8005e3e:	6021      	streq	r1, [r4, #0]
 8005e40:	e7ed      	b.n	8005e1e <_free_r+0x22>
 8005e42:	461a      	mov	r2, r3
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	b10b      	cbz	r3, 8005e4c <_free_r+0x50>
 8005e48:	42a3      	cmp	r3, r4
 8005e4a:	d9fa      	bls.n	8005e42 <_free_r+0x46>
 8005e4c:	6811      	ldr	r1, [r2, #0]
 8005e4e:	1855      	adds	r5, r2, r1
 8005e50:	42a5      	cmp	r5, r4
 8005e52:	d10b      	bne.n	8005e6c <_free_r+0x70>
 8005e54:	6824      	ldr	r4, [r4, #0]
 8005e56:	4421      	add	r1, r4
 8005e58:	1854      	adds	r4, r2, r1
 8005e5a:	42a3      	cmp	r3, r4
 8005e5c:	6011      	str	r1, [r2, #0]
 8005e5e:	d1e0      	bne.n	8005e22 <_free_r+0x26>
 8005e60:	681c      	ldr	r4, [r3, #0]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	6053      	str	r3, [r2, #4]
 8005e66:	440c      	add	r4, r1
 8005e68:	6014      	str	r4, [r2, #0]
 8005e6a:	e7da      	b.n	8005e22 <_free_r+0x26>
 8005e6c:	d902      	bls.n	8005e74 <_free_r+0x78>
 8005e6e:	230c      	movs	r3, #12
 8005e70:	6003      	str	r3, [r0, #0]
 8005e72:	e7d6      	b.n	8005e22 <_free_r+0x26>
 8005e74:	6825      	ldr	r5, [r4, #0]
 8005e76:	1961      	adds	r1, r4, r5
 8005e78:	428b      	cmp	r3, r1
 8005e7a:	bf04      	itt	eq
 8005e7c:	6819      	ldreq	r1, [r3, #0]
 8005e7e:	685b      	ldreq	r3, [r3, #4]
 8005e80:	6063      	str	r3, [r4, #4]
 8005e82:	bf04      	itt	eq
 8005e84:	1949      	addeq	r1, r1, r5
 8005e86:	6021      	streq	r1, [r4, #0]
 8005e88:	6054      	str	r4, [r2, #4]
 8005e8a:	e7ca      	b.n	8005e22 <_free_r+0x26>
 8005e8c:	b003      	add	sp, #12
 8005e8e:	bd30      	pop	{r4, r5, pc}
 8005e90:	200008e8 	.word	0x200008e8

08005e94 <malloc>:
 8005e94:	4b02      	ldr	r3, [pc, #8]	; (8005ea0 <malloc+0xc>)
 8005e96:	4601      	mov	r1, r0
 8005e98:	6818      	ldr	r0, [r3, #0]
 8005e9a:	f000 b823 	b.w	8005ee4 <_malloc_r>
 8005e9e:	bf00      	nop
 8005ea0:	20000064 	.word	0x20000064

08005ea4 <sbrk_aligned>:
 8005ea4:	b570      	push	{r4, r5, r6, lr}
 8005ea6:	4e0e      	ldr	r6, [pc, #56]	; (8005ee0 <sbrk_aligned+0x3c>)
 8005ea8:	460c      	mov	r4, r1
 8005eaa:	6831      	ldr	r1, [r6, #0]
 8005eac:	4605      	mov	r5, r0
 8005eae:	b911      	cbnz	r1, 8005eb6 <sbrk_aligned+0x12>
 8005eb0:	f000 fe96 	bl	8006be0 <_sbrk_r>
 8005eb4:	6030      	str	r0, [r6, #0]
 8005eb6:	4621      	mov	r1, r4
 8005eb8:	4628      	mov	r0, r5
 8005eba:	f000 fe91 	bl	8006be0 <_sbrk_r>
 8005ebe:	1c43      	adds	r3, r0, #1
 8005ec0:	d00a      	beq.n	8005ed8 <sbrk_aligned+0x34>
 8005ec2:	1cc4      	adds	r4, r0, #3
 8005ec4:	f024 0403 	bic.w	r4, r4, #3
 8005ec8:	42a0      	cmp	r0, r4
 8005eca:	d007      	beq.n	8005edc <sbrk_aligned+0x38>
 8005ecc:	1a21      	subs	r1, r4, r0
 8005ece:	4628      	mov	r0, r5
 8005ed0:	f000 fe86 	bl	8006be0 <_sbrk_r>
 8005ed4:	3001      	adds	r0, #1
 8005ed6:	d101      	bne.n	8005edc <sbrk_aligned+0x38>
 8005ed8:	f04f 34ff 	mov.w	r4, #4294967295
 8005edc:	4620      	mov	r0, r4
 8005ede:	bd70      	pop	{r4, r5, r6, pc}
 8005ee0:	200008ec 	.word	0x200008ec

08005ee4 <_malloc_r>:
 8005ee4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ee8:	1ccd      	adds	r5, r1, #3
 8005eea:	f025 0503 	bic.w	r5, r5, #3
 8005eee:	3508      	adds	r5, #8
 8005ef0:	2d0c      	cmp	r5, #12
 8005ef2:	bf38      	it	cc
 8005ef4:	250c      	movcc	r5, #12
 8005ef6:	2d00      	cmp	r5, #0
 8005ef8:	4607      	mov	r7, r0
 8005efa:	db01      	blt.n	8005f00 <_malloc_r+0x1c>
 8005efc:	42a9      	cmp	r1, r5
 8005efe:	d905      	bls.n	8005f0c <_malloc_r+0x28>
 8005f00:	230c      	movs	r3, #12
 8005f02:	603b      	str	r3, [r7, #0]
 8005f04:	2600      	movs	r6, #0
 8005f06:	4630      	mov	r0, r6
 8005f08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f0c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005fe0 <_malloc_r+0xfc>
 8005f10:	f000 f868 	bl	8005fe4 <__malloc_lock>
 8005f14:	f8d8 3000 	ldr.w	r3, [r8]
 8005f18:	461c      	mov	r4, r3
 8005f1a:	bb5c      	cbnz	r4, 8005f74 <_malloc_r+0x90>
 8005f1c:	4629      	mov	r1, r5
 8005f1e:	4638      	mov	r0, r7
 8005f20:	f7ff ffc0 	bl	8005ea4 <sbrk_aligned>
 8005f24:	1c43      	adds	r3, r0, #1
 8005f26:	4604      	mov	r4, r0
 8005f28:	d155      	bne.n	8005fd6 <_malloc_r+0xf2>
 8005f2a:	f8d8 4000 	ldr.w	r4, [r8]
 8005f2e:	4626      	mov	r6, r4
 8005f30:	2e00      	cmp	r6, #0
 8005f32:	d145      	bne.n	8005fc0 <_malloc_r+0xdc>
 8005f34:	2c00      	cmp	r4, #0
 8005f36:	d048      	beq.n	8005fca <_malloc_r+0xe6>
 8005f38:	6823      	ldr	r3, [r4, #0]
 8005f3a:	4631      	mov	r1, r6
 8005f3c:	4638      	mov	r0, r7
 8005f3e:	eb04 0903 	add.w	r9, r4, r3
 8005f42:	f000 fe4d 	bl	8006be0 <_sbrk_r>
 8005f46:	4581      	cmp	r9, r0
 8005f48:	d13f      	bne.n	8005fca <_malloc_r+0xe6>
 8005f4a:	6821      	ldr	r1, [r4, #0]
 8005f4c:	1a6d      	subs	r5, r5, r1
 8005f4e:	4629      	mov	r1, r5
 8005f50:	4638      	mov	r0, r7
 8005f52:	f7ff ffa7 	bl	8005ea4 <sbrk_aligned>
 8005f56:	3001      	adds	r0, #1
 8005f58:	d037      	beq.n	8005fca <_malloc_r+0xe6>
 8005f5a:	6823      	ldr	r3, [r4, #0]
 8005f5c:	442b      	add	r3, r5
 8005f5e:	6023      	str	r3, [r4, #0]
 8005f60:	f8d8 3000 	ldr.w	r3, [r8]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d038      	beq.n	8005fda <_malloc_r+0xf6>
 8005f68:	685a      	ldr	r2, [r3, #4]
 8005f6a:	42a2      	cmp	r2, r4
 8005f6c:	d12b      	bne.n	8005fc6 <_malloc_r+0xe2>
 8005f6e:	2200      	movs	r2, #0
 8005f70:	605a      	str	r2, [r3, #4]
 8005f72:	e00f      	b.n	8005f94 <_malloc_r+0xb0>
 8005f74:	6822      	ldr	r2, [r4, #0]
 8005f76:	1b52      	subs	r2, r2, r5
 8005f78:	d41f      	bmi.n	8005fba <_malloc_r+0xd6>
 8005f7a:	2a0b      	cmp	r2, #11
 8005f7c:	d917      	bls.n	8005fae <_malloc_r+0xca>
 8005f7e:	1961      	adds	r1, r4, r5
 8005f80:	42a3      	cmp	r3, r4
 8005f82:	6025      	str	r5, [r4, #0]
 8005f84:	bf18      	it	ne
 8005f86:	6059      	strne	r1, [r3, #4]
 8005f88:	6863      	ldr	r3, [r4, #4]
 8005f8a:	bf08      	it	eq
 8005f8c:	f8c8 1000 	streq.w	r1, [r8]
 8005f90:	5162      	str	r2, [r4, r5]
 8005f92:	604b      	str	r3, [r1, #4]
 8005f94:	4638      	mov	r0, r7
 8005f96:	f104 060b 	add.w	r6, r4, #11
 8005f9a:	f000 f829 	bl	8005ff0 <__malloc_unlock>
 8005f9e:	f026 0607 	bic.w	r6, r6, #7
 8005fa2:	1d23      	adds	r3, r4, #4
 8005fa4:	1af2      	subs	r2, r6, r3
 8005fa6:	d0ae      	beq.n	8005f06 <_malloc_r+0x22>
 8005fa8:	1b9b      	subs	r3, r3, r6
 8005faa:	50a3      	str	r3, [r4, r2]
 8005fac:	e7ab      	b.n	8005f06 <_malloc_r+0x22>
 8005fae:	42a3      	cmp	r3, r4
 8005fb0:	6862      	ldr	r2, [r4, #4]
 8005fb2:	d1dd      	bne.n	8005f70 <_malloc_r+0x8c>
 8005fb4:	f8c8 2000 	str.w	r2, [r8]
 8005fb8:	e7ec      	b.n	8005f94 <_malloc_r+0xb0>
 8005fba:	4623      	mov	r3, r4
 8005fbc:	6864      	ldr	r4, [r4, #4]
 8005fbe:	e7ac      	b.n	8005f1a <_malloc_r+0x36>
 8005fc0:	4634      	mov	r4, r6
 8005fc2:	6876      	ldr	r6, [r6, #4]
 8005fc4:	e7b4      	b.n	8005f30 <_malloc_r+0x4c>
 8005fc6:	4613      	mov	r3, r2
 8005fc8:	e7cc      	b.n	8005f64 <_malloc_r+0x80>
 8005fca:	230c      	movs	r3, #12
 8005fcc:	603b      	str	r3, [r7, #0]
 8005fce:	4638      	mov	r0, r7
 8005fd0:	f000 f80e 	bl	8005ff0 <__malloc_unlock>
 8005fd4:	e797      	b.n	8005f06 <_malloc_r+0x22>
 8005fd6:	6025      	str	r5, [r4, #0]
 8005fd8:	e7dc      	b.n	8005f94 <_malloc_r+0xb0>
 8005fda:	605b      	str	r3, [r3, #4]
 8005fdc:	deff      	udf	#255	; 0xff
 8005fde:	bf00      	nop
 8005fe0:	200008e8 	.word	0x200008e8

08005fe4 <__malloc_lock>:
 8005fe4:	4801      	ldr	r0, [pc, #4]	; (8005fec <__malloc_lock+0x8>)
 8005fe6:	f7ff b88c 	b.w	8005102 <__retarget_lock_acquire_recursive>
 8005fea:	bf00      	nop
 8005fec:	200008e4 	.word	0x200008e4

08005ff0 <__malloc_unlock>:
 8005ff0:	4801      	ldr	r0, [pc, #4]	; (8005ff8 <__malloc_unlock+0x8>)
 8005ff2:	f7ff b887 	b.w	8005104 <__retarget_lock_release_recursive>
 8005ff6:	bf00      	nop
 8005ff8:	200008e4 	.word	0x200008e4

08005ffc <_Balloc>:
 8005ffc:	b570      	push	{r4, r5, r6, lr}
 8005ffe:	69c6      	ldr	r6, [r0, #28]
 8006000:	4604      	mov	r4, r0
 8006002:	460d      	mov	r5, r1
 8006004:	b976      	cbnz	r6, 8006024 <_Balloc+0x28>
 8006006:	2010      	movs	r0, #16
 8006008:	f7ff ff44 	bl	8005e94 <malloc>
 800600c:	4602      	mov	r2, r0
 800600e:	61e0      	str	r0, [r4, #28]
 8006010:	b920      	cbnz	r0, 800601c <_Balloc+0x20>
 8006012:	4b18      	ldr	r3, [pc, #96]	; (8006074 <_Balloc+0x78>)
 8006014:	4818      	ldr	r0, [pc, #96]	; (8006078 <_Balloc+0x7c>)
 8006016:	216b      	movs	r1, #107	; 0x6b
 8006018:	f000 fe00 	bl	8006c1c <__assert_func>
 800601c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006020:	6006      	str	r6, [r0, #0]
 8006022:	60c6      	str	r6, [r0, #12]
 8006024:	69e6      	ldr	r6, [r4, #28]
 8006026:	68f3      	ldr	r3, [r6, #12]
 8006028:	b183      	cbz	r3, 800604c <_Balloc+0x50>
 800602a:	69e3      	ldr	r3, [r4, #28]
 800602c:	68db      	ldr	r3, [r3, #12]
 800602e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006032:	b9b8      	cbnz	r0, 8006064 <_Balloc+0x68>
 8006034:	2101      	movs	r1, #1
 8006036:	fa01 f605 	lsl.w	r6, r1, r5
 800603a:	1d72      	adds	r2, r6, #5
 800603c:	0092      	lsls	r2, r2, #2
 800603e:	4620      	mov	r0, r4
 8006040:	f000 fe0a 	bl	8006c58 <_calloc_r>
 8006044:	b160      	cbz	r0, 8006060 <_Balloc+0x64>
 8006046:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800604a:	e00e      	b.n	800606a <_Balloc+0x6e>
 800604c:	2221      	movs	r2, #33	; 0x21
 800604e:	2104      	movs	r1, #4
 8006050:	4620      	mov	r0, r4
 8006052:	f000 fe01 	bl	8006c58 <_calloc_r>
 8006056:	69e3      	ldr	r3, [r4, #28]
 8006058:	60f0      	str	r0, [r6, #12]
 800605a:	68db      	ldr	r3, [r3, #12]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d1e4      	bne.n	800602a <_Balloc+0x2e>
 8006060:	2000      	movs	r0, #0
 8006062:	bd70      	pop	{r4, r5, r6, pc}
 8006064:	6802      	ldr	r2, [r0, #0]
 8006066:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800606a:	2300      	movs	r3, #0
 800606c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006070:	e7f7      	b.n	8006062 <_Balloc+0x66>
 8006072:	bf00      	nop
 8006074:	08006e29 	.word	0x08006e29
 8006078:	08006ea9 	.word	0x08006ea9

0800607c <_Bfree>:
 800607c:	b570      	push	{r4, r5, r6, lr}
 800607e:	69c6      	ldr	r6, [r0, #28]
 8006080:	4605      	mov	r5, r0
 8006082:	460c      	mov	r4, r1
 8006084:	b976      	cbnz	r6, 80060a4 <_Bfree+0x28>
 8006086:	2010      	movs	r0, #16
 8006088:	f7ff ff04 	bl	8005e94 <malloc>
 800608c:	4602      	mov	r2, r0
 800608e:	61e8      	str	r0, [r5, #28]
 8006090:	b920      	cbnz	r0, 800609c <_Bfree+0x20>
 8006092:	4b09      	ldr	r3, [pc, #36]	; (80060b8 <_Bfree+0x3c>)
 8006094:	4809      	ldr	r0, [pc, #36]	; (80060bc <_Bfree+0x40>)
 8006096:	218f      	movs	r1, #143	; 0x8f
 8006098:	f000 fdc0 	bl	8006c1c <__assert_func>
 800609c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80060a0:	6006      	str	r6, [r0, #0]
 80060a2:	60c6      	str	r6, [r0, #12]
 80060a4:	b13c      	cbz	r4, 80060b6 <_Bfree+0x3a>
 80060a6:	69eb      	ldr	r3, [r5, #28]
 80060a8:	6862      	ldr	r2, [r4, #4]
 80060aa:	68db      	ldr	r3, [r3, #12]
 80060ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80060b0:	6021      	str	r1, [r4, #0]
 80060b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80060b6:	bd70      	pop	{r4, r5, r6, pc}
 80060b8:	08006e29 	.word	0x08006e29
 80060bc:	08006ea9 	.word	0x08006ea9

080060c0 <__multadd>:
 80060c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060c4:	690d      	ldr	r5, [r1, #16]
 80060c6:	4607      	mov	r7, r0
 80060c8:	460c      	mov	r4, r1
 80060ca:	461e      	mov	r6, r3
 80060cc:	f101 0c14 	add.w	ip, r1, #20
 80060d0:	2000      	movs	r0, #0
 80060d2:	f8dc 3000 	ldr.w	r3, [ip]
 80060d6:	b299      	uxth	r1, r3
 80060d8:	fb02 6101 	mla	r1, r2, r1, r6
 80060dc:	0c1e      	lsrs	r6, r3, #16
 80060de:	0c0b      	lsrs	r3, r1, #16
 80060e0:	fb02 3306 	mla	r3, r2, r6, r3
 80060e4:	b289      	uxth	r1, r1
 80060e6:	3001      	adds	r0, #1
 80060e8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80060ec:	4285      	cmp	r5, r0
 80060ee:	f84c 1b04 	str.w	r1, [ip], #4
 80060f2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80060f6:	dcec      	bgt.n	80060d2 <__multadd+0x12>
 80060f8:	b30e      	cbz	r6, 800613e <__multadd+0x7e>
 80060fa:	68a3      	ldr	r3, [r4, #8]
 80060fc:	42ab      	cmp	r3, r5
 80060fe:	dc19      	bgt.n	8006134 <__multadd+0x74>
 8006100:	6861      	ldr	r1, [r4, #4]
 8006102:	4638      	mov	r0, r7
 8006104:	3101      	adds	r1, #1
 8006106:	f7ff ff79 	bl	8005ffc <_Balloc>
 800610a:	4680      	mov	r8, r0
 800610c:	b928      	cbnz	r0, 800611a <__multadd+0x5a>
 800610e:	4602      	mov	r2, r0
 8006110:	4b0c      	ldr	r3, [pc, #48]	; (8006144 <__multadd+0x84>)
 8006112:	480d      	ldr	r0, [pc, #52]	; (8006148 <__multadd+0x88>)
 8006114:	21ba      	movs	r1, #186	; 0xba
 8006116:	f000 fd81 	bl	8006c1c <__assert_func>
 800611a:	6922      	ldr	r2, [r4, #16]
 800611c:	3202      	adds	r2, #2
 800611e:	f104 010c 	add.w	r1, r4, #12
 8006122:	0092      	lsls	r2, r2, #2
 8006124:	300c      	adds	r0, #12
 8006126:	f000 fd6b 	bl	8006c00 <memcpy>
 800612a:	4621      	mov	r1, r4
 800612c:	4638      	mov	r0, r7
 800612e:	f7ff ffa5 	bl	800607c <_Bfree>
 8006132:	4644      	mov	r4, r8
 8006134:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006138:	3501      	adds	r5, #1
 800613a:	615e      	str	r6, [r3, #20]
 800613c:	6125      	str	r5, [r4, #16]
 800613e:	4620      	mov	r0, r4
 8006140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006144:	08006e98 	.word	0x08006e98
 8006148:	08006ea9 	.word	0x08006ea9

0800614c <__hi0bits>:
 800614c:	0c03      	lsrs	r3, r0, #16
 800614e:	041b      	lsls	r3, r3, #16
 8006150:	b9d3      	cbnz	r3, 8006188 <__hi0bits+0x3c>
 8006152:	0400      	lsls	r0, r0, #16
 8006154:	2310      	movs	r3, #16
 8006156:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800615a:	bf04      	itt	eq
 800615c:	0200      	lsleq	r0, r0, #8
 800615e:	3308      	addeq	r3, #8
 8006160:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006164:	bf04      	itt	eq
 8006166:	0100      	lsleq	r0, r0, #4
 8006168:	3304      	addeq	r3, #4
 800616a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800616e:	bf04      	itt	eq
 8006170:	0080      	lsleq	r0, r0, #2
 8006172:	3302      	addeq	r3, #2
 8006174:	2800      	cmp	r0, #0
 8006176:	db05      	blt.n	8006184 <__hi0bits+0x38>
 8006178:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800617c:	f103 0301 	add.w	r3, r3, #1
 8006180:	bf08      	it	eq
 8006182:	2320      	moveq	r3, #32
 8006184:	4618      	mov	r0, r3
 8006186:	4770      	bx	lr
 8006188:	2300      	movs	r3, #0
 800618a:	e7e4      	b.n	8006156 <__hi0bits+0xa>

0800618c <__lo0bits>:
 800618c:	6803      	ldr	r3, [r0, #0]
 800618e:	f013 0207 	ands.w	r2, r3, #7
 8006192:	d00c      	beq.n	80061ae <__lo0bits+0x22>
 8006194:	07d9      	lsls	r1, r3, #31
 8006196:	d422      	bmi.n	80061de <__lo0bits+0x52>
 8006198:	079a      	lsls	r2, r3, #30
 800619a:	bf49      	itett	mi
 800619c:	085b      	lsrmi	r3, r3, #1
 800619e:	089b      	lsrpl	r3, r3, #2
 80061a0:	6003      	strmi	r3, [r0, #0]
 80061a2:	2201      	movmi	r2, #1
 80061a4:	bf5c      	itt	pl
 80061a6:	6003      	strpl	r3, [r0, #0]
 80061a8:	2202      	movpl	r2, #2
 80061aa:	4610      	mov	r0, r2
 80061ac:	4770      	bx	lr
 80061ae:	b299      	uxth	r1, r3
 80061b0:	b909      	cbnz	r1, 80061b6 <__lo0bits+0x2a>
 80061b2:	0c1b      	lsrs	r3, r3, #16
 80061b4:	2210      	movs	r2, #16
 80061b6:	b2d9      	uxtb	r1, r3
 80061b8:	b909      	cbnz	r1, 80061be <__lo0bits+0x32>
 80061ba:	3208      	adds	r2, #8
 80061bc:	0a1b      	lsrs	r3, r3, #8
 80061be:	0719      	lsls	r1, r3, #28
 80061c0:	bf04      	itt	eq
 80061c2:	091b      	lsreq	r3, r3, #4
 80061c4:	3204      	addeq	r2, #4
 80061c6:	0799      	lsls	r1, r3, #30
 80061c8:	bf04      	itt	eq
 80061ca:	089b      	lsreq	r3, r3, #2
 80061cc:	3202      	addeq	r2, #2
 80061ce:	07d9      	lsls	r1, r3, #31
 80061d0:	d403      	bmi.n	80061da <__lo0bits+0x4e>
 80061d2:	085b      	lsrs	r3, r3, #1
 80061d4:	f102 0201 	add.w	r2, r2, #1
 80061d8:	d003      	beq.n	80061e2 <__lo0bits+0x56>
 80061da:	6003      	str	r3, [r0, #0]
 80061dc:	e7e5      	b.n	80061aa <__lo0bits+0x1e>
 80061de:	2200      	movs	r2, #0
 80061e0:	e7e3      	b.n	80061aa <__lo0bits+0x1e>
 80061e2:	2220      	movs	r2, #32
 80061e4:	e7e1      	b.n	80061aa <__lo0bits+0x1e>
	...

080061e8 <__i2b>:
 80061e8:	b510      	push	{r4, lr}
 80061ea:	460c      	mov	r4, r1
 80061ec:	2101      	movs	r1, #1
 80061ee:	f7ff ff05 	bl	8005ffc <_Balloc>
 80061f2:	4602      	mov	r2, r0
 80061f4:	b928      	cbnz	r0, 8006202 <__i2b+0x1a>
 80061f6:	4b05      	ldr	r3, [pc, #20]	; (800620c <__i2b+0x24>)
 80061f8:	4805      	ldr	r0, [pc, #20]	; (8006210 <__i2b+0x28>)
 80061fa:	f240 1145 	movw	r1, #325	; 0x145
 80061fe:	f000 fd0d 	bl	8006c1c <__assert_func>
 8006202:	2301      	movs	r3, #1
 8006204:	6144      	str	r4, [r0, #20]
 8006206:	6103      	str	r3, [r0, #16]
 8006208:	bd10      	pop	{r4, pc}
 800620a:	bf00      	nop
 800620c:	08006e98 	.word	0x08006e98
 8006210:	08006ea9 	.word	0x08006ea9

08006214 <__multiply>:
 8006214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006218:	4691      	mov	r9, r2
 800621a:	690a      	ldr	r2, [r1, #16]
 800621c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006220:	429a      	cmp	r2, r3
 8006222:	bfb8      	it	lt
 8006224:	460b      	movlt	r3, r1
 8006226:	460c      	mov	r4, r1
 8006228:	bfbc      	itt	lt
 800622a:	464c      	movlt	r4, r9
 800622c:	4699      	movlt	r9, r3
 800622e:	6927      	ldr	r7, [r4, #16]
 8006230:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006234:	68a3      	ldr	r3, [r4, #8]
 8006236:	6861      	ldr	r1, [r4, #4]
 8006238:	eb07 060a 	add.w	r6, r7, sl
 800623c:	42b3      	cmp	r3, r6
 800623e:	b085      	sub	sp, #20
 8006240:	bfb8      	it	lt
 8006242:	3101      	addlt	r1, #1
 8006244:	f7ff feda 	bl	8005ffc <_Balloc>
 8006248:	b930      	cbnz	r0, 8006258 <__multiply+0x44>
 800624a:	4602      	mov	r2, r0
 800624c:	4b44      	ldr	r3, [pc, #272]	; (8006360 <__multiply+0x14c>)
 800624e:	4845      	ldr	r0, [pc, #276]	; (8006364 <__multiply+0x150>)
 8006250:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006254:	f000 fce2 	bl	8006c1c <__assert_func>
 8006258:	f100 0514 	add.w	r5, r0, #20
 800625c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006260:	462b      	mov	r3, r5
 8006262:	2200      	movs	r2, #0
 8006264:	4543      	cmp	r3, r8
 8006266:	d321      	bcc.n	80062ac <__multiply+0x98>
 8006268:	f104 0314 	add.w	r3, r4, #20
 800626c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006270:	f109 0314 	add.w	r3, r9, #20
 8006274:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006278:	9202      	str	r2, [sp, #8]
 800627a:	1b3a      	subs	r2, r7, r4
 800627c:	3a15      	subs	r2, #21
 800627e:	f022 0203 	bic.w	r2, r2, #3
 8006282:	3204      	adds	r2, #4
 8006284:	f104 0115 	add.w	r1, r4, #21
 8006288:	428f      	cmp	r7, r1
 800628a:	bf38      	it	cc
 800628c:	2204      	movcc	r2, #4
 800628e:	9201      	str	r2, [sp, #4]
 8006290:	9a02      	ldr	r2, [sp, #8]
 8006292:	9303      	str	r3, [sp, #12]
 8006294:	429a      	cmp	r2, r3
 8006296:	d80c      	bhi.n	80062b2 <__multiply+0x9e>
 8006298:	2e00      	cmp	r6, #0
 800629a:	dd03      	ble.n	80062a4 <__multiply+0x90>
 800629c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d05b      	beq.n	800635c <__multiply+0x148>
 80062a4:	6106      	str	r6, [r0, #16]
 80062a6:	b005      	add	sp, #20
 80062a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062ac:	f843 2b04 	str.w	r2, [r3], #4
 80062b0:	e7d8      	b.n	8006264 <__multiply+0x50>
 80062b2:	f8b3 a000 	ldrh.w	sl, [r3]
 80062b6:	f1ba 0f00 	cmp.w	sl, #0
 80062ba:	d024      	beq.n	8006306 <__multiply+0xf2>
 80062bc:	f104 0e14 	add.w	lr, r4, #20
 80062c0:	46a9      	mov	r9, r5
 80062c2:	f04f 0c00 	mov.w	ip, #0
 80062c6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80062ca:	f8d9 1000 	ldr.w	r1, [r9]
 80062ce:	fa1f fb82 	uxth.w	fp, r2
 80062d2:	b289      	uxth	r1, r1
 80062d4:	fb0a 110b 	mla	r1, sl, fp, r1
 80062d8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80062dc:	f8d9 2000 	ldr.w	r2, [r9]
 80062e0:	4461      	add	r1, ip
 80062e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80062e6:	fb0a c20b 	mla	r2, sl, fp, ip
 80062ea:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80062ee:	b289      	uxth	r1, r1
 80062f0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80062f4:	4577      	cmp	r7, lr
 80062f6:	f849 1b04 	str.w	r1, [r9], #4
 80062fa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80062fe:	d8e2      	bhi.n	80062c6 <__multiply+0xb2>
 8006300:	9a01      	ldr	r2, [sp, #4]
 8006302:	f845 c002 	str.w	ip, [r5, r2]
 8006306:	9a03      	ldr	r2, [sp, #12]
 8006308:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800630c:	3304      	adds	r3, #4
 800630e:	f1b9 0f00 	cmp.w	r9, #0
 8006312:	d021      	beq.n	8006358 <__multiply+0x144>
 8006314:	6829      	ldr	r1, [r5, #0]
 8006316:	f104 0c14 	add.w	ip, r4, #20
 800631a:	46ae      	mov	lr, r5
 800631c:	f04f 0a00 	mov.w	sl, #0
 8006320:	f8bc b000 	ldrh.w	fp, [ip]
 8006324:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006328:	fb09 220b 	mla	r2, r9, fp, r2
 800632c:	4452      	add	r2, sl
 800632e:	b289      	uxth	r1, r1
 8006330:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006334:	f84e 1b04 	str.w	r1, [lr], #4
 8006338:	f85c 1b04 	ldr.w	r1, [ip], #4
 800633c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006340:	f8be 1000 	ldrh.w	r1, [lr]
 8006344:	fb09 110a 	mla	r1, r9, sl, r1
 8006348:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800634c:	4567      	cmp	r7, ip
 800634e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006352:	d8e5      	bhi.n	8006320 <__multiply+0x10c>
 8006354:	9a01      	ldr	r2, [sp, #4]
 8006356:	50a9      	str	r1, [r5, r2]
 8006358:	3504      	adds	r5, #4
 800635a:	e799      	b.n	8006290 <__multiply+0x7c>
 800635c:	3e01      	subs	r6, #1
 800635e:	e79b      	b.n	8006298 <__multiply+0x84>
 8006360:	08006e98 	.word	0x08006e98
 8006364:	08006ea9 	.word	0x08006ea9

08006368 <__pow5mult>:
 8006368:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800636c:	4615      	mov	r5, r2
 800636e:	f012 0203 	ands.w	r2, r2, #3
 8006372:	4606      	mov	r6, r0
 8006374:	460f      	mov	r7, r1
 8006376:	d007      	beq.n	8006388 <__pow5mult+0x20>
 8006378:	4c25      	ldr	r4, [pc, #148]	; (8006410 <__pow5mult+0xa8>)
 800637a:	3a01      	subs	r2, #1
 800637c:	2300      	movs	r3, #0
 800637e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006382:	f7ff fe9d 	bl	80060c0 <__multadd>
 8006386:	4607      	mov	r7, r0
 8006388:	10ad      	asrs	r5, r5, #2
 800638a:	d03d      	beq.n	8006408 <__pow5mult+0xa0>
 800638c:	69f4      	ldr	r4, [r6, #28]
 800638e:	b97c      	cbnz	r4, 80063b0 <__pow5mult+0x48>
 8006390:	2010      	movs	r0, #16
 8006392:	f7ff fd7f 	bl	8005e94 <malloc>
 8006396:	4602      	mov	r2, r0
 8006398:	61f0      	str	r0, [r6, #28]
 800639a:	b928      	cbnz	r0, 80063a8 <__pow5mult+0x40>
 800639c:	4b1d      	ldr	r3, [pc, #116]	; (8006414 <__pow5mult+0xac>)
 800639e:	481e      	ldr	r0, [pc, #120]	; (8006418 <__pow5mult+0xb0>)
 80063a0:	f240 11b3 	movw	r1, #435	; 0x1b3
 80063a4:	f000 fc3a 	bl	8006c1c <__assert_func>
 80063a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80063ac:	6004      	str	r4, [r0, #0]
 80063ae:	60c4      	str	r4, [r0, #12]
 80063b0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80063b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80063b8:	b94c      	cbnz	r4, 80063ce <__pow5mult+0x66>
 80063ba:	f240 2171 	movw	r1, #625	; 0x271
 80063be:	4630      	mov	r0, r6
 80063c0:	f7ff ff12 	bl	80061e8 <__i2b>
 80063c4:	2300      	movs	r3, #0
 80063c6:	f8c8 0008 	str.w	r0, [r8, #8]
 80063ca:	4604      	mov	r4, r0
 80063cc:	6003      	str	r3, [r0, #0]
 80063ce:	f04f 0900 	mov.w	r9, #0
 80063d2:	07eb      	lsls	r3, r5, #31
 80063d4:	d50a      	bpl.n	80063ec <__pow5mult+0x84>
 80063d6:	4639      	mov	r1, r7
 80063d8:	4622      	mov	r2, r4
 80063da:	4630      	mov	r0, r6
 80063dc:	f7ff ff1a 	bl	8006214 <__multiply>
 80063e0:	4639      	mov	r1, r7
 80063e2:	4680      	mov	r8, r0
 80063e4:	4630      	mov	r0, r6
 80063e6:	f7ff fe49 	bl	800607c <_Bfree>
 80063ea:	4647      	mov	r7, r8
 80063ec:	106d      	asrs	r5, r5, #1
 80063ee:	d00b      	beq.n	8006408 <__pow5mult+0xa0>
 80063f0:	6820      	ldr	r0, [r4, #0]
 80063f2:	b938      	cbnz	r0, 8006404 <__pow5mult+0x9c>
 80063f4:	4622      	mov	r2, r4
 80063f6:	4621      	mov	r1, r4
 80063f8:	4630      	mov	r0, r6
 80063fa:	f7ff ff0b 	bl	8006214 <__multiply>
 80063fe:	6020      	str	r0, [r4, #0]
 8006400:	f8c0 9000 	str.w	r9, [r0]
 8006404:	4604      	mov	r4, r0
 8006406:	e7e4      	b.n	80063d2 <__pow5mult+0x6a>
 8006408:	4638      	mov	r0, r7
 800640a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800640e:	bf00      	nop
 8006410:	08006ff8 	.word	0x08006ff8
 8006414:	08006e29 	.word	0x08006e29
 8006418:	08006ea9 	.word	0x08006ea9

0800641c <__lshift>:
 800641c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006420:	460c      	mov	r4, r1
 8006422:	6849      	ldr	r1, [r1, #4]
 8006424:	6923      	ldr	r3, [r4, #16]
 8006426:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800642a:	68a3      	ldr	r3, [r4, #8]
 800642c:	4607      	mov	r7, r0
 800642e:	4691      	mov	r9, r2
 8006430:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006434:	f108 0601 	add.w	r6, r8, #1
 8006438:	42b3      	cmp	r3, r6
 800643a:	db0b      	blt.n	8006454 <__lshift+0x38>
 800643c:	4638      	mov	r0, r7
 800643e:	f7ff fddd 	bl	8005ffc <_Balloc>
 8006442:	4605      	mov	r5, r0
 8006444:	b948      	cbnz	r0, 800645a <__lshift+0x3e>
 8006446:	4602      	mov	r2, r0
 8006448:	4b28      	ldr	r3, [pc, #160]	; (80064ec <__lshift+0xd0>)
 800644a:	4829      	ldr	r0, [pc, #164]	; (80064f0 <__lshift+0xd4>)
 800644c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006450:	f000 fbe4 	bl	8006c1c <__assert_func>
 8006454:	3101      	adds	r1, #1
 8006456:	005b      	lsls	r3, r3, #1
 8006458:	e7ee      	b.n	8006438 <__lshift+0x1c>
 800645a:	2300      	movs	r3, #0
 800645c:	f100 0114 	add.w	r1, r0, #20
 8006460:	f100 0210 	add.w	r2, r0, #16
 8006464:	4618      	mov	r0, r3
 8006466:	4553      	cmp	r3, sl
 8006468:	db33      	blt.n	80064d2 <__lshift+0xb6>
 800646a:	6920      	ldr	r0, [r4, #16]
 800646c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006470:	f104 0314 	add.w	r3, r4, #20
 8006474:	f019 091f 	ands.w	r9, r9, #31
 8006478:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800647c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006480:	d02b      	beq.n	80064da <__lshift+0xbe>
 8006482:	f1c9 0e20 	rsb	lr, r9, #32
 8006486:	468a      	mov	sl, r1
 8006488:	2200      	movs	r2, #0
 800648a:	6818      	ldr	r0, [r3, #0]
 800648c:	fa00 f009 	lsl.w	r0, r0, r9
 8006490:	4310      	orrs	r0, r2
 8006492:	f84a 0b04 	str.w	r0, [sl], #4
 8006496:	f853 2b04 	ldr.w	r2, [r3], #4
 800649a:	459c      	cmp	ip, r3
 800649c:	fa22 f20e 	lsr.w	r2, r2, lr
 80064a0:	d8f3      	bhi.n	800648a <__lshift+0x6e>
 80064a2:	ebac 0304 	sub.w	r3, ip, r4
 80064a6:	3b15      	subs	r3, #21
 80064a8:	f023 0303 	bic.w	r3, r3, #3
 80064ac:	3304      	adds	r3, #4
 80064ae:	f104 0015 	add.w	r0, r4, #21
 80064b2:	4584      	cmp	ip, r0
 80064b4:	bf38      	it	cc
 80064b6:	2304      	movcc	r3, #4
 80064b8:	50ca      	str	r2, [r1, r3]
 80064ba:	b10a      	cbz	r2, 80064c0 <__lshift+0xa4>
 80064bc:	f108 0602 	add.w	r6, r8, #2
 80064c0:	3e01      	subs	r6, #1
 80064c2:	4638      	mov	r0, r7
 80064c4:	612e      	str	r6, [r5, #16]
 80064c6:	4621      	mov	r1, r4
 80064c8:	f7ff fdd8 	bl	800607c <_Bfree>
 80064cc:	4628      	mov	r0, r5
 80064ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064d2:	f842 0f04 	str.w	r0, [r2, #4]!
 80064d6:	3301      	adds	r3, #1
 80064d8:	e7c5      	b.n	8006466 <__lshift+0x4a>
 80064da:	3904      	subs	r1, #4
 80064dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80064e0:	f841 2f04 	str.w	r2, [r1, #4]!
 80064e4:	459c      	cmp	ip, r3
 80064e6:	d8f9      	bhi.n	80064dc <__lshift+0xc0>
 80064e8:	e7ea      	b.n	80064c0 <__lshift+0xa4>
 80064ea:	bf00      	nop
 80064ec:	08006e98 	.word	0x08006e98
 80064f0:	08006ea9 	.word	0x08006ea9

080064f4 <__mcmp>:
 80064f4:	b530      	push	{r4, r5, lr}
 80064f6:	6902      	ldr	r2, [r0, #16]
 80064f8:	690c      	ldr	r4, [r1, #16]
 80064fa:	1b12      	subs	r2, r2, r4
 80064fc:	d10e      	bne.n	800651c <__mcmp+0x28>
 80064fe:	f100 0314 	add.w	r3, r0, #20
 8006502:	3114      	adds	r1, #20
 8006504:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006508:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800650c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006510:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006514:	42a5      	cmp	r5, r4
 8006516:	d003      	beq.n	8006520 <__mcmp+0x2c>
 8006518:	d305      	bcc.n	8006526 <__mcmp+0x32>
 800651a:	2201      	movs	r2, #1
 800651c:	4610      	mov	r0, r2
 800651e:	bd30      	pop	{r4, r5, pc}
 8006520:	4283      	cmp	r3, r0
 8006522:	d3f3      	bcc.n	800650c <__mcmp+0x18>
 8006524:	e7fa      	b.n	800651c <__mcmp+0x28>
 8006526:	f04f 32ff 	mov.w	r2, #4294967295
 800652a:	e7f7      	b.n	800651c <__mcmp+0x28>

0800652c <__mdiff>:
 800652c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006530:	460c      	mov	r4, r1
 8006532:	4606      	mov	r6, r0
 8006534:	4611      	mov	r1, r2
 8006536:	4620      	mov	r0, r4
 8006538:	4690      	mov	r8, r2
 800653a:	f7ff ffdb 	bl	80064f4 <__mcmp>
 800653e:	1e05      	subs	r5, r0, #0
 8006540:	d110      	bne.n	8006564 <__mdiff+0x38>
 8006542:	4629      	mov	r1, r5
 8006544:	4630      	mov	r0, r6
 8006546:	f7ff fd59 	bl	8005ffc <_Balloc>
 800654a:	b930      	cbnz	r0, 800655a <__mdiff+0x2e>
 800654c:	4b3a      	ldr	r3, [pc, #232]	; (8006638 <__mdiff+0x10c>)
 800654e:	4602      	mov	r2, r0
 8006550:	f240 2137 	movw	r1, #567	; 0x237
 8006554:	4839      	ldr	r0, [pc, #228]	; (800663c <__mdiff+0x110>)
 8006556:	f000 fb61 	bl	8006c1c <__assert_func>
 800655a:	2301      	movs	r3, #1
 800655c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006560:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006564:	bfa4      	itt	ge
 8006566:	4643      	movge	r3, r8
 8006568:	46a0      	movge	r8, r4
 800656a:	4630      	mov	r0, r6
 800656c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006570:	bfa6      	itte	ge
 8006572:	461c      	movge	r4, r3
 8006574:	2500      	movge	r5, #0
 8006576:	2501      	movlt	r5, #1
 8006578:	f7ff fd40 	bl	8005ffc <_Balloc>
 800657c:	b920      	cbnz	r0, 8006588 <__mdiff+0x5c>
 800657e:	4b2e      	ldr	r3, [pc, #184]	; (8006638 <__mdiff+0x10c>)
 8006580:	4602      	mov	r2, r0
 8006582:	f240 2145 	movw	r1, #581	; 0x245
 8006586:	e7e5      	b.n	8006554 <__mdiff+0x28>
 8006588:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800658c:	6926      	ldr	r6, [r4, #16]
 800658e:	60c5      	str	r5, [r0, #12]
 8006590:	f104 0914 	add.w	r9, r4, #20
 8006594:	f108 0514 	add.w	r5, r8, #20
 8006598:	f100 0e14 	add.w	lr, r0, #20
 800659c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80065a0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80065a4:	f108 0210 	add.w	r2, r8, #16
 80065a8:	46f2      	mov	sl, lr
 80065aa:	2100      	movs	r1, #0
 80065ac:	f859 3b04 	ldr.w	r3, [r9], #4
 80065b0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80065b4:	fa11 f88b 	uxtah	r8, r1, fp
 80065b8:	b299      	uxth	r1, r3
 80065ba:	0c1b      	lsrs	r3, r3, #16
 80065bc:	eba8 0801 	sub.w	r8, r8, r1
 80065c0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80065c4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80065c8:	fa1f f888 	uxth.w	r8, r8
 80065cc:	1419      	asrs	r1, r3, #16
 80065ce:	454e      	cmp	r6, r9
 80065d0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80065d4:	f84a 3b04 	str.w	r3, [sl], #4
 80065d8:	d8e8      	bhi.n	80065ac <__mdiff+0x80>
 80065da:	1b33      	subs	r3, r6, r4
 80065dc:	3b15      	subs	r3, #21
 80065de:	f023 0303 	bic.w	r3, r3, #3
 80065e2:	3304      	adds	r3, #4
 80065e4:	3415      	adds	r4, #21
 80065e6:	42a6      	cmp	r6, r4
 80065e8:	bf38      	it	cc
 80065ea:	2304      	movcc	r3, #4
 80065ec:	441d      	add	r5, r3
 80065ee:	4473      	add	r3, lr
 80065f0:	469e      	mov	lr, r3
 80065f2:	462e      	mov	r6, r5
 80065f4:	4566      	cmp	r6, ip
 80065f6:	d30e      	bcc.n	8006616 <__mdiff+0xea>
 80065f8:	f10c 0203 	add.w	r2, ip, #3
 80065fc:	1b52      	subs	r2, r2, r5
 80065fe:	f022 0203 	bic.w	r2, r2, #3
 8006602:	3d03      	subs	r5, #3
 8006604:	45ac      	cmp	ip, r5
 8006606:	bf38      	it	cc
 8006608:	2200      	movcc	r2, #0
 800660a:	4413      	add	r3, r2
 800660c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006610:	b17a      	cbz	r2, 8006632 <__mdiff+0x106>
 8006612:	6107      	str	r7, [r0, #16]
 8006614:	e7a4      	b.n	8006560 <__mdiff+0x34>
 8006616:	f856 8b04 	ldr.w	r8, [r6], #4
 800661a:	fa11 f288 	uxtah	r2, r1, r8
 800661e:	1414      	asrs	r4, r2, #16
 8006620:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006624:	b292      	uxth	r2, r2
 8006626:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800662a:	f84e 2b04 	str.w	r2, [lr], #4
 800662e:	1421      	asrs	r1, r4, #16
 8006630:	e7e0      	b.n	80065f4 <__mdiff+0xc8>
 8006632:	3f01      	subs	r7, #1
 8006634:	e7ea      	b.n	800660c <__mdiff+0xe0>
 8006636:	bf00      	nop
 8006638:	08006e98 	.word	0x08006e98
 800663c:	08006ea9 	.word	0x08006ea9

08006640 <__d2b>:
 8006640:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006644:	460f      	mov	r7, r1
 8006646:	2101      	movs	r1, #1
 8006648:	ec59 8b10 	vmov	r8, r9, d0
 800664c:	4616      	mov	r6, r2
 800664e:	f7ff fcd5 	bl	8005ffc <_Balloc>
 8006652:	4604      	mov	r4, r0
 8006654:	b930      	cbnz	r0, 8006664 <__d2b+0x24>
 8006656:	4602      	mov	r2, r0
 8006658:	4b24      	ldr	r3, [pc, #144]	; (80066ec <__d2b+0xac>)
 800665a:	4825      	ldr	r0, [pc, #148]	; (80066f0 <__d2b+0xb0>)
 800665c:	f240 310f 	movw	r1, #783	; 0x30f
 8006660:	f000 fadc 	bl	8006c1c <__assert_func>
 8006664:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006668:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800666c:	bb2d      	cbnz	r5, 80066ba <__d2b+0x7a>
 800666e:	9301      	str	r3, [sp, #4]
 8006670:	f1b8 0300 	subs.w	r3, r8, #0
 8006674:	d026      	beq.n	80066c4 <__d2b+0x84>
 8006676:	4668      	mov	r0, sp
 8006678:	9300      	str	r3, [sp, #0]
 800667a:	f7ff fd87 	bl	800618c <__lo0bits>
 800667e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006682:	b1e8      	cbz	r0, 80066c0 <__d2b+0x80>
 8006684:	f1c0 0320 	rsb	r3, r0, #32
 8006688:	fa02 f303 	lsl.w	r3, r2, r3
 800668c:	430b      	orrs	r3, r1
 800668e:	40c2      	lsrs	r2, r0
 8006690:	6163      	str	r3, [r4, #20]
 8006692:	9201      	str	r2, [sp, #4]
 8006694:	9b01      	ldr	r3, [sp, #4]
 8006696:	61a3      	str	r3, [r4, #24]
 8006698:	2b00      	cmp	r3, #0
 800669a:	bf14      	ite	ne
 800669c:	2202      	movne	r2, #2
 800669e:	2201      	moveq	r2, #1
 80066a0:	6122      	str	r2, [r4, #16]
 80066a2:	b1bd      	cbz	r5, 80066d4 <__d2b+0x94>
 80066a4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80066a8:	4405      	add	r5, r0
 80066aa:	603d      	str	r5, [r7, #0]
 80066ac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80066b0:	6030      	str	r0, [r6, #0]
 80066b2:	4620      	mov	r0, r4
 80066b4:	b003      	add	sp, #12
 80066b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80066ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80066be:	e7d6      	b.n	800666e <__d2b+0x2e>
 80066c0:	6161      	str	r1, [r4, #20]
 80066c2:	e7e7      	b.n	8006694 <__d2b+0x54>
 80066c4:	a801      	add	r0, sp, #4
 80066c6:	f7ff fd61 	bl	800618c <__lo0bits>
 80066ca:	9b01      	ldr	r3, [sp, #4]
 80066cc:	6163      	str	r3, [r4, #20]
 80066ce:	3020      	adds	r0, #32
 80066d0:	2201      	movs	r2, #1
 80066d2:	e7e5      	b.n	80066a0 <__d2b+0x60>
 80066d4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80066d8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80066dc:	6038      	str	r0, [r7, #0]
 80066de:	6918      	ldr	r0, [r3, #16]
 80066e0:	f7ff fd34 	bl	800614c <__hi0bits>
 80066e4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80066e8:	e7e2      	b.n	80066b0 <__d2b+0x70>
 80066ea:	bf00      	nop
 80066ec:	08006e98 	.word	0x08006e98
 80066f0:	08006ea9 	.word	0x08006ea9

080066f4 <__sfputc_r>:
 80066f4:	6893      	ldr	r3, [r2, #8]
 80066f6:	3b01      	subs	r3, #1
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	b410      	push	{r4}
 80066fc:	6093      	str	r3, [r2, #8]
 80066fe:	da08      	bge.n	8006712 <__sfputc_r+0x1e>
 8006700:	6994      	ldr	r4, [r2, #24]
 8006702:	42a3      	cmp	r3, r4
 8006704:	db01      	blt.n	800670a <__sfputc_r+0x16>
 8006706:	290a      	cmp	r1, #10
 8006708:	d103      	bne.n	8006712 <__sfputc_r+0x1e>
 800670a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800670e:	f7fe bbe6 	b.w	8004ede <__swbuf_r>
 8006712:	6813      	ldr	r3, [r2, #0]
 8006714:	1c58      	adds	r0, r3, #1
 8006716:	6010      	str	r0, [r2, #0]
 8006718:	7019      	strb	r1, [r3, #0]
 800671a:	4608      	mov	r0, r1
 800671c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006720:	4770      	bx	lr

08006722 <__sfputs_r>:
 8006722:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006724:	4606      	mov	r6, r0
 8006726:	460f      	mov	r7, r1
 8006728:	4614      	mov	r4, r2
 800672a:	18d5      	adds	r5, r2, r3
 800672c:	42ac      	cmp	r4, r5
 800672e:	d101      	bne.n	8006734 <__sfputs_r+0x12>
 8006730:	2000      	movs	r0, #0
 8006732:	e007      	b.n	8006744 <__sfputs_r+0x22>
 8006734:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006738:	463a      	mov	r2, r7
 800673a:	4630      	mov	r0, r6
 800673c:	f7ff ffda 	bl	80066f4 <__sfputc_r>
 8006740:	1c43      	adds	r3, r0, #1
 8006742:	d1f3      	bne.n	800672c <__sfputs_r+0xa>
 8006744:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006748 <_vfiprintf_r>:
 8006748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800674c:	460d      	mov	r5, r1
 800674e:	b09d      	sub	sp, #116	; 0x74
 8006750:	4614      	mov	r4, r2
 8006752:	4698      	mov	r8, r3
 8006754:	4606      	mov	r6, r0
 8006756:	b118      	cbz	r0, 8006760 <_vfiprintf_r+0x18>
 8006758:	6a03      	ldr	r3, [r0, #32]
 800675a:	b90b      	cbnz	r3, 8006760 <_vfiprintf_r+0x18>
 800675c:	f7fe fad8 	bl	8004d10 <__sinit>
 8006760:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006762:	07d9      	lsls	r1, r3, #31
 8006764:	d405      	bmi.n	8006772 <_vfiprintf_r+0x2a>
 8006766:	89ab      	ldrh	r3, [r5, #12]
 8006768:	059a      	lsls	r2, r3, #22
 800676a:	d402      	bmi.n	8006772 <_vfiprintf_r+0x2a>
 800676c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800676e:	f7fe fcc8 	bl	8005102 <__retarget_lock_acquire_recursive>
 8006772:	89ab      	ldrh	r3, [r5, #12]
 8006774:	071b      	lsls	r3, r3, #28
 8006776:	d501      	bpl.n	800677c <_vfiprintf_r+0x34>
 8006778:	692b      	ldr	r3, [r5, #16]
 800677a:	b99b      	cbnz	r3, 80067a4 <_vfiprintf_r+0x5c>
 800677c:	4629      	mov	r1, r5
 800677e:	4630      	mov	r0, r6
 8006780:	f7fe fbea 	bl	8004f58 <__swsetup_r>
 8006784:	b170      	cbz	r0, 80067a4 <_vfiprintf_r+0x5c>
 8006786:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006788:	07dc      	lsls	r4, r3, #31
 800678a:	d504      	bpl.n	8006796 <_vfiprintf_r+0x4e>
 800678c:	f04f 30ff 	mov.w	r0, #4294967295
 8006790:	b01d      	add	sp, #116	; 0x74
 8006792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006796:	89ab      	ldrh	r3, [r5, #12]
 8006798:	0598      	lsls	r0, r3, #22
 800679a:	d4f7      	bmi.n	800678c <_vfiprintf_r+0x44>
 800679c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800679e:	f7fe fcb1 	bl	8005104 <__retarget_lock_release_recursive>
 80067a2:	e7f3      	b.n	800678c <_vfiprintf_r+0x44>
 80067a4:	2300      	movs	r3, #0
 80067a6:	9309      	str	r3, [sp, #36]	; 0x24
 80067a8:	2320      	movs	r3, #32
 80067aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80067ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80067b2:	2330      	movs	r3, #48	; 0x30
 80067b4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006968 <_vfiprintf_r+0x220>
 80067b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80067bc:	f04f 0901 	mov.w	r9, #1
 80067c0:	4623      	mov	r3, r4
 80067c2:	469a      	mov	sl, r3
 80067c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80067c8:	b10a      	cbz	r2, 80067ce <_vfiprintf_r+0x86>
 80067ca:	2a25      	cmp	r2, #37	; 0x25
 80067cc:	d1f9      	bne.n	80067c2 <_vfiprintf_r+0x7a>
 80067ce:	ebba 0b04 	subs.w	fp, sl, r4
 80067d2:	d00b      	beq.n	80067ec <_vfiprintf_r+0xa4>
 80067d4:	465b      	mov	r3, fp
 80067d6:	4622      	mov	r2, r4
 80067d8:	4629      	mov	r1, r5
 80067da:	4630      	mov	r0, r6
 80067dc:	f7ff ffa1 	bl	8006722 <__sfputs_r>
 80067e0:	3001      	adds	r0, #1
 80067e2:	f000 80a9 	beq.w	8006938 <_vfiprintf_r+0x1f0>
 80067e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80067e8:	445a      	add	r2, fp
 80067ea:	9209      	str	r2, [sp, #36]	; 0x24
 80067ec:	f89a 3000 	ldrb.w	r3, [sl]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	f000 80a1 	beq.w	8006938 <_vfiprintf_r+0x1f0>
 80067f6:	2300      	movs	r3, #0
 80067f8:	f04f 32ff 	mov.w	r2, #4294967295
 80067fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006800:	f10a 0a01 	add.w	sl, sl, #1
 8006804:	9304      	str	r3, [sp, #16]
 8006806:	9307      	str	r3, [sp, #28]
 8006808:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800680c:	931a      	str	r3, [sp, #104]	; 0x68
 800680e:	4654      	mov	r4, sl
 8006810:	2205      	movs	r2, #5
 8006812:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006816:	4854      	ldr	r0, [pc, #336]	; (8006968 <_vfiprintf_r+0x220>)
 8006818:	f7f9 fcea 	bl	80001f0 <memchr>
 800681c:	9a04      	ldr	r2, [sp, #16]
 800681e:	b9d8      	cbnz	r0, 8006858 <_vfiprintf_r+0x110>
 8006820:	06d1      	lsls	r1, r2, #27
 8006822:	bf44      	itt	mi
 8006824:	2320      	movmi	r3, #32
 8006826:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800682a:	0713      	lsls	r3, r2, #28
 800682c:	bf44      	itt	mi
 800682e:	232b      	movmi	r3, #43	; 0x2b
 8006830:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006834:	f89a 3000 	ldrb.w	r3, [sl]
 8006838:	2b2a      	cmp	r3, #42	; 0x2a
 800683a:	d015      	beq.n	8006868 <_vfiprintf_r+0x120>
 800683c:	9a07      	ldr	r2, [sp, #28]
 800683e:	4654      	mov	r4, sl
 8006840:	2000      	movs	r0, #0
 8006842:	f04f 0c0a 	mov.w	ip, #10
 8006846:	4621      	mov	r1, r4
 8006848:	f811 3b01 	ldrb.w	r3, [r1], #1
 800684c:	3b30      	subs	r3, #48	; 0x30
 800684e:	2b09      	cmp	r3, #9
 8006850:	d94d      	bls.n	80068ee <_vfiprintf_r+0x1a6>
 8006852:	b1b0      	cbz	r0, 8006882 <_vfiprintf_r+0x13a>
 8006854:	9207      	str	r2, [sp, #28]
 8006856:	e014      	b.n	8006882 <_vfiprintf_r+0x13a>
 8006858:	eba0 0308 	sub.w	r3, r0, r8
 800685c:	fa09 f303 	lsl.w	r3, r9, r3
 8006860:	4313      	orrs	r3, r2
 8006862:	9304      	str	r3, [sp, #16]
 8006864:	46a2      	mov	sl, r4
 8006866:	e7d2      	b.n	800680e <_vfiprintf_r+0xc6>
 8006868:	9b03      	ldr	r3, [sp, #12]
 800686a:	1d19      	adds	r1, r3, #4
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	9103      	str	r1, [sp, #12]
 8006870:	2b00      	cmp	r3, #0
 8006872:	bfbb      	ittet	lt
 8006874:	425b      	neglt	r3, r3
 8006876:	f042 0202 	orrlt.w	r2, r2, #2
 800687a:	9307      	strge	r3, [sp, #28]
 800687c:	9307      	strlt	r3, [sp, #28]
 800687e:	bfb8      	it	lt
 8006880:	9204      	strlt	r2, [sp, #16]
 8006882:	7823      	ldrb	r3, [r4, #0]
 8006884:	2b2e      	cmp	r3, #46	; 0x2e
 8006886:	d10c      	bne.n	80068a2 <_vfiprintf_r+0x15a>
 8006888:	7863      	ldrb	r3, [r4, #1]
 800688a:	2b2a      	cmp	r3, #42	; 0x2a
 800688c:	d134      	bne.n	80068f8 <_vfiprintf_r+0x1b0>
 800688e:	9b03      	ldr	r3, [sp, #12]
 8006890:	1d1a      	adds	r2, r3, #4
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	9203      	str	r2, [sp, #12]
 8006896:	2b00      	cmp	r3, #0
 8006898:	bfb8      	it	lt
 800689a:	f04f 33ff 	movlt.w	r3, #4294967295
 800689e:	3402      	adds	r4, #2
 80068a0:	9305      	str	r3, [sp, #20]
 80068a2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006978 <_vfiprintf_r+0x230>
 80068a6:	7821      	ldrb	r1, [r4, #0]
 80068a8:	2203      	movs	r2, #3
 80068aa:	4650      	mov	r0, sl
 80068ac:	f7f9 fca0 	bl	80001f0 <memchr>
 80068b0:	b138      	cbz	r0, 80068c2 <_vfiprintf_r+0x17a>
 80068b2:	9b04      	ldr	r3, [sp, #16]
 80068b4:	eba0 000a 	sub.w	r0, r0, sl
 80068b8:	2240      	movs	r2, #64	; 0x40
 80068ba:	4082      	lsls	r2, r0
 80068bc:	4313      	orrs	r3, r2
 80068be:	3401      	adds	r4, #1
 80068c0:	9304      	str	r3, [sp, #16]
 80068c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068c6:	4829      	ldr	r0, [pc, #164]	; (800696c <_vfiprintf_r+0x224>)
 80068c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80068cc:	2206      	movs	r2, #6
 80068ce:	f7f9 fc8f 	bl	80001f0 <memchr>
 80068d2:	2800      	cmp	r0, #0
 80068d4:	d03f      	beq.n	8006956 <_vfiprintf_r+0x20e>
 80068d6:	4b26      	ldr	r3, [pc, #152]	; (8006970 <_vfiprintf_r+0x228>)
 80068d8:	bb1b      	cbnz	r3, 8006922 <_vfiprintf_r+0x1da>
 80068da:	9b03      	ldr	r3, [sp, #12]
 80068dc:	3307      	adds	r3, #7
 80068de:	f023 0307 	bic.w	r3, r3, #7
 80068e2:	3308      	adds	r3, #8
 80068e4:	9303      	str	r3, [sp, #12]
 80068e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068e8:	443b      	add	r3, r7
 80068ea:	9309      	str	r3, [sp, #36]	; 0x24
 80068ec:	e768      	b.n	80067c0 <_vfiprintf_r+0x78>
 80068ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80068f2:	460c      	mov	r4, r1
 80068f4:	2001      	movs	r0, #1
 80068f6:	e7a6      	b.n	8006846 <_vfiprintf_r+0xfe>
 80068f8:	2300      	movs	r3, #0
 80068fa:	3401      	adds	r4, #1
 80068fc:	9305      	str	r3, [sp, #20]
 80068fe:	4619      	mov	r1, r3
 8006900:	f04f 0c0a 	mov.w	ip, #10
 8006904:	4620      	mov	r0, r4
 8006906:	f810 2b01 	ldrb.w	r2, [r0], #1
 800690a:	3a30      	subs	r2, #48	; 0x30
 800690c:	2a09      	cmp	r2, #9
 800690e:	d903      	bls.n	8006918 <_vfiprintf_r+0x1d0>
 8006910:	2b00      	cmp	r3, #0
 8006912:	d0c6      	beq.n	80068a2 <_vfiprintf_r+0x15a>
 8006914:	9105      	str	r1, [sp, #20]
 8006916:	e7c4      	b.n	80068a2 <_vfiprintf_r+0x15a>
 8006918:	fb0c 2101 	mla	r1, ip, r1, r2
 800691c:	4604      	mov	r4, r0
 800691e:	2301      	movs	r3, #1
 8006920:	e7f0      	b.n	8006904 <_vfiprintf_r+0x1bc>
 8006922:	ab03      	add	r3, sp, #12
 8006924:	9300      	str	r3, [sp, #0]
 8006926:	462a      	mov	r2, r5
 8006928:	4b12      	ldr	r3, [pc, #72]	; (8006974 <_vfiprintf_r+0x22c>)
 800692a:	a904      	add	r1, sp, #16
 800692c:	4630      	mov	r0, r6
 800692e:	f7fd fd9d 	bl	800446c <_printf_float>
 8006932:	4607      	mov	r7, r0
 8006934:	1c78      	adds	r0, r7, #1
 8006936:	d1d6      	bne.n	80068e6 <_vfiprintf_r+0x19e>
 8006938:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800693a:	07d9      	lsls	r1, r3, #31
 800693c:	d405      	bmi.n	800694a <_vfiprintf_r+0x202>
 800693e:	89ab      	ldrh	r3, [r5, #12]
 8006940:	059a      	lsls	r2, r3, #22
 8006942:	d402      	bmi.n	800694a <_vfiprintf_r+0x202>
 8006944:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006946:	f7fe fbdd 	bl	8005104 <__retarget_lock_release_recursive>
 800694a:	89ab      	ldrh	r3, [r5, #12]
 800694c:	065b      	lsls	r3, r3, #25
 800694e:	f53f af1d 	bmi.w	800678c <_vfiprintf_r+0x44>
 8006952:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006954:	e71c      	b.n	8006790 <_vfiprintf_r+0x48>
 8006956:	ab03      	add	r3, sp, #12
 8006958:	9300      	str	r3, [sp, #0]
 800695a:	462a      	mov	r2, r5
 800695c:	4b05      	ldr	r3, [pc, #20]	; (8006974 <_vfiprintf_r+0x22c>)
 800695e:	a904      	add	r1, sp, #16
 8006960:	4630      	mov	r0, r6
 8006962:	f7fe f827 	bl	80049b4 <_printf_i>
 8006966:	e7e4      	b.n	8006932 <_vfiprintf_r+0x1ea>
 8006968:	08007004 	.word	0x08007004
 800696c:	0800700e 	.word	0x0800700e
 8006970:	0800446d 	.word	0x0800446d
 8006974:	08006723 	.word	0x08006723
 8006978:	0800700a 	.word	0x0800700a

0800697c <__sflush_r>:
 800697c:	898a      	ldrh	r2, [r1, #12]
 800697e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006982:	4605      	mov	r5, r0
 8006984:	0710      	lsls	r0, r2, #28
 8006986:	460c      	mov	r4, r1
 8006988:	d458      	bmi.n	8006a3c <__sflush_r+0xc0>
 800698a:	684b      	ldr	r3, [r1, #4]
 800698c:	2b00      	cmp	r3, #0
 800698e:	dc05      	bgt.n	800699c <__sflush_r+0x20>
 8006990:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006992:	2b00      	cmp	r3, #0
 8006994:	dc02      	bgt.n	800699c <__sflush_r+0x20>
 8006996:	2000      	movs	r0, #0
 8006998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800699c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800699e:	2e00      	cmp	r6, #0
 80069a0:	d0f9      	beq.n	8006996 <__sflush_r+0x1a>
 80069a2:	2300      	movs	r3, #0
 80069a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80069a8:	682f      	ldr	r7, [r5, #0]
 80069aa:	6a21      	ldr	r1, [r4, #32]
 80069ac:	602b      	str	r3, [r5, #0]
 80069ae:	d032      	beq.n	8006a16 <__sflush_r+0x9a>
 80069b0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80069b2:	89a3      	ldrh	r3, [r4, #12]
 80069b4:	075a      	lsls	r2, r3, #29
 80069b6:	d505      	bpl.n	80069c4 <__sflush_r+0x48>
 80069b8:	6863      	ldr	r3, [r4, #4]
 80069ba:	1ac0      	subs	r0, r0, r3
 80069bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80069be:	b10b      	cbz	r3, 80069c4 <__sflush_r+0x48>
 80069c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80069c2:	1ac0      	subs	r0, r0, r3
 80069c4:	2300      	movs	r3, #0
 80069c6:	4602      	mov	r2, r0
 80069c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80069ca:	6a21      	ldr	r1, [r4, #32]
 80069cc:	4628      	mov	r0, r5
 80069ce:	47b0      	blx	r6
 80069d0:	1c43      	adds	r3, r0, #1
 80069d2:	89a3      	ldrh	r3, [r4, #12]
 80069d4:	d106      	bne.n	80069e4 <__sflush_r+0x68>
 80069d6:	6829      	ldr	r1, [r5, #0]
 80069d8:	291d      	cmp	r1, #29
 80069da:	d82b      	bhi.n	8006a34 <__sflush_r+0xb8>
 80069dc:	4a29      	ldr	r2, [pc, #164]	; (8006a84 <__sflush_r+0x108>)
 80069de:	410a      	asrs	r2, r1
 80069e0:	07d6      	lsls	r6, r2, #31
 80069e2:	d427      	bmi.n	8006a34 <__sflush_r+0xb8>
 80069e4:	2200      	movs	r2, #0
 80069e6:	6062      	str	r2, [r4, #4]
 80069e8:	04d9      	lsls	r1, r3, #19
 80069ea:	6922      	ldr	r2, [r4, #16]
 80069ec:	6022      	str	r2, [r4, #0]
 80069ee:	d504      	bpl.n	80069fa <__sflush_r+0x7e>
 80069f0:	1c42      	adds	r2, r0, #1
 80069f2:	d101      	bne.n	80069f8 <__sflush_r+0x7c>
 80069f4:	682b      	ldr	r3, [r5, #0]
 80069f6:	b903      	cbnz	r3, 80069fa <__sflush_r+0x7e>
 80069f8:	6560      	str	r0, [r4, #84]	; 0x54
 80069fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80069fc:	602f      	str	r7, [r5, #0]
 80069fe:	2900      	cmp	r1, #0
 8006a00:	d0c9      	beq.n	8006996 <__sflush_r+0x1a>
 8006a02:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a06:	4299      	cmp	r1, r3
 8006a08:	d002      	beq.n	8006a10 <__sflush_r+0x94>
 8006a0a:	4628      	mov	r0, r5
 8006a0c:	f7ff f9f6 	bl	8005dfc <_free_r>
 8006a10:	2000      	movs	r0, #0
 8006a12:	6360      	str	r0, [r4, #52]	; 0x34
 8006a14:	e7c0      	b.n	8006998 <__sflush_r+0x1c>
 8006a16:	2301      	movs	r3, #1
 8006a18:	4628      	mov	r0, r5
 8006a1a:	47b0      	blx	r6
 8006a1c:	1c41      	adds	r1, r0, #1
 8006a1e:	d1c8      	bne.n	80069b2 <__sflush_r+0x36>
 8006a20:	682b      	ldr	r3, [r5, #0]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d0c5      	beq.n	80069b2 <__sflush_r+0x36>
 8006a26:	2b1d      	cmp	r3, #29
 8006a28:	d001      	beq.n	8006a2e <__sflush_r+0xb2>
 8006a2a:	2b16      	cmp	r3, #22
 8006a2c:	d101      	bne.n	8006a32 <__sflush_r+0xb6>
 8006a2e:	602f      	str	r7, [r5, #0]
 8006a30:	e7b1      	b.n	8006996 <__sflush_r+0x1a>
 8006a32:	89a3      	ldrh	r3, [r4, #12]
 8006a34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a38:	81a3      	strh	r3, [r4, #12]
 8006a3a:	e7ad      	b.n	8006998 <__sflush_r+0x1c>
 8006a3c:	690f      	ldr	r7, [r1, #16]
 8006a3e:	2f00      	cmp	r7, #0
 8006a40:	d0a9      	beq.n	8006996 <__sflush_r+0x1a>
 8006a42:	0793      	lsls	r3, r2, #30
 8006a44:	680e      	ldr	r6, [r1, #0]
 8006a46:	bf08      	it	eq
 8006a48:	694b      	ldreq	r3, [r1, #20]
 8006a4a:	600f      	str	r7, [r1, #0]
 8006a4c:	bf18      	it	ne
 8006a4e:	2300      	movne	r3, #0
 8006a50:	eba6 0807 	sub.w	r8, r6, r7
 8006a54:	608b      	str	r3, [r1, #8]
 8006a56:	f1b8 0f00 	cmp.w	r8, #0
 8006a5a:	dd9c      	ble.n	8006996 <__sflush_r+0x1a>
 8006a5c:	6a21      	ldr	r1, [r4, #32]
 8006a5e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006a60:	4643      	mov	r3, r8
 8006a62:	463a      	mov	r2, r7
 8006a64:	4628      	mov	r0, r5
 8006a66:	47b0      	blx	r6
 8006a68:	2800      	cmp	r0, #0
 8006a6a:	dc06      	bgt.n	8006a7a <__sflush_r+0xfe>
 8006a6c:	89a3      	ldrh	r3, [r4, #12]
 8006a6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a72:	81a3      	strh	r3, [r4, #12]
 8006a74:	f04f 30ff 	mov.w	r0, #4294967295
 8006a78:	e78e      	b.n	8006998 <__sflush_r+0x1c>
 8006a7a:	4407      	add	r7, r0
 8006a7c:	eba8 0800 	sub.w	r8, r8, r0
 8006a80:	e7e9      	b.n	8006a56 <__sflush_r+0xda>
 8006a82:	bf00      	nop
 8006a84:	dfbffffe 	.word	0xdfbffffe

08006a88 <_fflush_r>:
 8006a88:	b538      	push	{r3, r4, r5, lr}
 8006a8a:	690b      	ldr	r3, [r1, #16]
 8006a8c:	4605      	mov	r5, r0
 8006a8e:	460c      	mov	r4, r1
 8006a90:	b913      	cbnz	r3, 8006a98 <_fflush_r+0x10>
 8006a92:	2500      	movs	r5, #0
 8006a94:	4628      	mov	r0, r5
 8006a96:	bd38      	pop	{r3, r4, r5, pc}
 8006a98:	b118      	cbz	r0, 8006aa2 <_fflush_r+0x1a>
 8006a9a:	6a03      	ldr	r3, [r0, #32]
 8006a9c:	b90b      	cbnz	r3, 8006aa2 <_fflush_r+0x1a>
 8006a9e:	f7fe f937 	bl	8004d10 <__sinit>
 8006aa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d0f3      	beq.n	8006a92 <_fflush_r+0xa>
 8006aaa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006aac:	07d0      	lsls	r0, r2, #31
 8006aae:	d404      	bmi.n	8006aba <_fflush_r+0x32>
 8006ab0:	0599      	lsls	r1, r3, #22
 8006ab2:	d402      	bmi.n	8006aba <_fflush_r+0x32>
 8006ab4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ab6:	f7fe fb24 	bl	8005102 <__retarget_lock_acquire_recursive>
 8006aba:	4628      	mov	r0, r5
 8006abc:	4621      	mov	r1, r4
 8006abe:	f7ff ff5d 	bl	800697c <__sflush_r>
 8006ac2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006ac4:	07da      	lsls	r2, r3, #31
 8006ac6:	4605      	mov	r5, r0
 8006ac8:	d4e4      	bmi.n	8006a94 <_fflush_r+0xc>
 8006aca:	89a3      	ldrh	r3, [r4, #12]
 8006acc:	059b      	lsls	r3, r3, #22
 8006ace:	d4e1      	bmi.n	8006a94 <_fflush_r+0xc>
 8006ad0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ad2:	f7fe fb17 	bl	8005104 <__retarget_lock_release_recursive>
 8006ad6:	e7dd      	b.n	8006a94 <_fflush_r+0xc>

08006ad8 <__swhatbuf_r>:
 8006ad8:	b570      	push	{r4, r5, r6, lr}
 8006ada:	460c      	mov	r4, r1
 8006adc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ae0:	2900      	cmp	r1, #0
 8006ae2:	b096      	sub	sp, #88	; 0x58
 8006ae4:	4615      	mov	r5, r2
 8006ae6:	461e      	mov	r6, r3
 8006ae8:	da0d      	bge.n	8006b06 <__swhatbuf_r+0x2e>
 8006aea:	89a3      	ldrh	r3, [r4, #12]
 8006aec:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006af0:	f04f 0100 	mov.w	r1, #0
 8006af4:	bf0c      	ite	eq
 8006af6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006afa:	2340      	movne	r3, #64	; 0x40
 8006afc:	2000      	movs	r0, #0
 8006afe:	6031      	str	r1, [r6, #0]
 8006b00:	602b      	str	r3, [r5, #0]
 8006b02:	b016      	add	sp, #88	; 0x58
 8006b04:	bd70      	pop	{r4, r5, r6, pc}
 8006b06:	466a      	mov	r2, sp
 8006b08:	f000 f848 	bl	8006b9c <_fstat_r>
 8006b0c:	2800      	cmp	r0, #0
 8006b0e:	dbec      	blt.n	8006aea <__swhatbuf_r+0x12>
 8006b10:	9901      	ldr	r1, [sp, #4]
 8006b12:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006b16:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006b1a:	4259      	negs	r1, r3
 8006b1c:	4159      	adcs	r1, r3
 8006b1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b22:	e7eb      	b.n	8006afc <__swhatbuf_r+0x24>

08006b24 <__smakebuf_r>:
 8006b24:	898b      	ldrh	r3, [r1, #12]
 8006b26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006b28:	079d      	lsls	r5, r3, #30
 8006b2a:	4606      	mov	r6, r0
 8006b2c:	460c      	mov	r4, r1
 8006b2e:	d507      	bpl.n	8006b40 <__smakebuf_r+0x1c>
 8006b30:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006b34:	6023      	str	r3, [r4, #0]
 8006b36:	6123      	str	r3, [r4, #16]
 8006b38:	2301      	movs	r3, #1
 8006b3a:	6163      	str	r3, [r4, #20]
 8006b3c:	b002      	add	sp, #8
 8006b3e:	bd70      	pop	{r4, r5, r6, pc}
 8006b40:	ab01      	add	r3, sp, #4
 8006b42:	466a      	mov	r2, sp
 8006b44:	f7ff ffc8 	bl	8006ad8 <__swhatbuf_r>
 8006b48:	9900      	ldr	r1, [sp, #0]
 8006b4a:	4605      	mov	r5, r0
 8006b4c:	4630      	mov	r0, r6
 8006b4e:	f7ff f9c9 	bl	8005ee4 <_malloc_r>
 8006b52:	b948      	cbnz	r0, 8006b68 <__smakebuf_r+0x44>
 8006b54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b58:	059a      	lsls	r2, r3, #22
 8006b5a:	d4ef      	bmi.n	8006b3c <__smakebuf_r+0x18>
 8006b5c:	f023 0303 	bic.w	r3, r3, #3
 8006b60:	f043 0302 	orr.w	r3, r3, #2
 8006b64:	81a3      	strh	r3, [r4, #12]
 8006b66:	e7e3      	b.n	8006b30 <__smakebuf_r+0xc>
 8006b68:	89a3      	ldrh	r3, [r4, #12]
 8006b6a:	6020      	str	r0, [r4, #0]
 8006b6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b70:	81a3      	strh	r3, [r4, #12]
 8006b72:	9b00      	ldr	r3, [sp, #0]
 8006b74:	6163      	str	r3, [r4, #20]
 8006b76:	9b01      	ldr	r3, [sp, #4]
 8006b78:	6120      	str	r0, [r4, #16]
 8006b7a:	b15b      	cbz	r3, 8006b94 <__smakebuf_r+0x70>
 8006b7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b80:	4630      	mov	r0, r6
 8006b82:	f000 f81d 	bl	8006bc0 <_isatty_r>
 8006b86:	b128      	cbz	r0, 8006b94 <__smakebuf_r+0x70>
 8006b88:	89a3      	ldrh	r3, [r4, #12]
 8006b8a:	f023 0303 	bic.w	r3, r3, #3
 8006b8e:	f043 0301 	orr.w	r3, r3, #1
 8006b92:	81a3      	strh	r3, [r4, #12]
 8006b94:	89a3      	ldrh	r3, [r4, #12]
 8006b96:	431d      	orrs	r5, r3
 8006b98:	81a5      	strh	r5, [r4, #12]
 8006b9a:	e7cf      	b.n	8006b3c <__smakebuf_r+0x18>

08006b9c <_fstat_r>:
 8006b9c:	b538      	push	{r3, r4, r5, lr}
 8006b9e:	4d07      	ldr	r5, [pc, #28]	; (8006bbc <_fstat_r+0x20>)
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	4604      	mov	r4, r0
 8006ba4:	4608      	mov	r0, r1
 8006ba6:	4611      	mov	r1, r2
 8006ba8:	602b      	str	r3, [r5, #0]
 8006baa:	f7fa fdec 	bl	8001786 <_fstat>
 8006bae:	1c43      	adds	r3, r0, #1
 8006bb0:	d102      	bne.n	8006bb8 <_fstat_r+0x1c>
 8006bb2:	682b      	ldr	r3, [r5, #0]
 8006bb4:	b103      	cbz	r3, 8006bb8 <_fstat_r+0x1c>
 8006bb6:	6023      	str	r3, [r4, #0]
 8006bb8:	bd38      	pop	{r3, r4, r5, pc}
 8006bba:	bf00      	nop
 8006bbc:	200008e0 	.word	0x200008e0

08006bc0 <_isatty_r>:
 8006bc0:	b538      	push	{r3, r4, r5, lr}
 8006bc2:	4d06      	ldr	r5, [pc, #24]	; (8006bdc <_isatty_r+0x1c>)
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	4604      	mov	r4, r0
 8006bc8:	4608      	mov	r0, r1
 8006bca:	602b      	str	r3, [r5, #0]
 8006bcc:	f7fa fdeb 	bl	80017a6 <_isatty>
 8006bd0:	1c43      	adds	r3, r0, #1
 8006bd2:	d102      	bne.n	8006bda <_isatty_r+0x1a>
 8006bd4:	682b      	ldr	r3, [r5, #0]
 8006bd6:	b103      	cbz	r3, 8006bda <_isatty_r+0x1a>
 8006bd8:	6023      	str	r3, [r4, #0]
 8006bda:	bd38      	pop	{r3, r4, r5, pc}
 8006bdc:	200008e0 	.word	0x200008e0

08006be0 <_sbrk_r>:
 8006be0:	b538      	push	{r3, r4, r5, lr}
 8006be2:	4d06      	ldr	r5, [pc, #24]	; (8006bfc <_sbrk_r+0x1c>)
 8006be4:	2300      	movs	r3, #0
 8006be6:	4604      	mov	r4, r0
 8006be8:	4608      	mov	r0, r1
 8006bea:	602b      	str	r3, [r5, #0]
 8006bec:	f7fa fdf4 	bl	80017d8 <_sbrk>
 8006bf0:	1c43      	adds	r3, r0, #1
 8006bf2:	d102      	bne.n	8006bfa <_sbrk_r+0x1a>
 8006bf4:	682b      	ldr	r3, [r5, #0]
 8006bf6:	b103      	cbz	r3, 8006bfa <_sbrk_r+0x1a>
 8006bf8:	6023      	str	r3, [r4, #0]
 8006bfa:	bd38      	pop	{r3, r4, r5, pc}
 8006bfc:	200008e0 	.word	0x200008e0

08006c00 <memcpy>:
 8006c00:	440a      	add	r2, r1
 8006c02:	4291      	cmp	r1, r2
 8006c04:	f100 33ff 	add.w	r3, r0, #4294967295
 8006c08:	d100      	bne.n	8006c0c <memcpy+0xc>
 8006c0a:	4770      	bx	lr
 8006c0c:	b510      	push	{r4, lr}
 8006c0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c12:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c16:	4291      	cmp	r1, r2
 8006c18:	d1f9      	bne.n	8006c0e <memcpy+0xe>
 8006c1a:	bd10      	pop	{r4, pc}

08006c1c <__assert_func>:
 8006c1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006c1e:	4614      	mov	r4, r2
 8006c20:	461a      	mov	r2, r3
 8006c22:	4b09      	ldr	r3, [pc, #36]	; (8006c48 <__assert_func+0x2c>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4605      	mov	r5, r0
 8006c28:	68d8      	ldr	r0, [r3, #12]
 8006c2a:	b14c      	cbz	r4, 8006c40 <__assert_func+0x24>
 8006c2c:	4b07      	ldr	r3, [pc, #28]	; (8006c4c <__assert_func+0x30>)
 8006c2e:	9100      	str	r1, [sp, #0]
 8006c30:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006c34:	4906      	ldr	r1, [pc, #24]	; (8006c50 <__assert_func+0x34>)
 8006c36:	462b      	mov	r3, r5
 8006c38:	f000 f844 	bl	8006cc4 <fiprintf>
 8006c3c:	f000 f854 	bl	8006ce8 <abort>
 8006c40:	4b04      	ldr	r3, [pc, #16]	; (8006c54 <__assert_func+0x38>)
 8006c42:	461c      	mov	r4, r3
 8006c44:	e7f3      	b.n	8006c2e <__assert_func+0x12>
 8006c46:	bf00      	nop
 8006c48:	20000064 	.word	0x20000064
 8006c4c:	0800701f 	.word	0x0800701f
 8006c50:	0800702c 	.word	0x0800702c
 8006c54:	0800705a 	.word	0x0800705a

08006c58 <_calloc_r>:
 8006c58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006c5a:	fba1 2402 	umull	r2, r4, r1, r2
 8006c5e:	b94c      	cbnz	r4, 8006c74 <_calloc_r+0x1c>
 8006c60:	4611      	mov	r1, r2
 8006c62:	9201      	str	r2, [sp, #4]
 8006c64:	f7ff f93e 	bl	8005ee4 <_malloc_r>
 8006c68:	9a01      	ldr	r2, [sp, #4]
 8006c6a:	4605      	mov	r5, r0
 8006c6c:	b930      	cbnz	r0, 8006c7c <_calloc_r+0x24>
 8006c6e:	4628      	mov	r0, r5
 8006c70:	b003      	add	sp, #12
 8006c72:	bd30      	pop	{r4, r5, pc}
 8006c74:	220c      	movs	r2, #12
 8006c76:	6002      	str	r2, [r0, #0]
 8006c78:	2500      	movs	r5, #0
 8006c7a:	e7f8      	b.n	8006c6e <_calloc_r+0x16>
 8006c7c:	4621      	mov	r1, r4
 8006c7e:	f7fe f9c3 	bl	8005008 <memset>
 8006c82:	e7f4      	b.n	8006c6e <_calloc_r+0x16>

08006c84 <__ascii_mbtowc>:
 8006c84:	b082      	sub	sp, #8
 8006c86:	b901      	cbnz	r1, 8006c8a <__ascii_mbtowc+0x6>
 8006c88:	a901      	add	r1, sp, #4
 8006c8a:	b142      	cbz	r2, 8006c9e <__ascii_mbtowc+0x1a>
 8006c8c:	b14b      	cbz	r3, 8006ca2 <__ascii_mbtowc+0x1e>
 8006c8e:	7813      	ldrb	r3, [r2, #0]
 8006c90:	600b      	str	r3, [r1, #0]
 8006c92:	7812      	ldrb	r2, [r2, #0]
 8006c94:	1e10      	subs	r0, r2, #0
 8006c96:	bf18      	it	ne
 8006c98:	2001      	movne	r0, #1
 8006c9a:	b002      	add	sp, #8
 8006c9c:	4770      	bx	lr
 8006c9e:	4610      	mov	r0, r2
 8006ca0:	e7fb      	b.n	8006c9a <__ascii_mbtowc+0x16>
 8006ca2:	f06f 0001 	mvn.w	r0, #1
 8006ca6:	e7f8      	b.n	8006c9a <__ascii_mbtowc+0x16>

08006ca8 <__ascii_wctomb>:
 8006ca8:	b149      	cbz	r1, 8006cbe <__ascii_wctomb+0x16>
 8006caa:	2aff      	cmp	r2, #255	; 0xff
 8006cac:	bf85      	ittet	hi
 8006cae:	238a      	movhi	r3, #138	; 0x8a
 8006cb0:	6003      	strhi	r3, [r0, #0]
 8006cb2:	700a      	strbls	r2, [r1, #0]
 8006cb4:	f04f 30ff 	movhi.w	r0, #4294967295
 8006cb8:	bf98      	it	ls
 8006cba:	2001      	movls	r0, #1
 8006cbc:	4770      	bx	lr
 8006cbe:	4608      	mov	r0, r1
 8006cc0:	4770      	bx	lr
	...

08006cc4 <fiprintf>:
 8006cc4:	b40e      	push	{r1, r2, r3}
 8006cc6:	b503      	push	{r0, r1, lr}
 8006cc8:	4601      	mov	r1, r0
 8006cca:	ab03      	add	r3, sp, #12
 8006ccc:	4805      	ldr	r0, [pc, #20]	; (8006ce4 <fiprintf+0x20>)
 8006cce:	f853 2b04 	ldr.w	r2, [r3], #4
 8006cd2:	6800      	ldr	r0, [r0, #0]
 8006cd4:	9301      	str	r3, [sp, #4]
 8006cd6:	f7ff fd37 	bl	8006748 <_vfiprintf_r>
 8006cda:	b002      	add	sp, #8
 8006cdc:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ce0:	b003      	add	sp, #12
 8006ce2:	4770      	bx	lr
 8006ce4:	20000064 	.word	0x20000064

08006ce8 <abort>:
 8006ce8:	b508      	push	{r3, lr}
 8006cea:	2006      	movs	r0, #6
 8006cec:	f000 f82c 	bl	8006d48 <raise>
 8006cf0:	2001      	movs	r0, #1
 8006cf2:	f7fa fd15 	bl	8001720 <_exit>

08006cf6 <_raise_r>:
 8006cf6:	291f      	cmp	r1, #31
 8006cf8:	b538      	push	{r3, r4, r5, lr}
 8006cfa:	4604      	mov	r4, r0
 8006cfc:	460d      	mov	r5, r1
 8006cfe:	d904      	bls.n	8006d0a <_raise_r+0x14>
 8006d00:	2316      	movs	r3, #22
 8006d02:	6003      	str	r3, [r0, #0]
 8006d04:	f04f 30ff 	mov.w	r0, #4294967295
 8006d08:	bd38      	pop	{r3, r4, r5, pc}
 8006d0a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006d0c:	b112      	cbz	r2, 8006d14 <_raise_r+0x1e>
 8006d0e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006d12:	b94b      	cbnz	r3, 8006d28 <_raise_r+0x32>
 8006d14:	4620      	mov	r0, r4
 8006d16:	f000 f831 	bl	8006d7c <_getpid_r>
 8006d1a:	462a      	mov	r2, r5
 8006d1c:	4601      	mov	r1, r0
 8006d1e:	4620      	mov	r0, r4
 8006d20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d24:	f000 b818 	b.w	8006d58 <_kill_r>
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	d00a      	beq.n	8006d42 <_raise_r+0x4c>
 8006d2c:	1c59      	adds	r1, r3, #1
 8006d2e:	d103      	bne.n	8006d38 <_raise_r+0x42>
 8006d30:	2316      	movs	r3, #22
 8006d32:	6003      	str	r3, [r0, #0]
 8006d34:	2001      	movs	r0, #1
 8006d36:	e7e7      	b.n	8006d08 <_raise_r+0x12>
 8006d38:	2400      	movs	r4, #0
 8006d3a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006d3e:	4628      	mov	r0, r5
 8006d40:	4798      	blx	r3
 8006d42:	2000      	movs	r0, #0
 8006d44:	e7e0      	b.n	8006d08 <_raise_r+0x12>
	...

08006d48 <raise>:
 8006d48:	4b02      	ldr	r3, [pc, #8]	; (8006d54 <raise+0xc>)
 8006d4a:	4601      	mov	r1, r0
 8006d4c:	6818      	ldr	r0, [r3, #0]
 8006d4e:	f7ff bfd2 	b.w	8006cf6 <_raise_r>
 8006d52:	bf00      	nop
 8006d54:	20000064 	.word	0x20000064

08006d58 <_kill_r>:
 8006d58:	b538      	push	{r3, r4, r5, lr}
 8006d5a:	4d07      	ldr	r5, [pc, #28]	; (8006d78 <_kill_r+0x20>)
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	4604      	mov	r4, r0
 8006d60:	4608      	mov	r0, r1
 8006d62:	4611      	mov	r1, r2
 8006d64:	602b      	str	r3, [r5, #0]
 8006d66:	f7fa fccb 	bl	8001700 <_kill>
 8006d6a:	1c43      	adds	r3, r0, #1
 8006d6c:	d102      	bne.n	8006d74 <_kill_r+0x1c>
 8006d6e:	682b      	ldr	r3, [r5, #0]
 8006d70:	b103      	cbz	r3, 8006d74 <_kill_r+0x1c>
 8006d72:	6023      	str	r3, [r4, #0]
 8006d74:	bd38      	pop	{r3, r4, r5, pc}
 8006d76:	bf00      	nop
 8006d78:	200008e0 	.word	0x200008e0

08006d7c <_getpid_r>:
 8006d7c:	f7fa bcb8 	b.w	80016f0 <_getpid>

08006d80 <_init>:
 8006d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d82:	bf00      	nop
 8006d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d86:	bc08      	pop	{r3}
 8006d88:	469e      	mov	lr, r3
 8006d8a:	4770      	bx	lr

08006d8c <_fini>:
 8006d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d8e:	bf00      	nop
 8006d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d92:	bc08      	pop	{r3}
 8006d94:	469e      	mov	lr, r3
 8006d96:	4770      	bx	lr
